# DO NOT CHANGE THIS FILE! This file is auto-generated by facade.py.
# Changes will be overwritten/lost when the file is regenerated.

from juju.client.facade import ReturnMapping, Type


class APIHostPortsResult(Type):
    _toSchema = {'servers': 'servers'}
    _toPy = {'servers': 'servers'}
    def __init__(self, servers=None, **unknown_fields):
        '''
        servers : typing.Sequence<+T_co>[~HostPort]<~HostPort>
        '''
        self.servers = [HostPort.from_json(o) for o in servers or []]



class Action(Type):
    _toSchema = {'name': 'name', 'parameters': 'parameters', 'receiver': 'receiver', 'tag': 'tag'}
    _toPy = {'name': 'name', 'parameters': 'parameters', 'receiver': 'receiver', 'tag': 'tag'}
    def __init__(self, name=None, parameters=None, receiver=None, tag=None, **unknown_fields):
        '''
        name : str
        parameters : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        receiver : str
        tag : str
        '''
        self.name = name
        self.parameters = parameters
        self.receiver = receiver
        self.tag = tag



class ActionExecutionResult(Type):
    _toSchema = {'action_tag': 'action-tag', 'message': 'message', 'results': 'results', 'status': 'status'}
    _toPy = {'action-tag': 'action_tag', 'message': 'message', 'results': 'results', 'status': 'status'}
    def __init__(self, action_tag=None, message=None, results=None, status=None, **unknown_fields):
        '''
        action_tag : str
        message : str
        results : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        status : str
        '''
        self.action_tag = action_tag
        self.message = message
        self.results = results
        self.status = status



class ActionExecutionResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~ActionExecutionResult]<~ActionExecutionResult>
        '''
        self.results = [ActionExecutionResult.from_json(o) for o in results or []]



class ActionResult(Type):
    _toSchema = {'action': 'action', 'completed': 'completed', 'enqueued': 'enqueued', 'error': 'error', 'message': 'message', 'output': 'output', 'started': 'started', 'status': 'status'}
    _toPy = {'action': 'action', 'completed': 'completed', 'enqueued': 'enqueued', 'error': 'error', 'message': 'message', 'output': 'output', 'started': 'started', 'status': 'status'}
    def __init__(self, action=None, completed=None, enqueued=None, error=None, message=None, output=None, started=None, status=None, **unknown_fields):
        '''
        action : Action
        completed : str
        enqueued : str
        error : Error
        message : str
        output : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        started : str
        status : str
        '''
        self.action = Action.from_json(action) if action else None
        self.completed = completed
        self.enqueued = enqueued
        self.error = Error.from_json(error) if error else None
        self.message = message
        self.output = output
        self.started = started
        self.status = status



class ActionResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~ActionResult]<~ActionResult>
        '''
        self.results = [ActionResult.from_json(o) for o in results or []]



class ActionSpec(Type):
    _toSchema = {'description': 'description', 'params': 'params'}
    _toPy = {'description': 'description', 'params': 'params'}
    def __init__(self, description=None, params=None, **unknown_fields):
        '''
        description : str
        params : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        self.description = description
        self.params = params



class Actions(Type):
    _toSchema = {'actions': 'actions'}
    _toPy = {'actions': 'actions'}
    def __init__(self, actions=None, **unknown_fields):
        '''
        actions : typing.Sequence<+T_co>[~Action]<~Action>
        '''
        self.actions = [Action.from_json(o) for o in actions or []]



class ActionsByName(Type):
    _toSchema = {'actions': 'actions', 'error': 'error', 'name': 'name'}
    _toPy = {'actions': 'actions', 'error': 'error', 'name': 'name'}
    def __init__(self, actions=None, error=None, name=None, **unknown_fields):
        '''
        actions : typing.Sequence<+T_co>[~ActionResult]<~ActionResult>
        error : Error
        name : str
        '''
        self.actions = [ActionResult.from_json(o) for o in actions or []]
        self.error = Error.from_json(error) if error else None
        self.name = name



class ActionsByNames(Type):
    _toSchema = {'actions': 'actions'}
    _toPy = {'actions': 'actions'}
    def __init__(self, actions=None, **unknown_fields):
        '''
        actions : typing.Sequence<+T_co>[~ActionsByName]<~ActionsByName>
        '''
        self.actions = [ActionsByName.from_json(o) for o in actions or []]



class ActionsByReceiver(Type):
    _toSchema = {'actions': 'actions', 'error': 'error', 'receiver': 'receiver'}
    _toPy = {'actions': 'actions', 'error': 'error', 'receiver': 'receiver'}
    def __init__(self, actions=None, error=None, receiver=None, **unknown_fields):
        '''
        actions : typing.Sequence<+T_co>[~ActionResult]<~ActionResult>
        error : Error
        receiver : str
        '''
        self.actions = [ActionResult.from_json(o) for o in actions or []]
        self.error = Error.from_json(error) if error else None
        self.receiver = receiver



class ActionsByReceivers(Type):
    _toSchema = {'actions': 'actions'}
    _toPy = {'actions': 'actions'}
    def __init__(self, actions=None, **unknown_fields):
        '''
        actions : typing.Sequence<+T_co>[~ActionsByReceiver]<~ActionsByReceiver>
        '''
        self.actions = [ActionsByReceiver.from_json(o) for o in actions or []]



class AddApplicationUnits(Type):
    _toSchema = {'application': 'application', 'num_units': 'num-units', 'placement': 'placement'}
    _toPy = {'application': 'application', 'num-units': 'num_units', 'placement': 'placement'}
    def __init__(self, application=None, num_units=None, placement=None, **unknown_fields):
        '''
        application : str
        num_units : int
        placement : typing.Sequence<+T_co>[~Placement]<~Placement>
        '''
        self.application = application
        self.num_units = num_units
        self.placement = [Placement.from_json(o) for o in placement or []]



class AddApplicationUnitsResults(Type):
    _toSchema = {'units': 'units'}
    _toPy = {'units': 'units'}
    def __init__(self, units=None, **unknown_fields):
        '''
        units : typing.Sequence<+T_co>[str]
        '''
        self.units = units



class AddCharm(Type):
    _toSchema = {'channel': 'channel', 'url': 'url'}
    _toPy = {'channel': 'channel', 'url': 'url'}
    def __init__(self, channel=None, url=None, **unknown_fields):
        '''
        channel : str
        url : str
        '''
        self.channel = channel
        self.url = url



class AddCharmWithAuthorization(Type):
    _toSchema = {'channel': 'channel', 'macaroon': 'macaroon', 'url': 'url'}
    _toPy = {'channel': 'channel', 'macaroon': 'macaroon', 'url': 'url'}
    def __init__(self, channel=None, macaroon=None, url=None, **unknown_fields):
        '''
        channel : str
        macaroon : Macaroon
        url : str
        '''
        self.channel = channel
        self.macaroon = Macaroon.from_json(macaroon) if macaroon else None
        self.url = url



class AddMachineParams(Type):
    _toSchema = {'addresses': 'addresses', 'constraints': 'constraints', 'container_type': 'container-type', 'disks': 'disks', 'hardware_characteristics': 'hardware-characteristics', 'instance_id': 'instance-id', 'jobs': 'jobs', 'nonce': 'nonce', 'parent_id': 'parent-id', 'placement': 'placement', 'series': 'series'}
    _toPy = {'addresses': 'addresses', 'constraints': 'constraints', 'container-type': 'container_type', 'disks': 'disks', 'hardware-characteristics': 'hardware_characteristics', 'instance-id': 'instance_id', 'jobs': 'jobs', 'nonce': 'nonce', 'parent-id': 'parent_id', 'placement': 'placement', 'series': 'series'}
    def __init__(self, addresses=None, constraints=None, container_type=None, disks=None, hardware_characteristics=None, instance_id=None, jobs=None, nonce=None, parent_id=None, placement=None, series=None, **unknown_fields):
        '''
        addresses : typing.Sequence<+T_co>[~Address]<~Address>
        constraints : Value
        container_type : str
        disks : typing.Sequence<+T_co>[~Constraints]<~Constraints>
        hardware_characteristics : HardwareCharacteristics
        instance_id : str
        jobs : typing.Sequence<+T_co>[str]
        nonce : str
        parent_id : str
        placement : Placement
        series : str
        '''
        self.addresses = [Address.from_json(o) for o in addresses or []]
        self.constraints = Value.from_json(constraints) if constraints else None
        self.container_type = container_type
        self.disks = [Constraints.from_json(o) for o in disks or []]
        self.hardware_characteristics = HardwareCharacteristics.from_json(hardware_characteristics) if hardware_characteristics else None
        self.instance_id = instance_id
        self.jobs = jobs
        self.nonce = nonce
        self.parent_id = parent_id
        self.placement = Placement.from_json(placement) if placement else None
        self.series = series



class AddMachines(Type):
    _toSchema = {'params': 'params'}
    _toPy = {'params': 'params'}
    def __init__(self, params=None, **unknown_fields):
        '''
        params : typing.Sequence<+T_co>[~AddMachineParams]<~AddMachineParams>
        '''
        self.params = [AddMachineParams.from_json(o) for o in params or []]



class AddMachinesResult(Type):
    _toSchema = {'error': 'error', 'machine': 'machine'}
    _toPy = {'error': 'error', 'machine': 'machine'}
    def __init__(self, error=None, machine=None, **unknown_fields):
        '''
        error : Error
        machine : str
        '''
        self.error = Error.from_json(error) if error else None
        self.machine = machine



class AddMachinesResults(Type):
    _toSchema = {'machines': 'machines'}
    _toPy = {'machines': 'machines'}
    def __init__(self, machines=None, **unknown_fields):
        '''
        machines : typing.Sequence<+T_co>[~AddMachinesResult]<~AddMachinesResult>
        '''
        self.machines = [AddMachinesResult.from_json(o) for o in machines or []]



class AddPendingResourcesArgs(Type):
    _toSchema = {'addcharmwithauthorization': 'AddCharmWithAuthorization', 'entity': 'Entity', 'resources': 'Resources'}
    _toPy = {'AddCharmWithAuthorization': 'addcharmwithauthorization', 'Entity': 'entity', 'Resources': 'resources'}
    def __init__(self, addcharmwithauthorization=None, entity=None, resources=None, **unknown_fields):
        '''
        addcharmwithauthorization : AddCharmWithAuthorization
        entity : Entity
        resources : typing.Sequence<+T_co>[~CharmResource]<~CharmResource>
        '''
        self.addcharmwithauthorization = AddCharmWithAuthorization.from_json(addcharmwithauthorization) if addcharmwithauthorization else None
        self.entity = Entity.from_json(entity) if entity else None
        self.resources = [CharmResource.from_json(o) for o in resources or []]



class AddPendingResourcesResult(Type):
    _toSchema = {'errorresult': 'ErrorResult', 'pending_ids': 'pending-ids'}
    _toPy = {'ErrorResult': 'errorresult', 'pending-ids': 'pending_ids'}
    def __init__(self, errorresult=None, pending_ids=None, **unknown_fields):
        '''
        errorresult : ErrorResult
        pending_ids : typing.Sequence<+T_co>[str]
        '''
        self.errorresult = ErrorResult.from_json(errorresult) if errorresult else None
        self.pending_ids = pending_ids



class AddRelation(Type):
    _toSchema = {'endpoints': 'endpoints'}
    _toPy = {'endpoints': 'endpoints'}
    def __init__(self, endpoints=None, **unknown_fields):
        '''
        endpoints : typing.Sequence<+T_co>[str]
        '''
        self.endpoints = endpoints



class AddRelationResults(Type):
    _toSchema = {'endpoints': 'endpoints'}
    _toPy = {'endpoints': 'endpoints'}
    def __init__(self, endpoints=None, **unknown_fields):
        '''
        endpoints : typing.Mapping<~KT, +VT_co>[str, ~CharmRelation]<~CharmRelation>
        '''
        self.endpoints = endpoints



class AddSubnetParams(Type):
    _toSchema = {'space_tag': 'space-tag', 'subnet_provider_id': 'subnet-provider-id', 'subnet_tag': 'subnet-tag', 'zones': 'zones'}
    _toPy = {'space-tag': 'space_tag', 'subnet-provider-id': 'subnet_provider_id', 'subnet-tag': 'subnet_tag', 'zones': 'zones'}
    def __init__(self, space_tag=None, subnet_provider_id=None, subnet_tag=None, zones=None, **unknown_fields):
        '''
        space_tag : str
        subnet_provider_id : str
        subnet_tag : str
        zones : typing.Sequence<+T_co>[str]
        '''
        self.space_tag = space_tag
        self.subnet_provider_id = subnet_provider_id
        self.subnet_tag = subnet_tag
        self.zones = zones



class AddSubnetsParams(Type):
    _toSchema = {'subnets': 'subnets'}
    _toPy = {'subnets': 'subnets'}
    def __init__(self, subnets=None, **unknown_fields):
        '''
        subnets : typing.Sequence<+T_co>[~AddSubnetParams]<~AddSubnetParams>
        '''
        self.subnets = [AddSubnetParams.from_json(o) for o in subnets or []]



class AddUser(Type):
    _toSchema = {'display_name': 'display-name', 'password': 'password', 'username': 'username'}
    _toPy = {'display-name': 'display_name', 'password': 'password', 'username': 'username'}
    def __init__(self, display_name=None, password=None, username=None, **unknown_fields):
        '''
        display_name : str
        password : str
        username : str
        '''
        self.display_name = display_name
        self.password = password
        self.username = username



class AddUserResult(Type):
    _toSchema = {'error': 'error', 'secret_key': 'secret-key', 'tag': 'tag'}
    _toPy = {'error': 'error', 'secret-key': 'secret_key', 'tag': 'tag'}
    def __init__(self, error=None, secret_key=None, tag=None, **unknown_fields):
        '''
        error : Error
        secret_key : typing.Sequence<+T_co>[int]
        tag : str
        '''
        self.error = Error.from_json(error) if error else None
        self.secret_key = secret_key
        self.tag = tag



class AddUserResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~AddUserResult]<~AddUserResult>
        '''
        self.results = [AddUserResult.from_json(o) for o in results or []]



class AddUsers(Type):
    _toSchema = {'users': 'users'}
    _toPy = {'users': 'users'}
    def __init__(self, users=None, **unknown_fields):
        '''
        users : typing.Sequence<+T_co>[~AddUser]<~AddUser>
        '''
        self.users = [AddUser.from_json(o) for o in users or []]



class Address(Type):
    _toSchema = {'scope': 'scope', 'space_name': 'space-name', 'type_': 'type', 'value': 'value'}
    _toPy = {'scope': 'scope', 'space-name': 'space_name', 'type': 'type_', 'value': 'value'}
    def __init__(self, scope=None, space_name=None, type_=None, value=None, **unknown_fields):
        '''
        scope : str
        space_name : str
        type_ : str
        value : str
        '''
        self.scope = scope
        self.space_name = space_name
        self.type_ = type_
        self.value = value



class AdoptResourcesArgs(Type):
    _toSchema = {'model_tag': 'model-tag', 'source_controller_version': 'source-controller-version'}
    _toPy = {'model-tag': 'model_tag', 'source-controller-version': 'source_controller_version'}
    def __init__(self, model_tag=None, source_controller_version=None, **unknown_fields):
        '''
        model_tag : str
        source_controller_version : Number
        '''
        self.model_tag = model_tag
        self.source_controller_version = Number.from_json(source_controller_version) if source_controller_version else None



class AgentGetEntitiesResult(Type):
    _toSchema = {'container_type': 'container-type', 'error': 'error', 'jobs': 'jobs', 'life': 'life'}
    _toPy = {'container-type': 'container_type', 'error': 'error', 'jobs': 'jobs', 'life': 'life'}
    def __init__(self, container_type=None, error=None, jobs=None, life=None, **unknown_fields):
        '''
        container_type : str
        error : Error
        jobs : typing.Sequence<+T_co>[str]
        life : str
        '''
        self.container_type = container_type
        self.error = Error.from_json(error) if error else None
        self.jobs = jobs
        self.life = life



class AgentGetEntitiesResults(Type):
    _toSchema = {'entities': 'entities'}
    _toPy = {'entities': 'entities'}
    def __init__(self, entities=None, **unknown_fields):
        '''
        entities : typing.Sequence<+T_co>[~AgentGetEntitiesResult]<~AgentGetEntitiesResult>
        '''
        self.entities = [AgentGetEntitiesResult.from_json(o) for o in entities or []]



class AgentVersionResult(Type):
    _toSchema = {'version': 'version'}
    _toPy = {'version': 'version'}
    def __init__(self, version=None, **unknown_fields):
        '''
        version : Number
        '''
        self.version = Number.from_json(version) if version else None



class AllWatcherId(Type):
    _toSchema = {'watcher_id': 'watcher-id'}
    _toPy = {'watcher-id': 'watcher_id'}
    def __init__(self, watcher_id=None, **unknown_fields):
        '''
        watcher_id : str
        '''
        self.watcher_id = watcher_id



class AllWatcherNextResults(Type):
    _toSchema = {'deltas': 'deltas'}
    _toPy = {'deltas': 'deltas'}
    def __init__(self, deltas=None, **unknown_fields):
        '''
        deltas : typing.Sequence<+T_co>[~Delta]<~Delta>
        '''
        self.deltas = [Delta.from_json(o) for o in deltas or []]



class AnnotationsGetResult(Type):
    _toSchema = {'annotations': 'annotations', 'entity': 'entity', 'error': 'error'}
    _toPy = {'annotations': 'annotations', 'entity': 'entity', 'error': 'error'}
    def __init__(self, annotations=None, entity=None, error=None, **unknown_fields):
        '''
        annotations : typing.Mapping<~KT, +VT_co>[str, str]
        entity : str
        error : ErrorResult
        '''
        self.annotations = annotations
        self.entity = entity
        self.error = ErrorResult.from_json(error) if error else None



class AnnotationsGetResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~AnnotationsGetResult]<~AnnotationsGetResult>
        '''
        self.results = [AnnotationsGetResult.from_json(o) for o in results or []]



class AnnotationsSet(Type):
    _toSchema = {'annotations': 'annotations'}
    _toPy = {'annotations': 'annotations'}
    def __init__(self, annotations=None, **unknown_fields):
        '''
        annotations : typing.Sequence<+T_co>[~EntityAnnotations]<~EntityAnnotations>
        '''
        self.annotations = [EntityAnnotations.from_json(o) for o in annotations or []]



class ApplicationCharmActionsResult(Type):
    _toSchema = {'actions': 'actions', 'application_tag': 'application-tag', 'error': 'error'}
    _toPy = {'actions': 'actions', 'application-tag': 'application_tag', 'error': 'error'}
    def __init__(self, actions=None, application_tag=None, error=None, **unknown_fields):
        '''
        actions : typing.Mapping<~KT, +VT_co>[str, ~ActionSpec]<~ActionSpec>
        application_tag : str
        error : Error
        '''
        self.actions = actions
        self.application_tag = application_tag
        self.error = Error.from_json(error) if error else None



class ApplicationCharmRelations(Type):
    _toSchema = {'application': 'application'}
    _toPy = {'application': 'application'}
    def __init__(self, application=None, **unknown_fields):
        '''
        application : str
        '''
        self.application = application



class ApplicationCharmRelationsResults(Type):
    _toSchema = {'charm_relations': 'charm-relations'}
    _toPy = {'charm-relations': 'charm_relations'}
    def __init__(self, charm_relations=None, **unknown_fields):
        '''
        charm_relations : typing.Sequence<+T_co>[str]
        '''
        self.charm_relations = charm_relations



class ApplicationDeploy(Type):
    _toSchema = {'application': 'application', 'channel': 'channel', 'charm_url': 'charm-url', 'config': 'config', 'config_yaml': 'config-yaml', 'constraints': 'constraints', 'endpoint_bindings': 'endpoint-bindings', 'num_units': 'num-units', 'placement': 'placement', 'resources': 'resources', 'series': 'series', 'storage': 'storage'}
    _toPy = {'application': 'application', 'channel': 'channel', 'charm-url': 'charm_url', 'config': 'config', 'config-yaml': 'config_yaml', 'constraints': 'constraints', 'endpoint-bindings': 'endpoint_bindings', 'num-units': 'num_units', 'placement': 'placement', 'resources': 'resources', 'series': 'series', 'storage': 'storage'}
    def __init__(self, application=None, channel=None, charm_url=None, config=None, config_yaml=None, constraints=None, endpoint_bindings=None, num_units=None, placement=None, resources=None, series=None, storage=None, **unknown_fields):
        '''
        application : str
        channel : str
        charm_url : str
        config : typing.Mapping<~KT, +VT_co>[str, str]
        config_yaml : str
        constraints : Value
        endpoint_bindings : typing.Mapping<~KT, +VT_co>[str, str]
        num_units : int
        placement : typing.Sequence<+T_co>[~Placement]<~Placement>
        resources : typing.Mapping<~KT, +VT_co>[str, str]
        series : str
        storage : typing.Mapping<~KT, +VT_co>[str, ~Constraints]<~Constraints>
        '''
        self.application = application
        self.channel = channel
        self.charm_url = charm_url
        self.config = config
        self.config_yaml = config_yaml
        self.constraints = Value.from_json(constraints) if constraints else None
        self.endpoint_bindings = endpoint_bindings
        self.num_units = num_units
        self.placement = [Placement.from_json(o) for o in placement or []]
        self.resources = resources
        self.series = series
        self.storage = storage



class ApplicationDestroy(Type):
    _toSchema = {'application': 'application'}
    _toPy = {'application': 'application'}
    def __init__(self, application=None, **unknown_fields):
        '''
        application : str
        '''
        self.application = application



class ApplicationExpose(Type):
    _toSchema = {'application': 'application'}
    _toPy = {'application': 'application'}
    def __init__(self, application=None, **unknown_fields):
        '''
        application : str
        '''
        self.application = application



class ApplicationGet(Type):
    _toSchema = {'application': 'application'}
    _toPy = {'application': 'application'}
    def __init__(self, application=None, **unknown_fields):
        '''
        application : str
        '''
        self.application = application



class ApplicationGetResults(Type):
    _toSchema = {'application': 'application', 'charm': 'charm', 'config': 'config', 'constraints': 'constraints', 'series': 'series'}
    _toPy = {'application': 'application', 'charm': 'charm', 'config': 'config', 'constraints': 'constraints', 'series': 'series'}
    def __init__(self, application=None, charm=None, config=None, constraints=None, series=None, **unknown_fields):
        '''
        application : str
        charm : str
        config : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        constraints : Value
        series : str
        '''
        self.application = application
        self.charm = charm
        self.config = config
        self.constraints = Value.from_json(constraints) if constraints else None
        self.series = series



class ApplicationMetricCredential(Type):
    _toSchema = {'application': 'application', 'metrics_credentials': 'metrics-credentials'}
    _toPy = {'application': 'application', 'metrics-credentials': 'metrics_credentials'}
    def __init__(self, application=None, metrics_credentials=None, **unknown_fields):
        '''
        application : str
        metrics_credentials : typing.Sequence<+T_co>[int]
        '''
        self.application = application
        self.metrics_credentials = metrics_credentials



class ApplicationMetricCredentials(Type):
    _toSchema = {'creds': 'creds'}
    _toPy = {'creds': 'creds'}
    def __init__(self, creds=None, **unknown_fields):
        '''
        creds : typing.Sequence<+T_co>[~ApplicationMetricCredential]<~ApplicationMetricCredential>
        '''
        self.creds = [ApplicationMetricCredential.from_json(o) for o in creds or []]



class ApplicationOffer(Type):
    _toSchema = {'access': 'access', 'application_description': 'application-description', 'bindings': 'bindings', 'endpoints': 'endpoints', 'offer_name': 'offer-name', 'offer_url': 'offer-url', 'source_model_tag': 'source-model-tag', 'spaces': 'spaces'}
    _toPy = {'access': 'access', 'application-description': 'application_description', 'bindings': 'bindings', 'endpoints': 'endpoints', 'offer-name': 'offer_name', 'offer-url': 'offer_url', 'source-model-tag': 'source_model_tag', 'spaces': 'spaces'}
    def __init__(self, access=None, application_description=None, bindings=None, endpoints=None, offer_name=None, offer_url=None, source_model_tag=None, spaces=None, **unknown_fields):
        '''
        access : str
        application_description : str
        bindings : typing.Mapping<~KT, +VT_co>[str, str]
        endpoints : typing.Sequence<+T_co>[~RemoteEndpoint]<~RemoteEndpoint>
        offer_name : str
        offer_url : str
        source_model_tag : str
        spaces : typing.Sequence<+T_co>[~RemoteSpace]<~RemoteSpace>
        '''
        self.access = access
        self.application_description = application_description
        self.bindings = bindings
        self.endpoints = [RemoteEndpoint.from_json(o) for o in endpoints or []]
        self.offer_name = offer_name
        self.offer_url = offer_url
        self.source_model_tag = source_model_tag
        self.spaces = [RemoteSpace.from_json(o) for o in spaces or []]



class ApplicationRelationsChange(Type):
    _toSchema = {'changed': 'changed', 'removed': 'removed'}
    _toPy = {'changed': 'changed', 'removed': 'removed'}
    def __init__(self, changed=None, removed=None, **unknown_fields):
        '''
        changed : typing.Sequence<+T_co>[~RelationChange]<~RelationChange>
        removed : typing.Sequence<+T_co>[int]
        '''
        self.changed = [RelationChange.from_json(o) for o in changed or []]
        self.removed = removed



class ApplicationRelationsWatchResult(Type):
    _toSchema = {'applicationrelationswatcherid': 'ApplicationRelationsWatcherId', 'changes': 'changes', 'error': 'error'}
    _toPy = {'ApplicationRelationsWatcherId': 'applicationrelationswatcherid', 'changes': 'changes', 'error': 'error'}
    def __init__(self, applicationrelationswatcherid=None, changes=None, error=None, **unknown_fields):
        '''
        applicationrelationswatcherid : str
        changes : ApplicationRelationsChange
        error : Error
        '''
        self.applicationrelationswatcherid = applicationrelationswatcherid
        self.changes = ApplicationRelationsChange.from_json(changes) if changes else None
        self.error = Error.from_json(error) if error else None



class ApplicationSet(Type):
    _toSchema = {'application': 'application', 'options': 'options'}
    _toPy = {'application': 'application', 'options': 'options'}
    def __init__(self, application=None, options=None, **unknown_fields):
        '''
        application : str
        options : typing.Mapping<~KT, +VT_co>[str, str]
        '''
        self.application = application
        self.options = options



class ApplicationSetCharm(Type):
    _toSchema = {'application': 'application', 'channel': 'channel', 'charm_url': 'charm-url', 'config_settings': 'config-settings', 'config_settings_yaml': 'config-settings-yaml', 'force_series': 'force-series', 'force_units': 'force-units', 'resource_ids': 'resource-ids', 'storage_constraints': 'storage-constraints'}
    _toPy = {'application': 'application', 'channel': 'channel', 'charm-url': 'charm_url', 'config-settings': 'config_settings', 'config-settings-yaml': 'config_settings_yaml', 'force-series': 'force_series', 'force-units': 'force_units', 'resource-ids': 'resource_ids', 'storage-constraints': 'storage_constraints'}
    def __init__(self, application=None, channel=None, charm_url=None, config_settings=None, config_settings_yaml=None, force_series=None, force_units=None, resource_ids=None, storage_constraints=None, **unknown_fields):
        '''
        application : str
        channel : str
        charm_url : str
        config_settings : typing.Mapping<~KT, +VT_co>[str, str]
        config_settings_yaml : str
        force_series : bool
        force_units : bool
        resource_ids : typing.Mapping<~KT, +VT_co>[str, str]
        storage_constraints : typing.Mapping<~KT, +VT_co>[str, ~StorageConstraints]<~StorageConstraints>
        '''
        self.application = application
        self.channel = channel
        self.charm_url = charm_url
        self.config_settings = config_settings
        self.config_settings_yaml = config_settings_yaml
        self.force_series = force_series
        self.force_units = force_units
        self.resource_ids = resource_ids
        self.storage_constraints = storage_constraints



class ApplicationStatus(Type):
    _toSchema = {'can_upgrade_to': 'can-upgrade-to', 'charm': 'charm', 'err': 'err', 'exposed': 'exposed', 'life': 'life', 'meter_statuses': 'meter-statuses', 'relations': 'relations', 'series': 'series', 'status': 'status', 'subordinate_to': 'subordinate-to', 'units': 'units', 'workload_version': 'workload-version'}
    _toPy = {'can-upgrade-to': 'can_upgrade_to', 'charm': 'charm', 'err': 'err', 'exposed': 'exposed', 'life': 'life', 'meter-statuses': 'meter_statuses', 'relations': 'relations', 'series': 'series', 'status': 'status', 'subordinate-to': 'subordinate_to', 'units': 'units', 'workload-version': 'workload_version'}
    def __init__(self, can_upgrade_to=None, charm=None, err=None, exposed=None, life=None, meter_statuses=None, relations=None, series=None, status=None, subordinate_to=None, units=None, workload_version=None, **unknown_fields):
        '''
        can_upgrade_to : str
        charm : str
        err : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        exposed : bool
        life : str
        meter_statuses : typing.Mapping<~KT, +VT_co>[str, ~MeterStatus]<~MeterStatus>
        relations : typing.Sequence<+T_co>[str]
        series : str
        status : DetailedStatus
        subordinate_to : typing.Sequence<+T_co>[str]
        units : typing.Mapping<~KT, +VT_co>[str, ~UnitStatus]<~UnitStatus>
        workload_version : str
        '''
        self.can_upgrade_to = can_upgrade_to
        self.charm = charm
        self.err = err
        self.exposed = exposed
        self.life = life
        self.meter_statuses = meter_statuses
        self.relations = relations
        self.series = series
        self.status = DetailedStatus.from_json(status) if status else None
        self.subordinate_to = subordinate_to
        self.units = units
        self.workload_version = workload_version



class ApplicationStatusResult(Type):
    _toSchema = {'application': 'application', 'error': 'error', 'units': 'units'}
    _toPy = {'application': 'application', 'error': 'error', 'units': 'units'}
    def __init__(self, application=None, error=None, units=None, **unknown_fields):
        '''
        application : StatusResult
        error : Error
        units : typing.Mapping<~KT, +VT_co>[str, ~StatusResult]<~StatusResult>
        '''
        self.application = StatusResult.from_json(application) if application else None
        self.error = Error.from_json(error) if error else None
        self.units = units



class ApplicationStatusResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~ApplicationStatusResult]<~ApplicationStatusResult>
        '''
        self.results = [ApplicationStatusResult.from_json(o) for o in results or []]



class ApplicationTag(Type):
    _toSchema = {'name': 'Name'}
    _toPy = {'Name': 'name'}
    def __init__(self, name=None, **unknown_fields):
        '''
        name : str
        '''
        self.name = name



class ApplicationURLs(Type):
    _toSchema = {'application_urls': 'application-urls'}
    _toPy = {'application-urls': 'application_urls'}
    def __init__(self, application_urls=None, **unknown_fields):
        '''
        application_urls : typing.Sequence<+T_co>[str]
        '''
        self.application_urls = application_urls



class ApplicationUnexpose(Type):
    _toSchema = {'application': 'application'}
    _toPy = {'application': 'application'}
    def __init__(self, application=None, **unknown_fields):
        '''
        application : str
        '''
        self.application = application



class ApplicationUnset(Type):
    _toSchema = {'application': 'application', 'options': 'options'}
    _toPy = {'application': 'application', 'options': 'options'}
    def __init__(self, application=None, options=None, **unknown_fields):
        '''
        application : str
        options : typing.Sequence<+T_co>[str]
        '''
        self.application = application
        self.options = options



class ApplicationUpdate(Type):
    _toSchema = {'application': 'application', 'charm_url': 'charm-url', 'constraints': 'constraints', 'force_charm_url': 'force-charm-url', 'force_series': 'force-series', 'min_units': 'min-units', 'settings': 'settings', 'settings_yaml': 'settings-yaml'}
    _toPy = {'application': 'application', 'charm-url': 'charm_url', 'constraints': 'constraints', 'force-charm-url': 'force_charm_url', 'force-series': 'force_series', 'min-units': 'min_units', 'settings': 'settings', 'settings-yaml': 'settings_yaml'}
    def __init__(self, application=None, charm_url=None, constraints=None, force_charm_url=None, force_series=None, min_units=None, settings=None, settings_yaml=None, **unknown_fields):
        '''
        application : str
        charm_url : str
        constraints : Value
        force_charm_url : bool
        force_series : bool
        min_units : int
        settings : typing.Mapping<~KT, +VT_co>[str, str]
        settings_yaml : str
        '''
        self.application = application
        self.charm_url = charm_url
        self.constraints = Value.from_json(constraints) if constraints else None
        self.force_charm_url = force_charm_url
        self.force_series = force_series
        self.min_units = min_units
        self.settings = settings
        self.settings_yaml = settings_yaml



class ApplicationsCharmActionsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~ApplicationCharmActionsResult]<~ApplicationCharmActionsResult>
        '''
        self.results = [ApplicationCharmActionsResult.from_json(o) for o in results or []]



class ApplicationsDeploy(Type):
    _toSchema = {'applications': 'applications'}
    _toPy = {'applications': 'applications'}
    def __init__(self, applications=None, **unknown_fields):
        '''
        applications : typing.Sequence<+T_co>[~ApplicationDeploy]<~ApplicationDeploy>
        '''
        self.applications = [ApplicationDeploy.from_json(o) for o in applications or []]



class BackupsCreateArgs(Type):
    _toSchema = {'notes': 'notes'}
    _toPy = {'notes': 'notes'}
    def __init__(self, notes=None, **unknown_fields):
        '''
        notes : str
        '''
        self.notes = notes



class BackupsInfoArgs(Type):
    _toSchema = {'id_': 'id'}
    _toPy = {'id': 'id_'}
    def __init__(self, id_=None, **unknown_fields):
        '''
        id_ : str
        '''
        self.id_ = id_



class BackupsListArgs(Type):
    _toSchema = {}
    _toPy = {}
    def __init__(self, **unknown_fields):
        '''

        '''
        pass



class BackupsListResult(Type):
    _toSchema = {'list_': 'list'}
    _toPy = {'list': 'list_'}
    def __init__(self, list_=None, **unknown_fields):
        '''
        list_ : typing.Sequence<+T_co>[~BackupsMetadataResult]<~BackupsMetadataResult>
        '''
        self.list_ = [BackupsMetadataResult.from_json(o) for o in list_ or []]



class BackupsMetadataResult(Type):
    _toSchema = {'ca_cert': 'ca-cert', 'ca_private_key': 'ca-private-key', 'checksum': 'checksum', 'checksum_format': 'checksum-format', 'finished': 'finished', 'hostname': 'hostname', 'id_': 'id', 'machine': 'machine', 'model': 'model', 'notes': 'notes', 'series': 'series', 'size': 'size', 'started': 'started', 'stored': 'stored', 'version': 'version'}
    _toPy = {'ca-cert': 'ca_cert', 'ca-private-key': 'ca_private_key', 'checksum': 'checksum', 'checksum-format': 'checksum_format', 'finished': 'finished', 'hostname': 'hostname', 'id': 'id_', 'machine': 'machine', 'model': 'model', 'notes': 'notes', 'series': 'series', 'size': 'size', 'started': 'started', 'stored': 'stored', 'version': 'version'}
    def __init__(self, ca_cert=None, ca_private_key=None, checksum=None, checksum_format=None, finished=None, hostname=None, id_=None, machine=None, model=None, notes=None, series=None, size=None, started=None, stored=None, version=None, **unknown_fields):
        '''
        ca_cert : str
        ca_private_key : str
        checksum : str
        checksum_format : str
        finished : str
        hostname : str
        id_ : str
        machine : str
        model : str
        notes : str
        series : str
        size : int
        started : str
        stored : str
        version : Number
        '''
        self.ca_cert = ca_cert
        self.ca_private_key = ca_private_key
        self.checksum = checksum
        self.checksum_format = checksum_format
        self.finished = finished
        self.hostname = hostname
        self.id_ = id_
        self.machine = machine
        self.model = model
        self.notes = notes
        self.series = series
        self.size = size
        self.started = started
        self.stored = stored
        self.version = Number.from_json(version) if version else None



class BackupsRemoveArgs(Type):
    _toSchema = {'id_': 'id'}
    _toPy = {'id': 'id_'}
    def __init__(self, id_=None, **unknown_fields):
        '''
        id_ : str
        '''
        self.id_ = id_



class Binary(Type):
    _toSchema = {'arch': 'Arch', 'number': 'Number', 'series': 'Series'}
    _toPy = {'Arch': 'arch', 'Number': 'number', 'Series': 'series'}
    def __init__(self, arch=None, number=None, series=None, **unknown_fields):
        '''
        arch : str
        number : Number
        series : str
        '''
        self.arch = arch
        self.number = Number.from_json(number) if number else None
        self.series = series



class Block(Type):
    _toSchema = {'id_': 'id', 'message': 'message', 'tag': 'tag', 'type_': 'type'}
    _toPy = {'id': 'id_', 'message': 'message', 'tag': 'tag', 'type': 'type_'}
    def __init__(self, id_=None, message=None, tag=None, type_=None, **unknown_fields):
        '''
        id_ : str
        message : str
        tag : str
        type_ : str
        '''
        self.id_ = id_
        self.message = message
        self.tag = tag
        self.type_ = type_



class BlockDevice(Type):
    _toSchema = {'busaddress': 'BusAddress', 'devicelinks': 'DeviceLinks', 'devicename': 'DeviceName', 'filesystemtype': 'FilesystemType', 'hardwareid': 'HardwareId', 'inuse': 'InUse', 'label': 'Label', 'mountpoint': 'MountPoint', 'size': 'Size', 'uuid': 'UUID'}
    _toPy = {'BusAddress': 'busaddress', 'DeviceLinks': 'devicelinks', 'DeviceName': 'devicename', 'FilesystemType': 'filesystemtype', 'HardwareId': 'hardwareid', 'InUse': 'inuse', 'Label': 'label', 'MountPoint': 'mountpoint', 'Size': 'size', 'UUID': 'uuid'}
    def __init__(self, busaddress=None, devicelinks=None, devicename=None, filesystemtype=None, hardwareid=None, inuse=None, label=None, mountpoint=None, size=None, uuid=None, **unknown_fields):
        '''
        busaddress : str
        devicelinks : typing.Sequence<+T_co>[str]
        devicename : str
        filesystemtype : str
        hardwareid : str
        inuse : bool
        label : str
        mountpoint : str
        size : int
        uuid : str
        '''
        self.busaddress = busaddress
        self.devicelinks = devicelinks
        self.devicename = devicename
        self.filesystemtype = filesystemtype
        self.hardwareid = hardwareid
        self.inuse = inuse
        self.label = label
        self.mountpoint = mountpoint
        self.size = size
        self.uuid = uuid



class BlockDeviceResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : BlockDevice
        '''
        self.error = Error.from_json(error) if error else None
        self.result = BlockDevice.from_json(result) if result else None



class BlockDeviceResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~BlockDeviceResult]<~BlockDeviceResult>
        '''
        self.results = [BlockDeviceResult.from_json(o) for o in results or []]



class BlockResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : Block
        '''
        self.error = Error.from_json(error) if error else None
        self.result = Block.from_json(result) if result else None



class BlockResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~BlockResult]<~BlockResult>
        '''
        self.results = [BlockResult.from_json(o) for o in results or []]



class BlockSwitchParams(Type):
    _toSchema = {'message': 'message', 'type_': 'type'}
    _toPy = {'message': 'message', 'type': 'type_'}
    def __init__(self, message=None, type_=None, **unknown_fields):
        '''
        message : str
        type_ : str
        '''
        self.message = message
        self.type_ = type_



class BoolResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : bool
        '''
        self.error = Error.from_json(error) if error else None
        self.result = result



class BoolResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~BoolResult]<~BoolResult>
        '''
        self.results = [BoolResult.from_json(o) for o in results or []]



class BundleChange(Type):
    _toSchema = {'args': 'args', 'id_': 'id', 'method': 'method', 'requires': 'requires'}
    _toPy = {'args': 'args', 'id': 'id_', 'method': 'method', 'requires': 'requires'}
    def __init__(self, args=None, id_=None, method=None, requires=None, **unknown_fields):
        '''
        args : typing.Sequence<+T_co>[typing.Any]
        id_ : str
        method : str
        requires : typing.Sequence<+T_co>[str]
        '''
        self.args = args
        self.id_ = id_
        self.method = method
        self.requires = requires



class BundleChangesParams(Type):
    _toSchema = {'yaml': 'yaml'}
    _toPy = {'yaml': 'yaml'}
    def __init__(self, yaml=None, **unknown_fields):
        '''
        yaml : str
        '''
        self.yaml = yaml



class BundleChangesResults(Type):
    _toSchema = {'changes': 'changes', 'errors': 'errors'}
    _toPy = {'changes': 'changes', 'errors': 'errors'}
    def __init__(self, changes=None, errors=None, **unknown_fields):
        '''
        changes : typing.Sequence<+T_co>[~BundleChange]<~BundleChange>
        errors : typing.Sequence<+T_co>[str]
        '''
        self.changes = [BundleChange.from_json(o) for o in changes or []]
        self.errors = errors



class BytesResult(Type):
    _toSchema = {'result': 'result'}
    _toPy = {'result': 'result'}
    def __init__(self, result=None, **unknown_fields):
        '''
        result : typing.Sequence<+T_co>[int]
        '''
        self.result = result



class CharmActionSpec(Type):
    _toSchema = {'description': 'description', 'params': 'params'}
    _toPy = {'description': 'description', 'params': 'params'}
    def __init__(self, description=None, params=None, **unknown_fields):
        '''
        description : str
        params : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        self.description = description
        self.params = params



class CharmActions(Type):
    _toSchema = {'specs': 'specs'}
    _toPy = {'specs': 'specs'}
    def __init__(self, specs=None, **unknown_fields):
        '''
        specs : typing.Mapping<~KT, +VT_co>[str, ~CharmActionSpec]<~CharmActionSpec>
        '''
        self.specs = specs



class CharmInfo(Type):
    _toSchema = {'actions': 'actions', 'config': 'config', 'meta': 'meta', 'metrics': 'metrics', 'revision': 'revision', 'url': 'url'}
    _toPy = {'actions': 'actions', 'config': 'config', 'meta': 'meta', 'metrics': 'metrics', 'revision': 'revision', 'url': 'url'}
    def __init__(self, actions=None, config=None, meta=None, metrics=None, revision=None, url=None, **unknown_fields):
        '''
        actions : CharmActions
        config : typing.Mapping<~KT, +VT_co>[str, ~CharmOption]<~CharmOption>
        meta : CharmMeta
        metrics : CharmMetrics
        revision : int
        url : str
        '''
        self.actions = CharmActions.from_json(actions) if actions else None
        self.config = config
        self.meta = CharmMeta.from_json(meta) if meta else None
        self.metrics = CharmMetrics.from_json(metrics) if metrics else None
        self.revision = revision
        self.url = url



class CharmMeta(Type):
    _toSchema = {'categories': 'categories', 'description': 'description', 'extra_bindings': 'extra-bindings', 'min_juju_version': 'min-juju-version', 'name': 'name', 'payload_classes': 'payload-classes', 'peers': 'peers', 'provides': 'provides', 'requires': 'requires', 'resources': 'resources', 'series': 'series', 'storage': 'storage', 'subordinate': 'subordinate', 'summary': 'summary', 'tags': 'tags', 'terms': 'terms'}
    _toPy = {'categories': 'categories', 'description': 'description', 'extra-bindings': 'extra_bindings', 'min-juju-version': 'min_juju_version', 'name': 'name', 'payload-classes': 'payload_classes', 'peers': 'peers', 'provides': 'provides', 'requires': 'requires', 'resources': 'resources', 'series': 'series', 'storage': 'storage', 'subordinate': 'subordinate', 'summary': 'summary', 'tags': 'tags', 'terms': 'terms'}
    def __init__(self, categories=None, description=None, extra_bindings=None, min_juju_version=None, name=None, payload_classes=None, peers=None, provides=None, requires=None, resources=None, series=None, storage=None, subordinate=None, summary=None, tags=None, terms=None, **unknown_fields):
        '''
        categories : typing.Sequence<+T_co>[str]
        description : str
        extra_bindings : typing.Mapping<~KT, +VT_co>[str, str]
        min_juju_version : str
        name : str
        payload_classes : typing.Mapping<~KT, +VT_co>[str, ~CharmPayloadClass]<~CharmPayloadClass>
        peers : typing.Mapping<~KT, +VT_co>[str, ~CharmRelation]<~CharmRelation>
        provides : typing.Mapping<~KT, +VT_co>[str, ~CharmRelation]<~CharmRelation>
        requires : typing.Mapping<~KT, +VT_co>[str, ~CharmRelation]<~CharmRelation>
        resources : typing.Mapping<~KT, +VT_co>[str, ~CharmResourceMeta]<~CharmResourceMeta>
        series : typing.Sequence<+T_co>[str]
        storage : typing.Mapping<~KT, +VT_co>[str, ~CharmStorage]<~CharmStorage>
        subordinate : bool
        summary : str
        tags : typing.Sequence<+T_co>[str]
        terms : typing.Sequence<+T_co>[str]
        '''
        self.categories = categories
        self.description = description
        self.extra_bindings = extra_bindings
        self.min_juju_version = min_juju_version
        self.name = name
        self.payload_classes = payload_classes
        self.peers = peers
        self.provides = provides
        self.requires = requires
        self.resources = resources
        self.series = series
        self.storage = storage
        self.subordinate = subordinate
        self.summary = summary
        self.tags = tags
        self.terms = terms



class CharmMetric(Type):
    _toSchema = {'description': 'description', 'type_': 'type'}
    _toPy = {'description': 'description', 'type': 'type_'}
    def __init__(self, description=None, type_=None, **unknown_fields):
        '''
        description : str
        type_ : str
        '''
        self.description = description
        self.type_ = type_



class CharmMetrics(Type):
    _toSchema = {'metrics': 'metrics', 'plan': 'plan'}
    _toPy = {'metrics': 'metrics', 'plan': 'plan'}
    def __init__(self, metrics=None, plan=None, **unknown_fields):
        '''
        metrics : typing.Mapping<~KT, +VT_co>[str, ~CharmMetric]<~CharmMetric>
        plan : CharmPlan
        '''
        self.metrics = metrics
        self.plan = CharmPlan.from_json(plan) if plan else None



class CharmOption(Type):
    _toSchema = {'default': 'default', 'description': 'description', 'type_': 'type'}
    _toPy = {'default': 'default', 'description': 'description', 'type': 'type_'}
    def __init__(self, default=None, description=None, type_=None, **unknown_fields):
        '''
        default : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        description : str
        type_ : str
        '''
        self.default = default
        self.description = description
        self.type_ = type_



class CharmPayloadClass(Type):
    _toSchema = {'name': 'name', 'type_': 'type'}
    _toPy = {'name': 'name', 'type': 'type_'}
    def __init__(self, name=None, type_=None, **unknown_fields):
        '''
        name : str
        type_ : str
        '''
        self.name = name
        self.type_ = type_



class CharmPlan(Type):
    _toSchema = {'required': 'required'}
    _toPy = {'required': 'required'}
    def __init__(self, required=None, **unknown_fields):
        '''
        required : bool
        '''
        self.required = required



class CharmRelation(Type):
    _toSchema = {'interface': 'interface', 'limit': 'limit', 'name': 'name', 'optional': 'optional', 'role': 'role', 'scope': 'scope'}
    _toPy = {'interface': 'interface', 'limit': 'limit', 'name': 'name', 'optional': 'optional', 'role': 'role', 'scope': 'scope'}
    def __init__(self, interface=None, limit=None, name=None, optional=None, role=None, scope=None, **unknown_fields):
        '''
        interface : str
        limit : int
        name : str
        optional : bool
        role : str
        scope : str
        '''
        self.interface = interface
        self.limit = limit
        self.name = name
        self.optional = optional
        self.role = role
        self.scope = scope



class CharmResource(Type):
    _toSchema = {'description': 'description', 'fingerprint': 'fingerprint', 'name': 'name', 'origin': 'origin', 'path': 'path', 'revision': 'revision', 'size': 'size', 'type_': 'type'}
    _toPy = {'description': 'description', 'fingerprint': 'fingerprint', 'name': 'name', 'origin': 'origin', 'path': 'path', 'revision': 'revision', 'size': 'size', 'type': 'type_'}
    def __init__(self, description=None, fingerprint=None, name=None, origin=None, path=None, revision=None, size=None, type_=None, **unknown_fields):
        '''
        description : str
        fingerprint : typing.Sequence<+T_co>[int]
        name : str
        origin : str
        path : str
        revision : int
        size : int
        type_ : str
        '''
        self.description = description
        self.fingerprint = fingerprint
        self.name = name
        self.origin = origin
        self.path = path
        self.revision = revision
        self.size = size
        self.type_ = type_



class CharmResourceMeta(Type):
    _toSchema = {'description': 'description', 'name': 'name', 'path': 'path', 'type_': 'type'}
    _toPy = {'description': 'description', 'name': 'name', 'path': 'path', 'type': 'type_'}
    def __init__(self, description=None, name=None, path=None, type_=None, **unknown_fields):
        '''
        description : str
        name : str
        path : str
        type_ : str
        '''
        self.description = description
        self.name = name
        self.path = path
        self.type_ = type_



class CharmStorage(Type):
    _toSchema = {'count_max': 'count-max', 'count_min': 'count-min', 'description': 'description', 'location': 'location', 'minimum_size': 'minimum-size', 'name': 'name', 'properties': 'properties', 'read_only': 'read-only', 'shared': 'shared', 'type_': 'type'}
    _toPy = {'count-max': 'count_max', 'count-min': 'count_min', 'description': 'description', 'location': 'location', 'minimum-size': 'minimum_size', 'name': 'name', 'properties': 'properties', 'read-only': 'read_only', 'shared': 'shared', 'type': 'type_'}
    def __init__(self, count_max=None, count_min=None, description=None, location=None, minimum_size=None, name=None, properties=None, read_only=None, shared=None, type_=None, **unknown_fields):
        '''
        count_max : int
        count_min : int
        description : str
        location : str
        minimum_size : int
        name : str
        properties : typing.Sequence<+T_co>[str]
        read_only : bool
        shared : bool
        type_ : str
        '''
        self.count_max = count_max
        self.count_min = count_min
        self.description = description
        self.location = location
        self.minimum_size = minimum_size
        self.name = name
        self.properties = properties
        self.read_only = read_only
        self.shared = shared
        self.type_ = type_



class CharmURL(Type):
    _toSchema = {'url': 'url'}
    _toPy = {'url': 'url'}
    def __init__(self, url=None, **unknown_fields):
        '''
        url : str
        '''
        self.url = url



class CharmURLs(Type):
    _toSchema = {'urls': 'urls'}
    _toPy = {'urls': 'urls'}
    def __init__(self, urls=None, **unknown_fields):
        '''
        urls : typing.Sequence<+T_co>[~CharmURL]<~CharmURL>
        '''
        self.urls = [CharmURL.from_json(o) for o in urls or []]



class CharmsList(Type):
    _toSchema = {'names': 'names'}
    _toPy = {'names': 'names'}
    def __init__(self, names=None, **unknown_fields):
        '''
        names : typing.Sequence<+T_co>[str]
        '''
        self.names = names



class CharmsListResult(Type):
    _toSchema = {'charm_urls': 'charm-urls'}
    _toPy = {'charm-urls': 'charm_urls'}
    def __init__(self, charm_urls=None, **unknown_fields):
        '''
        charm_urls : typing.Sequence<+T_co>[str]
        '''
        self.charm_urls = charm_urls



class ClaimLeadershipBulkParams(Type):
    _toSchema = {'params': 'params'}
    _toPy = {'params': 'params'}
    def __init__(self, params=None, **unknown_fields):
        '''
        params : typing.Sequence<+T_co>[~ClaimLeadershipParams]<~ClaimLeadershipParams>
        '''
        self.params = [ClaimLeadershipParams.from_json(o) for o in params or []]



class ClaimLeadershipBulkResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        self.results = [ErrorResult.from_json(o) for o in results or []]



class ClaimLeadershipParams(Type):
    _toSchema = {'application_tag': 'application-tag', 'duration': 'duration', 'unit_tag': 'unit-tag'}
    _toPy = {'application-tag': 'application_tag', 'duration': 'duration', 'unit-tag': 'unit_tag'}
    def __init__(self, application_tag=None, duration=None, unit_tag=None, **unknown_fields):
        '''
        application_tag : str
        duration : float
        unit_tag : str
        '''
        self.application_tag = application_tag
        self.duration = duration
        self.unit_tag = unit_tag



class Cloud(Type):
    _toSchema = {'auth_types': 'auth-types', 'endpoint': 'endpoint', 'identity_endpoint': 'identity-endpoint', 'regions': 'regions', 'storage_endpoint': 'storage-endpoint', 'type_': 'type'}
    _toPy = {'auth-types': 'auth_types', 'endpoint': 'endpoint', 'identity-endpoint': 'identity_endpoint', 'regions': 'regions', 'storage-endpoint': 'storage_endpoint', 'type': 'type_'}
    def __init__(self, auth_types=None, endpoint=None, identity_endpoint=None, regions=None, storage_endpoint=None, type_=None, **unknown_fields):
        '''
        auth_types : typing.Sequence<+T_co>[str]
        endpoint : str
        identity_endpoint : str
        regions : typing.Sequence<+T_co>[~CloudRegion]<~CloudRegion>
        storage_endpoint : str
        type_ : str
        '''
        self.auth_types = auth_types
        self.endpoint = endpoint
        self.identity_endpoint = identity_endpoint
        self.regions = [CloudRegion.from_json(o) for o in regions or []]
        self.storage_endpoint = storage_endpoint
        self.type_ = type_



class CloudCredential(Type):
    _toSchema = {'attrs': 'attrs', 'auth_type': 'auth-type', 'redacted': 'redacted'}
    _toPy = {'attrs': 'attrs', 'auth-type': 'auth_type', 'redacted': 'redacted'}
    def __init__(self, attrs=None, auth_type=None, redacted=None, **unknown_fields):
        '''
        attrs : typing.Mapping<~KT, +VT_co>[str, str]
        auth_type : str
        redacted : typing.Sequence<+T_co>[str]
        '''
        self.attrs = attrs
        self.auth_type = auth_type
        self.redacted = redacted



class CloudCredentialResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : CloudCredential
        '''
        self.error = Error.from_json(error) if error else None
        self.result = CloudCredential.from_json(result) if result else None



class CloudCredentialResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~CloudCredentialResult]<~CloudCredentialResult>
        '''
        self.results = [CloudCredentialResult.from_json(o) for o in results or []]



class CloudImageMetadata(Type):
    _toSchema = {'arch': 'arch', 'image_id': 'image-id', 'priority': 'priority', 'region': 'region', 'root_storage_size': 'root-storage-size', 'root_storage_type': 'root-storage-type', 'series': 'series', 'source': 'source', 'stream': 'stream', 'version': 'version', 'virt_type': 'virt-type'}
    _toPy = {'arch': 'arch', 'image-id': 'image_id', 'priority': 'priority', 'region': 'region', 'root-storage-size': 'root_storage_size', 'root-storage-type': 'root_storage_type', 'series': 'series', 'source': 'source', 'stream': 'stream', 'version': 'version', 'virt-type': 'virt_type'}
    def __init__(self, arch=None, image_id=None, priority=None, region=None, root_storage_size=None, root_storage_type=None, series=None, source=None, stream=None, version=None, virt_type=None, **unknown_fields):
        '''
        arch : str
        image_id : str
        priority : int
        region : str
        root_storage_size : int
        root_storage_type : str
        series : str
        source : str
        stream : str
        version : str
        virt_type : str
        '''
        self.arch = arch
        self.image_id = image_id
        self.priority = priority
        self.region = region
        self.root_storage_size = root_storage_size
        self.root_storage_type = root_storage_type
        self.series = series
        self.source = source
        self.stream = stream
        self.version = version
        self.virt_type = virt_type



class CloudImageMetadataList(Type):
    _toSchema = {'metadata': 'metadata'}
    _toPy = {'metadata': 'metadata'}
    def __init__(self, metadata=None, **unknown_fields):
        '''
        metadata : typing.Sequence<+T_co>[~CloudImageMetadata]<~CloudImageMetadata>
        '''
        self.metadata = [CloudImageMetadata.from_json(o) for o in metadata or []]



class CloudInstanceTypesConstraint(Type):
    _toSchema = {'cloud_tag': 'cloud-tag', 'constraints': 'constraints', 'region': 'region'}
    _toPy = {'cloud-tag': 'cloud_tag', 'constraints': 'constraints', 'region': 'region'}
    def __init__(self, cloud_tag=None, constraints=None, region=None, **unknown_fields):
        '''
        cloud_tag : str
        constraints : Value
        region : str
        '''
        self.cloud_tag = cloud_tag
        self.constraints = Value.from_json(constraints) if constraints else None
        self.region = region



class CloudInstanceTypesConstraints(Type):
    _toSchema = {'constraints': 'constraints'}
    _toPy = {'constraints': 'constraints'}
    def __init__(self, constraints=None, **unknown_fields):
        '''
        constraints : typing.Sequence<+T_co>[~CloudInstanceTypesConstraint]<~CloudInstanceTypesConstraint>
        '''
        self.constraints = [CloudInstanceTypesConstraint.from_json(o) for o in constraints or []]



class CloudRegion(Type):
    _toSchema = {'endpoint': 'endpoint', 'identity_endpoint': 'identity-endpoint', 'name': 'name', 'storage_endpoint': 'storage-endpoint'}
    _toPy = {'endpoint': 'endpoint', 'identity-endpoint': 'identity_endpoint', 'name': 'name', 'storage-endpoint': 'storage_endpoint'}
    def __init__(self, endpoint=None, identity_endpoint=None, name=None, storage_endpoint=None, **unknown_fields):
        '''
        endpoint : str
        identity_endpoint : str
        name : str
        storage_endpoint : str
        '''
        self.endpoint = endpoint
        self.identity_endpoint = identity_endpoint
        self.name = name
        self.storage_endpoint = storage_endpoint



class CloudResult(Type):
    _toSchema = {'cloud': 'cloud', 'error': 'error'}
    _toPy = {'cloud': 'cloud', 'error': 'error'}
    def __init__(self, cloud=None, error=None, **unknown_fields):
        '''
        cloud : Cloud
        error : Error
        '''
        self.cloud = Cloud.from_json(cloud) if cloud else None
        self.error = Error.from_json(error) if error else None



class CloudResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~CloudResult]<~CloudResult>
        '''
        self.results = [CloudResult.from_json(o) for o in results or []]



class CloudSpec(Type):
    _toSchema = {'credential': 'credential', 'endpoint': 'endpoint', 'identity_endpoint': 'identity-endpoint', 'name': 'name', 'region': 'region', 'storage_endpoint': 'storage-endpoint', 'type_': 'type'}
    _toPy = {'credential': 'credential', 'endpoint': 'endpoint', 'identity-endpoint': 'identity_endpoint', 'name': 'name', 'region': 'region', 'storage-endpoint': 'storage_endpoint', 'type': 'type_'}
    def __init__(self, credential=None, endpoint=None, identity_endpoint=None, name=None, region=None, storage_endpoint=None, type_=None, **unknown_fields):
        '''
        credential : CloudCredential
        endpoint : str
        identity_endpoint : str
        name : str
        region : str
        storage_endpoint : str
        type_ : str
        '''
        self.credential = CloudCredential.from_json(credential) if credential else None
        self.endpoint = endpoint
        self.identity_endpoint = identity_endpoint
        self.name = name
        self.region = region
        self.storage_endpoint = storage_endpoint
        self.type_ = type_



class CloudSpecResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : CloudSpec
        '''
        self.error = Error.from_json(error) if error else None
        self.result = CloudSpec.from_json(result) if result else None



class CloudSpecResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~CloudSpecResult]<~CloudSpecResult>
        '''
        self.results = [CloudSpecResult.from_json(o) for o in results or []]



class CloudsResult(Type):
    _toSchema = {'clouds': 'clouds'}
    _toPy = {'clouds': 'clouds'}
    def __init__(self, clouds=None, **unknown_fields):
        '''
        clouds : typing.Mapping<~KT, +VT_co>[str, ~Cloud]<~Cloud>
        '''
        self.clouds = clouds



class ConfigSettingsResult(Type):
    _toSchema = {'error': 'error', 'settings': 'settings'}
    _toPy = {'error': 'error', 'settings': 'settings'}
    def __init__(self, error=None, settings=None, **unknown_fields):
        '''
        error : Error
        settings : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        self.error = Error.from_json(error) if error else None
        self.settings = settings



class ConfigSettingsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~ConfigSettingsResult]<~ConfigSettingsResult>
        '''
        self.results = [ConfigSettingsResult.from_json(o) for o in results or []]



class ConfigValue(Type):
    _toSchema = {'source': 'source', 'value': 'value'}
    _toPy = {'source': 'source', 'value': 'value'}
    def __init__(self, source=None, value=None, **unknown_fields):
        '''
        source : str
        value : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        self.source = source
        self.value = value



class Constraints(Type):
    _toSchema = {'count': 'Count', 'pool': 'Pool', 'size': 'Size'}
    _toPy = {'Count': 'count', 'Pool': 'pool', 'Size': 'size'}
    def __init__(self, count=None, pool=None, size=None, **unknown_fields):
        '''
        count : int
        pool : str
        size : int
        '''
        self.count = count
        self.pool = pool
        self.size = size



class ConstraintsResult(Type):
    _toSchema = {'constraints': 'constraints', 'error': 'error'}
    _toPy = {'constraints': 'constraints', 'error': 'error'}
    def __init__(self, constraints=None, error=None, **unknown_fields):
        '''
        constraints : Value
        error : Error
        '''
        self.constraints = Value.from_json(constraints) if constraints else None
        self.error = Error.from_json(error) if error else None



class ConstraintsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~ConstraintsResult]<~ConstraintsResult>
        '''
        self.results = [ConstraintsResult.from_json(o) for o in results or []]



class ConsumeApplicationArg(Type):
    _toSchema = {'application_alias': 'application-alias', 'application_url': 'application-url'}
    _toPy = {'application-alias': 'application_alias', 'application-url': 'application_url'}
    def __init__(self, application_alias=None, application_url=None, **unknown_fields):
        '''
        application_alias : str
        application_url : str
        '''
        self.application_alias = application_alias
        self.application_url = application_url



class ConsumeApplicationArgs(Type):
    _toSchema = {'args': 'args'}
    _toPy = {'args': 'args'}
    def __init__(self, args=None, **unknown_fields):
        '''
        args : typing.Sequence<+T_co>[~ConsumeApplicationArg]<~ConsumeApplicationArg>
        '''
        self.args = [ConsumeApplicationArg.from_json(o) for o in args or []]



class ConsumeApplicationResult(Type):
    _toSchema = {'error': 'error', 'local_name': 'local-name'}
    _toPy = {'error': 'error', 'local-name': 'local_name'}
    def __init__(self, error=None, local_name=None, **unknown_fields):
        '''
        error : Error
        local_name : str
        '''
        self.error = Error.from_json(error) if error else None
        self.local_name = local_name



class ConsumeApplicationResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~ConsumeApplicationResult]<~ConsumeApplicationResult>
        '''
        self.results = [ConsumeApplicationResult.from_json(o) for o in results or []]



class ContainerConfig(Type):
    _toSchema = {'apt_mirror': 'apt-mirror', 'apt_proxy': 'apt-proxy', 'authorized_keys': 'authorized-keys', 'provider_type': 'provider-type', 'proxy': 'proxy', 'ssl_hostname_verification': 'ssl-hostname-verification', 'updatebehavior': 'UpdateBehavior'}
    _toPy = {'UpdateBehavior': 'updatebehavior', 'apt-mirror': 'apt_mirror', 'apt-proxy': 'apt_proxy', 'authorized-keys': 'authorized_keys', 'provider-type': 'provider_type', 'proxy': 'proxy', 'ssl-hostname-verification': 'ssl_hostname_verification'}
    def __init__(self, updatebehavior=None, apt_mirror=None, apt_proxy=None, authorized_keys=None, provider_type=None, proxy=None, ssl_hostname_verification=None, **unknown_fields):
        '''
        updatebehavior : UpdateBehavior
        apt_mirror : str
        apt_proxy : Settings
        authorized_keys : str
        provider_type : str
        proxy : Settings
        ssl_hostname_verification : bool
        '''
        self.updatebehavior = UpdateBehavior.from_json(updatebehavior) if updatebehavior else None
        self.apt_mirror = apt_mirror
        self.apt_proxy = Settings.from_json(apt_proxy) if apt_proxy else None
        self.authorized_keys = authorized_keys
        self.provider_type = provider_type
        self.proxy = Settings.from_json(proxy) if proxy else None
        self.ssl_hostname_verification = ssl_hostname_verification



class ContainerManagerConfig(Type):
    _toSchema = {'config': 'config'}
    _toPy = {'config': 'config'}
    def __init__(self, config=None, **unknown_fields):
        '''
        config : typing.Mapping<~KT, +VT_co>[str, str]
        '''
        self.config = config



class ContainerManagerConfigParams(Type):
    _toSchema = {'type_': 'type'}
    _toPy = {'type': 'type_'}
    def __init__(self, type_=None, **unknown_fields):
        '''
        type_ : str
        '''
        self.type_ = type_



class ControllerConfigResult(Type):
    _toSchema = {'config': 'config'}
    _toPy = {'config': 'config'}
    def __init__(self, config=None, **unknown_fields):
        '''
        config : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        self.config = config



class ControllersChangeResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : ControllersChanges
        '''
        self.error = Error.from_json(error) if error else None
        self.result = ControllersChanges.from_json(result) if result else None



class ControllersChangeResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~ControllersChangeResult]<~ControllersChangeResult>
        '''
        self.results = [ControllersChangeResult.from_json(o) for o in results or []]



class ControllersChanges(Type):
    _toSchema = {'added': 'added', 'converted': 'converted', 'demoted': 'demoted', 'maintained': 'maintained', 'promoted': 'promoted', 'removed': 'removed'}
    _toPy = {'added': 'added', 'converted': 'converted', 'demoted': 'demoted', 'maintained': 'maintained', 'promoted': 'promoted', 'removed': 'removed'}
    def __init__(self, added=None, converted=None, demoted=None, maintained=None, promoted=None, removed=None, **unknown_fields):
        '''
        added : typing.Sequence<+T_co>[str]
        converted : typing.Sequence<+T_co>[str]
        demoted : typing.Sequence<+T_co>[str]
        maintained : typing.Sequence<+T_co>[str]
        promoted : typing.Sequence<+T_co>[str]
        removed : typing.Sequence<+T_co>[str]
        '''
        self.added = added
        self.converted = converted
        self.demoted = demoted
        self.maintained = maintained
        self.promoted = promoted
        self.removed = removed



class ControllersSpec(Type):
    _toSchema = {'constraints': 'constraints', 'num_controllers': 'num-controllers', 'placement': 'placement', 'series': 'series'}
    _toPy = {'constraints': 'constraints', 'num-controllers': 'num_controllers', 'placement': 'placement', 'series': 'series'}
    def __init__(self, constraints=None, num_controllers=None, placement=None, series=None, **unknown_fields):
        '''
        constraints : Value
        num_controllers : int
        placement : typing.Sequence<+T_co>[str]
        series : str
        '''
        self.constraints = Value.from_json(constraints) if constraints else None
        self.num_controllers = num_controllers
        self.placement = placement
        self.series = series



class ControllersSpecs(Type):
    _toSchema = {'specs': 'specs'}
    _toPy = {'specs': 'specs'}
    def __init__(self, specs=None, **unknown_fields):
        '''
        specs : typing.Sequence<+T_co>[~ControllersSpec]<~ControllersSpec>
        '''
        self.specs = [ControllersSpec.from_json(o) for o in specs or []]



class CreateSpaceParams(Type):
    _toSchema = {'provider_id': 'provider-id', 'public': 'public', 'space_tag': 'space-tag', 'subnet_tags': 'subnet-tags'}
    _toPy = {'provider-id': 'provider_id', 'public': 'public', 'space-tag': 'space_tag', 'subnet-tags': 'subnet_tags'}
    def __init__(self, provider_id=None, public=None, space_tag=None, subnet_tags=None, **unknown_fields):
        '''
        provider_id : str
        public : bool
        space_tag : str
        subnet_tags : typing.Sequence<+T_co>[str]
        '''
        self.provider_id = provider_id
        self.public = public
        self.space_tag = space_tag
        self.subnet_tags = subnet_tags



class CreateSpacesParams(Type):
    _toSchema = {'spaces': 'spaces'}
    _toPy = {'spaces': 'spaces'}
    def __init__(self, spaces=None, **unknown_fields):
        '''
        spaces : typing.Sequence<+T_co>[~CreateSpaceParams]<~CreateSpaceParams>
        '''
        self.spaces = [CreateSpaceParams.from_json(o) for o in spaces or []]



class Delta(Type):
    _toSchema = {'entity': 'entity', 'removed': 'removed'}
    _toPy = {'entity': 'entity', 'removed': 'removed'}
    def __init__(self, entity=None, removed=None, **unknown_fields):
        '''
        entity : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        removed : bool
        '''
        self.entity = entity
        self.removed = removed



class DeployerConnectionValues(Type):
    _toSchema = {'api_addresses': 'api-addresses', 'state_addresses': 'state-addresses'}
    _toPy = {'api-addresses': 'api_addresses', 'state-addresses': 'state_addresses'}
    def __init__(self, api_addresses=None, state_addresses=None, **unknown_fields):
        '''
        api_addresses : typing.Sequence<+T_co>[str]
        state_addresses : typing.Sequence<+T_co>[str]
        '''
        self.api_addresses = api_addresses
        self.state_addresses = state_addresses



class DestroyApplicationInfo(Type):
    _toSchema = {'destroyed_storage': 'destroyed-storage', 'destroyed_units': 'destroyed-units', 'detached_storage': 'detached-storage'}
    _toPy = {'destroyed-storage': 'destroyed_storage', 'destroyed-units': 'destroyed_units', 'detached-storage': 'detached_storage'}
    def __init__(self, destroyed_storage=None, destroyed_units=None, detached_storage=None, **unknown_fields):
        '''
        destroyed_storage : typing.Sequence<+T_co>[~Entity]<~Entity>
        destroyed_units : typing.Sequence<+T_co>[~Entity]<~Entity>
        detached_storage : typing.Sequence<+T_co>[~Entity]<~Entity>
        '''
        self.destroyed_storage = [Entity.from_json(o) for o in destroyed_storage or []]
        self.destroyed_units = [Entity.from_json(o) for o in destroyed_units or []]
        self.detached_storage = [Entity.from_json(o) for o in detached_storage or []]



class DestroyApplicationResult(Type):
    _toSchema = {'error': 'error', 'info': 'info'}
    _toPy = {'error': 'error', 'info': 'info'}
    def __init__(self, error=None, info=None, **unknown_fields):
        '''
        error : Error
        info : DestroyApplicationInfo
        '''
        self.error = Error.from_json(error) if error else None
        self.info = DestroyApplicationInfo.from_json(info) if info else None



class DestroyApplicationResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~DestroyApplicationResult]<~DestroyApplicationResult>
        '''
        self.results = [DestroyApplicationResult.from_json(o) for o in results or []]



class DestroyApplicationUnits(Type):
    _toSchema = {'unit_names': 'unit-names'}
    _toPy = {'unit-names': 'unit_names'}
    def __init__(self, unit_names=None, **unknown_fields):
        '''
        unit_names : typing.Sequence<+T_co>[str]
        '''
        self.unit_names = unit_names



class DestroyControllerArgs(Type):
    _toSchema = {'destroy_models': 'destroy-models'}
    _toPy = {'destroy-models': 'destroy_models'}
    def __init__(self, destroy_models=None, **unknown_fields):
        '''
        destroy_models : bool
        '''
        self.destroy_models = destroy_models



class DestroyMachineInfo(Type):
    _toSchema = {'destroyed_storage': 'destroyed-storage', 'destroyed_units': 'destroyed-units', 'detached_storage': 'detached-storage'}
    _toPy = {'destroyed-storage': 'destroyed_storage', 'destroyed-units': 'destroyed_units', 'detached-storage': 'detached_storage'}
    def __init__(self, destroyed_storage=None, destroyed_units=None, detached_storage=None, **unknown_fields):
        '''
        destroyed_storage : typing.Sequence<+T_co>[~Entity]<~Entity>
        destroyed_units : typing.Sequence<+T_co>[~Entity]<~Entity>
        detached_storage : typing.Sequence<+T_co>[~Entity]<~Entity>
        '''
        self.destroyed_storage = [Entity.from_json(o) for o in destroyed_storage or []]
        self.destroyed_units = [Entity.from_json(o) for o in destroyed_units or []]
        self.detached_storage = [Entity.from_json(o) for o in detached_storage or []]



class DestroyMachineResult(Type):
    _toSchema = {'error': 'error', 'info': 'info'}
    _toPy = {'error': 'error', 'info': 'info'}
    def __init__(self, error=None, info=None, **unknown_fields):
        '''
        error : Error
        info : DestroyMachineInfo
        '''
        self.error = Error.from_json(error) if error else None
        self.info = DestroyMachineInfo.from_json(info) if info else None



class DestroyMachineResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~DestroyMachineResult]<~DestroyMachineResult>
        '''
        self.results = [DestroyMachineResult.from_json(o) for o in results or []]



class DestroyMachines(Type):
    _toSchema = {'force': 'force', 'machine_names': 'machine-names'}
    _toPy = {'force': 'force', 'machine-names': 'machine_names'}
    def __init__(self, force=None, machine_names=None, **unknown_fields):
        '''
        force : bool
        machine_names : typing.Sequence<+T_co>[str]
        '''
        self.force = force
        self.machine_names = machine_names



class DestroyRelation(Type):
    _toSchema = {'endpoints': 'endpoints'}
    _toPy = {'endpoints': 'endpoints'}
    def __init__(self, endpoints=None, **unknown_fields):
        '''
        endpoints : typing.Sequence<+T_co>[str]
        '''
        self.endpoints = endpoints



class DestroyUnitInfo(Type):
    _toSchema = {'destroyed_storage': 'destroyed-storage', 'detached_storage': 'detached-storage'}
    _toPy = {'destroyed-storage': 'destroyed_storage', 'detached-storage': 'detached_storage'}
    def __init__(self, destroyed_storage=None, detached_storage=None, **unknown_fields):
        '''
        destroyed_storage : typing.Sequence<+T_co>[~Entity]<~Entity>
        detached_storage : typing.Sequence<+T_co>[~Entity]<~Entity>
        '''
        self.destroyed_storage = [Entity.from_json(o) for o in destroyed_storage or []]
        self.detached_storage = [Entity.from_json(o) for o in detached_storage or []]



class DestroyUnitResult(Type):
    _toSchema = {'error': 'error', 'info': 'info'}
    _toPy = {'error': 'error', 'info': 'info'}
    def __init__(self, error=None, info=None, **unknown_fields):
        '''
        error : Error
        info : DestroyUnitInfo
        '''
        self.error = Error.from_json(error) if error else None
        self.info = DestroyUnitInfo.from_json(info) if info else None



class DestroyUnitResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~DestroyUnitResult]<~DestroyUnitResult>
        '''
        self.results = [DestroyUnitResult.from_json(o) for o in results or []]



class DetailedStatus(Type):
    _toSchema = {'data': 'data', 'err': 'err', 'info': 'info', 'kind': 'kind', 'life': 'life', 'since': 'since', 'status': 'status', 'version': 'version'}
    _toPy = {'data': 'data', 'err': 'err', 'info': 'info', 'kind': 'kind', 'life': 'life', 'since': 'since', 'status': 'status', 'version': 'version'}
    def __init__(self, data=None, err=None, info=None, kind=None, life=None, since=None, status=None, version=None, **unknown_fields):
        '''
        data : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        err : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        info : str
        kind : str
        life : str
        since : str
        status : str
        version : str
        '''
        self.data = data
        self.err = err
        self.info = info
        self.kind = kind
        self.life = life
        self.since = since
        self.status = status
        self.version = version



class DeviceBridgeInfo(Type):
    _toSchema = {'bridge_name': 'bridge-name', 'host_device_name': 'host-device-name'}
    _toPy = {'bridge-name': 'bridge_name', 'host-device-name': 'host_device_name'}
    def __init__(self, bridge_name=None, host_device_name=None, **unknown_fields):
        '''
        bridge_name : str
        host_device_name : str
        '''
        self.bridge_name = bridge_name
        self.host_device_name = host_device_name



class DiscoverSpacesResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~ProviderSpace]<~ProviderSpace>
        '''
        self.results = [ProviderSpace.from_json(o) for o in results or []]



class DistributionGroupResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : typing.Sequence<+T_co>[str]
        '''
        self.error = Error.from_json(error) if error else None
        self.result = result



class DistributionGroupResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~DistributionGroupResult]<~DistributionGroupResult>
        '''
        self.results = [DistributionGroupResult.from_json(o) for o in results or []]



class DumpModelRequest(Type):
    _toSchema = {'entities': 'entities', 'simplified': 'simplified'}
    _toPy = {'entities': 'entities', 'simplified': 'simplified'}
    def __init__(self, entities=None, simplified=None, **unknown_fields):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        simplified : bool
        '''
        self.entities = [Entity.from_json(o) for o in entities or []]
        self.simplified = simplified



class Endpoint(Type):
    _toSchema = {'application_name': 'application-name', 'relation': 'relation'}
    _toPy = {'application-name': 'application_name', 'relation': 'relation'}
    def __init__(self, application_name=None, relation=None, **unknown_fields):
        '''
        application_name : str
        relation : CharmRelation
        '''
        self.application_name = application_name
        self.relation = CharmRelation.from_json(relation) if relation else None



class EndpointStatus(Type):
    _toSchema = {'application': 'application', 'name': 'name', 'role': 'role', 'subordinate': 'subordinate'}
    _toPy = {'application': 'application', 'name': 'name', 'role': 'role', 'subordinate': 'subordinate'}
    def __init__(self, application=None, name=None, role=None, subordinate=None, **unknown_fields):
        '''
        application : str
        name : str
        role : str
        subordinate : bool
        '''
        self.application = application
        self.name = name
        self.role = role
        self.subordinate = subordinate



class Entities(Type):
    _toSchema = {'entities': 'entities'}
    _toPy = {'entities': 'entities'}
    def __init__(self, entities=None, **unknown_fields):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        '''
        self.entities = [Entity.from_json(o) for o in entities or []]



class EntitiesCharmURL(Type):
    _toSchema = {'entities': 'entities'}
    _toPy = {'entities': 'entities'}
    def __init__(self, entities=None, **unknown_fields):
        '''
        entities : typing.Sequence<+T_co>[~EntityCharmURL]<~EntityCharmURL>
        '''
        self.entities = [EntityCharmURL.from_json(o) for o in entities or []]



class EntitiesPortRanges(Type):
    _toSchema = {'entities': 'entities'}
    _toPy = {'entities': 'entities'}
    def __init__(self, entities=None, **unknown_fields):
        '''
        entities : typing.Sequence<+T_co>[~EntityPortRange]<~EntityPortRange>
        '''
        self.entities = [EntityPortRange.from_json(o) for o in entities or []]



class EntitiesResult(Type):
    _toSchema = {'entities': 'entities', 'error': 'error'}
    _toPy = {'entities': 'entities', 'error': 'error'}
    def __init__(self, entities=None, error=None, **unknown_fields):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        error : Error
        '''
        self.entities = [Entity.from_json(o) for o in entities or []]
        self.error = Error.from_json(error) if error else None



class EntitiesResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~EntitiesResult]<~EntitiesResult>
        '''
        self.results = [EntitiesResult.from_json(o) for o in results or []]



class EntitiesVersion(Type):
    _toSchema = {'agent_tools': 'agent-tools'}
    _toPy = {'agent-tools': 'agent_tools'}
    def __init__(self, agent_tools=None, **unknown_fields):
        '''
        agent_tools : typing.Sequence<+T_co>[~EntityVersion]<~EntityVersion>
        '''
        self.agent_tools = [EntityVersion.from_json(o) for o in agent_tools or []]



class EntitiesWatchResult(Type):
    _toSchema = {'changes': 'changes', 'error': 'error', 'watcher_id': 'watcher-id'}
    _toPy = {'changes': 'changes', 'error': 'error', 'watcher-id': 'watcher_id'}
    def __init__(self, changes=None, error=None, watcher_id=None, **unknown_fields):
        '''
        changes : typing.Sequence<+T_co>[str]
        error : Error
        watcher_id : str
        '''
        self.changes = changes
        self.error = Error.from_json(error) if error else None
        self.watcher_id = watcher_id



class Entity(Type):
    _toSchema = {'tag': 'tag'}
    _toPy = {'tag': 'tag'}
    def __init__(self, tag=None, **unknown_fields):
        '''
        tag : str
        '''
        self.tag = tag



class EntityAnnotations(Type):
    _toSchema = {'annotations': 'annotations', 'entity': 'entity'}
    _toPy = {'annotations': 'annotations', 'entity': 'entity'}
    def __init__(self, annotations=None, entity=None, **unknown_fields):
        '''
        annotations : typing.Mapping<~KT, +VT_co>[str, str]
        entity : str
        '''
        self.annotations = annotations
        self.entity = entity



class EntityCharmURL(Type):
    _toSchema = {'charm_url': 'charm-url', 'tag': 'tag'}
    _toPy = {'charm-url': 'charm_url', 'tag': 'tag'}
    def __init__(self, charm_url=None, tag=None, **unknown_fields):
        '''
        charm_url : str
        tag : str
        '''
        self.charm_url = charm_url
        self.tag = tag



class EntityMetrics(Type):
    _toSchema = {'error': 'error', 'metrics': 'metrics'}
    _toPy = {'error': 'error', 'metrics': 'metrics'}
    def __init__(self, error=None, metrics=None, **unknown_fields):
        '''
        error : Error
        metrics : typing.Sequence<+T_co>[~MetricResult]<~MetricResult>
        '''
        self.error = Error.from_json(error) if error else None
        self.metrics = [MetricResult.from_json(o) for o in metrics or []]



class EntityPassword(Type):
    _toSchema = {'password': 'password', 'tag': 'tag'}
    _toPy = {'password': 'password', 'tag': 'tag'}
    def __init__(self, password=None, tag=None, **unknown_fields):
        '''
        password : str
        tag : str
        '''
        self.password = password
        self.tag = tag



class EntityPasswords(Type):
    _toSchema = {'changes': 'changes'}
    _toPy = {'changes': 'changes'}
    def __init__(self, changes=None, **unknown_fields):
        '''
        changes : typing.Sequence<+T_co>[~EntityPassword]<~EntityPassword>
        '''
        self.changes = [EntityPassword.from_json(o) for o in changes or []]



class EntityPortRange(Type):
    _toSchema = {'from_port': 'from-port', 'protocol': 'protocol', 'tag': 'tag', 'to_port': 'to-port'}
    _toPy = {'from-port': 'from_port', 'protocol': 'protocol', 'tag': 'tag', 'to-port': 'to_port'}
    def __init__(self, from_port=None, protocol=None, tag=None, to_port=None, **unknown_fields):
        '''
        from_port : int
        protocol : str
        tag : str
        to_port : int
        '''
        self.from_port = from_port
        self.protocol = protocol
        self.tag = tag
        self.to_port = to_port



class EntityStatus(Type):
    _toSchema = {'data': 'data', 'info': 'info', 'since': 'since', 'status': 'status'}
    _toPy = {'data': 'data', 'info': 'info', 'since': 'since', 'status': 'status'}
    def __init__(self, data=None, info=None, since=None, status=None, **unknown_fields):
        '''
        data : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        info : str
        since : str
        status : str
        '''
        self.data = data
        self.info = info
        self.since = since
        self.status = status



class EntityStatusArgs(Type):
    _toSchema = {'data': 'data', 'info': 'info', 'status': 'status', 'tag': 'tag'}
    _toPy = {'data': 'data', 'info': 'info', 'status': 'status', 'tag': 'tag'}
    def __init__(self, data=None, info=None, status=None, tag=None, **unknown_fields):
        '''
        data : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        info : str
        status : str
        tag : str
        '''
        self.data = data
        self.info = info
        self.status = status
        self.tag = tag



class EntityVersion(Type):
    _toSchema = {'tag': 'tag', 'tools': 'tools'}
    _toPy = {'tag': 'tag', 'tools': 'tools'}
    def __init__(self, tag=None, tools=None, **unknown_fields):
        '''
        tag : str
        tools : Version
        '''
        self.tag = tag
        self.tools = Version.from_json(tools) if tools else None



class EntityWorkloadVersion(Type):
    _toSchema = {'tag': 'tag', 'workload_version': 'workload-version'}
    _toPy = {'tag': 'tag', 'workload-version': 'workload_version'}
    def __init__(self, tag=None, workload_version=None, **unknown_fields):
        '''
        tag : str
        workload_version : str
        '''
        self.tag = tag
        self.workload_version = workload_version



class EntityWorkloadVersions(Type):
    _toSchema = {'entities': 'entities'}
    _toPy = {'entities': 'entities'}
    def __init__(self, entities=None, **unknown_fields):
        '''
        entities : typing.Sequence<+T_co>[~EntityWorkloadVersion]<~EntityWorkloadVersion>
        '''
        self.entities = [EntityWorkloadVersion.from_json(o) for o in entities or []]



class EnvListArgs(Type):
    _toSchema = {'patterns': 'patterns'}
    _toPy = {'patterns': 'patterns'}
    def __init__(self, patterns=None, **unknown_fields):
        '''
        patterns : typing.Sequence<+T_co>[str]
        '''
        self.patterns = patterns



class EnvListResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~Payload]<~Payload>
        '''
        self.results = [Payload.from_json(o) for o in results or []]



class Error(Type):
    _toSchema = {'code': 'code', 'info': 'info', 'message': 'message'}
    _toPy = {'code': 'code', 'info': 'info', 'message': 'message'}
    def __init__(self, code=None, info=None, message=None, **unknown_fields):
        '''
        code : str
        info : ErrorInfo
        message : str
        '''
        self.code = code
        self.info = ErrorInfo.from_json(info) if info else None
        self.message = message



class ErrorInfo(Type):
    _toSchema = {'macaroon': 'macaroon', 'macaroon_path': 'macaroon-path'}
    _toPy = {'macaroon': 'macaroon', 'macaroon-path': 'macaroon_path'}
    def __init__(self, macaroon=None, macaroon_path=None, **unknown_fields):
        '''
        macaroon : Macaroon
        macaroon_path : str
        '''
        self.macaroon = Macaroon.from_json(macaroon) if macaroon else None
        self.macaroon_path = macaroon_path



class ErrorResult(Type):
    _toSchema = {'error': 'error'}
    _toPy = {'error': 'error'}
    def __init__(self, error=None, **unknown_fields):
        '''
        error : Error
        '''
        self.error = Error.from_json(error) if error else None



class ErrorResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~ErrorResult]<~ErrorResult>
        '''
        self.results = [ErrorResult.from_json(o) for o in results or []]



class Filesystem(Type):
    _toSchema = {'filesystem_tag': 'filesystem-tag', 'info': 'info', 'volume_tag': 'volume-tag'}
    _toPy = {'filesystem-tag': 'filesystem_tag', 'info': 'info', 'volume-tag': 'volume_tag'}
    def __init__(self, filesystem_tag=None, info=None, volume_tag=None, **unknown_fields):
        '''
        filesystem_tag : str
        info : FilesystemInfo
        volume_tag : str
        '''
        self.filesystem_tag = filesystem_tag
        self.info = FilesystemInfo.from_json(info) if info else None
        self.volume_tag = volume_tag



class FilesystemAttachment(Type):
    _toSchema = {'filesystem_tag': 'filesystem-tag', 'info': 'info', 'machine_tag': 'machine-tag'}
    _toPy = {'filesystem-tag': 'filesystem_tag', 'info': 'info', 'machine-tag': 'machine_tag'}
    def __init__(self, filesystem_tag=None, info=None, machine_tag=None, **unknown_fields):
        '''
        filesystem_tag : str
        info : FilesystemAttachmentInfo
        machine_tag : str
        '''
        self.filesystem_tag = filesystem_tag
        self.info = FilesystemAttachmentInfo.from_json(info) if info else None
        self.machine_tag = machine_tag



class FilesystemAttachmentDetails(Type):
    _toSchema = {'filesystemattachmentinfo': 'FilesystemAttachmentInfo', 'life': 'life'}
    _toPy = {'FilesystemAttachmentInfo': 'filesystemattachmentinfo', 'life': 'life'}
    def __init__(self, filesystemattachmentinfo=None, life=None, **unknown_fields):
        '''
        filesystemattachmentinfo : FilesystemAttachmentInfo
        life : str
        '''
        self.filesystemattachmentinfo = FilesystemAttachmentInfo.from_json(filesystemattachmentinfo) if filesystemattachmentinfo else None
        self.life = life



class FilesystemAttachmentInfo(Type):
    _toSchema = {'mount_point': 'mount-point', 'read_only': 'read-only'}
    _toPy = {'mount-point': 'mount_point', 'read-only': 'read_only'}
    def __init__(self, mount_point=None, read_only=None, **unknown_fields):
        '''
        mount_point : str
        read_only : bool
        '''
        self.mount_point = mount_point
        self.read_only = read_only



class FilesystemAttachmentParams(Type):
    _toSchema = {'filesystem_id': 'filesystem-id', 'filesystem_tag': 'filesystem-tag', 'instance_id': 'instance-id', 'machine_tag': 'machine-tag', 'mount_point': 'mount-point', 'provider': 'provider', 'read_only': 'read-only'}
    _toPy = {'filesystem-id': 'filesystem_id', 'filesystem-tag': 'filesystem_tag', 'instance-id': 'instance_id', 'machine-tag': 'machine_tag', 'mount-point': 'mount_point', 'provider': 'provider', 'read-only': 'read_only'}
    def __init__(self, filesystem_id=None, filesystem_tag=None, instance_id=None, machine_tag=None, mount_point=None, provider=None, read_only=None, **unknown_fields):
        '''
        filesystem_id : str
        filesystem_tag : str
        instance_id : str
        machine_tag : str
        mount_point : str
        provider : str
        read_only : bool
        '''
        self.filesystem_id = filesystem_id
        self.filesystem_tag = filesystem_tag
        self.instance_id = instance_id
        self.machine_tag = machine_tag
        self.mount_point = mount_point
        self.provider = provider
        self.read_only = read_only



class FilesystemAttachmentParamsResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : FilesystemAttachmentParams
        '''
        self.error = Error.from_json(error) if error else None
        self.result = FilesystemAttachmentParams.from_json(result) if result else None



class FilesystemAttachmentParamsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~FilesystemAttachmentParamsResult]<~FilesystemAttachmentParamsResult>
        '''
        self.results = [FilesystemAttachmentParamsResult.from_json(o) for o in results or []]



class FilesystemAttachmentResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : FilesystemAttachment
        '''
        self.error = Error.from_json(error) if error else None
        self.result = FilesystemAttachment.from_json(result) if result else None



class FilesystemAttachmentResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~FilesystemAttachmentResult]<~FilesystemAttachmentResult>
        '''
        self.results = [FilesystemAttachmentResult.from_json(o) for o in results or []]



class FilesystemAttachments(Type):
    _toSchema = {'filesystem_attachments': 'filesystem-attachments'}
    _toPy = {'filesystem-attachments': 'filesystem_attachments'}
    def __init__(self, filesystem_attachments=None, **unknown_fields):
        '''
        filesystem_attachments : typing.Sequence<+T_co>[~FilesystemAttachment]<~FilesystemAttachment>
        '''
        self.filesystem_attachments = [FilesystemAttachment.from_json(o) for o in filesystem_attachments or []]



class FilesystemDetails(Type):
    _toSchema = {'filesystem_tag': 'filesystem-tag', 'info': 'info', 'machine_attachments': 'machine-attachments', 'status': 'status', 'storage': 'storage', 'volume_tag': 'volume-tag'}
    _toPy = {'filesystem-tag': 'filesystem_tag', 'info': 'info', 'machine-attachments': 'machine_attachments', 'status': 'status', 'storage': 'storage', 'volume-tag': 'volume_tag'}
    def __init__(self, filesystem_tag=None, info=None, machine_attachments=None, status=None, storage=None, volume_tag=None, **unknown_fields):
        '''
        filesystem_tag : str
        info : FilesystemInfo
        machine_attachments : typing.Mapping<~KT, +VT_co>[str, ~FilesystemAttachmentInfo]<~FilesystemAttachmentInfo>
        status : EntityStatus
        storage : StorageDetails
        volume_tag : str
        '''
        self.filesystem_tag = filesystem_tag
        self.info = FilesystemInfo.from_json(info) if info else None
        self.machine_attachments = machine_attachments
        self.status = EntityStatus.from_json(status) if status else None
        self.storage = StorageDetails.from_json(storage) if storage else None
        self.volume_tag = volume_tag



class FilesystemDetailsListResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : typing.Sequence<+T_co>[~FilesystemDetails]<~FilesystemDetails>
        '''
        self.error = Error.from_json(error) if error else None
        self.result = [FilesystemDetails.from_json(o) for o in result or []]



class FilesystemDetailsListResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~FilesystemDetailsListResult]<~FilesystemDetailsListResult>
        '''
        self.results = [FilesystemDetailsListResult.from_json(o) for o in results or []]



class FilesystemFilter(Type):
    _toSchema = {'machines': 'machines'}
    _toPy = {'machines': 'machines'}
    def __init__(self, machines=None, **unknown_fields):
        '''
        machines : typing.Sequence<+T_co>[str]
        '''
        self.machines = machines



class FilesystemFilters(Type):
    _toSchema = {'filters': 'filters'}
    _toPy = {'filters': 'filters'}
    def __init__(self, filters=None, **unknown_fields):
        '''
        filters : typing.Sequence<+T_co>[~FilesystemFilter]<~FilesystemFilter>
        '''
        self.filters = [FilesystemFilter.from_json(o) for o in filters or []]



class FilesystemInfo(Type):
    _toSchema = {'filesystem_id': 'filesystem-id', 'size': 'size'}
    _toPy = {'filesystem-id': 'filesystem_id', 'size': 'size'}
    def __init__(self, filesystem_id=None, size=None, **unknown_fields):
        '''
        filesystem_id : str
        size : int
        '''
        self.filesystem_id = filesystem_id
        self.size = size



class FilesystemParams(Type):
    _toSchema = {'attachment': 'attachment', 'attributes': 'attributes', 'filesystem_tag': 'filesystem-tag', 'provider': 'provider', 'size': 'size', 'tags': 'tags', 'volume_tag': 'volume-tag'}
    _toPy = {'attachment': 'attachment', 'attributes': 'attributes', 'filesystem-tag': 'filesystem_tag', 'provider': 'provider', 'size': 'size', 'tags': 'tags', 'volume-tag': 'volume_tag'}
    def __init__(self, attachment=None, attributes=None, filesystem_tag=None, provider=None, size=None, tags=None, volume_tag=None, **unknown_fields):
        '''
        attachment : FilesystemAttachmentParams
        attributes : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        filesystem_tag : str
        provider : str
        size : int
        tags : typing.Mapping<~KT, +VT_co>[str, str]
        volume_tag : str
        '''
        self.attachment = FilesystemAttachmentParams.from_json(attachment) if attachment else None
        self.attributes = attributes
        self.filesystem_tag = filesystem_tag
        self.provider = provider
        self.size = size
        self.tags = tags
        self.volume_tag = volume_tag



class FilesystemParamsResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : FilesystemParams
        '''
        self.error = Error.from_json(error) if error else None
        self.result = FilesystemParams.from_json(result) if result else None



class FilesystemParamsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~FilesystemParamsResult]<~FilesystemParamsResult>
        '''
        self.results = [FilesystemParamsResult.from_json(o) for o in results or []]



class FilesystemResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : Filesystem
        '''
        self.error = Error.from_json(error) if error else None
        self.result = Filesystem.from_json(result) if result else None



class FilesystemResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~FilesystemResult]<~FilesystemResult>
        '''
        self.results = [FilesystemResult.from_json(o) for o in results or []]



class Filesystems(Type):
    _toSchema = {'filesystems': 'filesystems'}
    _toPy = {'filesystems': 'filesystems'}
    def __init__(self, filesystems=None, **unknown_fields):
        '''
        filesystems : typing.Sequence<+T_co>[~Filesystem]<~Filesystem>
        '''
        self.filesystems = [Filesystem.from_json(o) for o in filesystems or []]



class FindActionsByNames(Type):
    _toSchema = {'names': 'names'}
    _toPy = {'names': 'names'}
    def __init__(self, names=None, **unknown_fields):
        '''
        names : typing.Sequence<+T_co>[str]
        '''
        self.names = names



class FindTags(Type):
    _toSchema = {'prefixes': 'prefixes'}
    _toPy = {'prefixes': 'prefixes'}
    def __init__(self, prefixes=None, **unknown_fields):
        '''
        prefixes : typing.Sequence<+T_co>[str]
        '''
        self.prefixes = prefixes



class FindTagsResults(Type):
    _toSchema = {'matches': 'matches'}
    _toPy = {'matches': 'matches'}
    def __init__(self, matches=None, **unknown_fields):
        '''
        matches : typing.Sequence<+T_co>[~Entity]<~Entity>
        '''
        self.matches = [Entity.from_json(o) for o in matches or []]



class FindToolsParams(Type):
    _toSchema = {'arch': 'arch', 'major': 'major', 'minor': 'minor', 'number': 'number', 'series': 'series'}
    _toPy = {'arch': 'arch', 'major': 'major', 'minor': 'minor', 'number': 'number', 'series': 'series'}
    def __init__(self, arch=None, major=None, minor=None, number=None, series=None, **unknown_fields):
        '''
        arch : str
        major : int
        minor : int
        number : Number
        series : str
        '''
        self.arch = arch
        self.major = major
        self.minor = minor
        self.number = Number.from_json(number) if number else None
        self.series = series



class FindToolsResult(Type):
    _toSchema = {'error': 'error', 'list_': 'list'}
    _toPy = {'error': 'error', 'list': 'list_'}
    def __init__(self, error=None, list_=None, **unknown_fields):
        '''
        error : Error
        list_ : typing.Sequence<+T_co>[~Tools]<~Tools>
        '''
        self.error = Error.from_json(error) if error else None
        self.list_ = [Tools.from_json(o) for o in list_ or []]



class FullStatus(Type):
    _toSchema = {'applications': 'applications', 'machines': 'machines', 'model': 'model', 'relations': 'relations', 'remote_applications': 'remote-applications'}
    _toPy = {'applications': 'applications', 'machines': 'machines', 'model': 'model', 'relations': 'relations', 'remote-applications': 'remote_applications'}
    def __init__(self, applications=None, machines=None, model=None, relations=None, remote_applications=None, **unknown_fields):
        '''
        applications : typing.Mapping<~KT, +VT_co>[str, ~ApplicationStatus]<~ApplicationStatus>
        machines : typing.Mapping<~KT, +VT_co>[str, ~MachineStatus]<~MachineStatus>
        model : ModelStatusInfo
        relations : typing.Sequence<+T_co>[~RelationStatus]<~RelationStatus>
        remote_applications : typing.Mapping<~KT, +VT_co>[str, ~RemoteApplicationStatus]<~RemoteApplicationStatus>
        '''
        self.applications = applications
        self.machines = machines
        self.model = ModelStatusInfo.from_json(model) if model else None
        self.relations = [RelationStatus.from_json(o) for o in relations or []]
        self.remote_applications = remote_applications



class GetApplicationConstraints(Type):
    _toSchema = {'application': 'application'}
    _toPy = {'application': 'application'}
    def __init__(self, application=None, **unknown_fields):
        '''
        application : str
        '''
        self.application = application



class GetConstraintsResults(Type):
    _toSchema = {'constraints': 'constraints'}
    _toPy = {'constraints': 'constraints'}
    def __init__(self, constraints=None, **unknown_fields):
        '''
        constraints : Value
        '''
        self.constraints = Value.from_json(constraints) if constraints else None



class GetLeadershipSettingsBulkResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~GetLeadershipSettingsResult]<~GetLeadershipSettingsResult>
        '''
        self.results = [GetLeadershipSettingsResult.from_json(o) for o in results or []]



class GetLeadershipSettingsResult(Type):
    _toSchema = {'error': 'error', 'settings': 'settings'}
    _toPy = {'error': 'error', 'settings': 'settings'}
    def __init__(self, error=None, settings=None, **unknown_fields):
        '''
        error : Error
        settings : typing.Mapping<~KT, +VT_co>[str, str]
        '''
        self.error = Error.from_json(error) if error else None
        self.settings = settings



class HAMember(Type):
    _toSchema = {'public_address': 'public-address', 'series': 'series', 'tag': 'tag'}
    _toPy = {'public-address': 'public_address', 'series': 'series', 'tag': 'tag'}
    def __init__(self, public_address=None, series=None, tag=None, **unknown_fields):
        '''
        public_address : Address
        series : str
        tag : str
        '''
        self.public_address = Address.from_json(public_address) if public_address else None
        self.series = series
        self.tag = tag



class HardwareCharacteristics(Type):
    _toSchema = {'arch': 'arch', 'availability_zone': 'availability-zone', 'cpu_cores': 'cpu-cores', 'cpu_power': 'cpu-power', 'mem': 'mem', 'root_disk': 'root-disk', 'tags': 'tags'}
    _toPy = {'arch': 'arch', 'availability-zone': 'availability_zone', 'cpu-cores': 'cpu_cores', 'cpu-power': 'cpu_power', 'mem': 'mem', 'root-disk': 'root_disk', 'tags': 'tags'}
    def __init__(self, arch=None, availability_zone=None, cpu_cores=None, cpu_power=None, mem=None, root_disk=None, tags=None, **unknown_fields):
        '''
        arch : str
        availability_zone : str
        cpu_cores : int
        cpu_power : int
        mem : int
        root_disk : int
        tags : typing.Sequence<+T_co>[str]
        '''
        self.arch = arch
        self.availability_zone = availability_zone
        self.cpu_cores = cpu_cores
        self.cpu_power = cpu_power
        self.mem = mem
        self.root_disk = root_disk
        self.tags = tags



class History(Type):
    _toSchema = {'error': 'error', 'statuses': 'statuses'}
    _toPy = {'error': 'error', 'statuses': 'statuses'}
    def __init__(self, error=None, statuses=None, **unknown_fields):
        '''
        error : Error
        statuses : typing.Sequence<+T_co>[~DetailedStatus]<~DetailedStatus>
        '''
        self.error = Error.from_json(error) if error else None
        self.statuses = [DetailedStatus.from_json(o) for o in statuses or []]



class HostNetworkChange(Type):
    _toSchema = {'error': 'error', 'new_bridges': 'new-bridges', 'reconfigure_delay': 'reconfigure-delay'}
    _toPy = {'error': 'error', 'new-bridges': 'new_bridges', 'reconfigure-delay': 'reconfigure_delay'}
    def __init__(self, error=None, new_bridges=None, reconfigure_delay=None, **unknown_fields):
        '''
        error : Error
        new_bridges : typing.Sequence<+T_co>[~DeviceBridgeInfo]<~DeviceBridgeInfo>
        reconfigure_delay : int
        '''
        self.error = Error.from_json(error) if error else None
        self.new_bridges = [DeviceBridgeInfo.from_json(o) for o in new_bridges or []]
        self.reconfigure_delay = reconfigure_delay



class HostNetworkChangeResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~HostNetworkChange]<~HostNetworkChange>
        '''
        self.results = [HostNetworkChange.from_json(o) for o in results or []]



class HostPort(Type):
    _toSchema = {'address': 'Address', 'port': 'port'}
    _toPy = {'Address': 'address', 'port': 'port'}
    def __init__(self, address=None, port=None, **unknown_fields):
        '''
        address : Address
        port : int
        '''
        self.address = Address.from_json(address) if address else None
        self.port = port



class HostedModelConfig(Type):
    _toSchema = {'cloud_spec': 'cloud-spec', 'config': 'config', 'error': 'error', 'name': 'name', 'owner': 'owner'}
    _toPy = {'cloud-spec': 'cloud_spec', 'config': 'config', 'error': 'error', 'name': 'name', 'owner': 'owner'}
    def __init__(self, cloud_spec=None, config=None, error=None, name=None, owner=None, **unknown_fields):
        '''
        cloud_spec : CloudSpec
        config : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        error : Error
        name : str
        owner : str
        '''
        self.cloud_spec = CloudSpec.from_json(cloud_spec) if cloud_spec else None
        self.config = config
        self.error = Error.from_json(error) if error else None
        self.name = name
        self.owner = owner



class HostedModelConfigsResults(Type):
    _toSchema = {'models': 'models'}
    _toPy = {'models': 'models'}
    def __init__(self, models=None, **unknown_fields):
        '''
        models : typing.Sequence<+T_co>[~HostedModelConfig]<~HostedModelConfig>
        '''
        self.models = [HostedModelConfig.from_json(o) for o in models or []]



class ImageFilterParams(Type):
    _toSchema = {'images': 'images'}
    _toPy = {'images': 'images'}
    def __init__(self, images=None, **unknown_fields):
        '''
        images : typing.Sequence<+T_co>[~ImageSpec]<~ImageSpec>
        '''
        self.images = [ImageSpec.from_json(o) for o in images or []]



class ImageMetadata(Type):
    _toSchema = {'arch': 'arch', 'created': 'created', 'kind': 'kind', 'series': 'series', 'url': 'url'}
    _toPy = {'arch': 'arch', 'created': 'created', 'kind': 'kind', 'series': 'series', 'url': 'url'}
    def __init__(self, arch=None, created=None, kind=None, series=None, url=None, **unknown_fields):
        '''
        arch : str
        created : str
        kind : str
        series : str
        url : str
        '''
        self.arch = arch
        self.created = created
        self.kind = kind
        self.series = series
        self.url = url



class ImageMetadataFilter(Type):
    _toSchema = {'arches': 'arches', 'region': 'region', 'root_storage_type': 'root-storage-type', 'series': 'series', 'stream': 'stream', 'virt_type': 'virt-type'}
    _toPy = {'arches': 'arches', 'region': 'region', 'root-storage-type': 'root_storage_type', 'series': 'series', 'stream': 'stream', 'virt-type': 'virt_type'}
    def __init__(self, arches=None, region=None, root_storage_type=None, series=None, stream=None, virt_type=None, **unknown_fields):
        '''
        arches : typing.Sequence<+T_co>[str]
        region : str
        root_storage_type : str
        series : typing.Sequence<+T_co>[str]
        stream : str
        virt_type : str
        '''
        self.arches = arches
        self.region = region
        self.root_storage_type = root_storage_type
        self.series = series
        self.stream = stream
        self.virt_type = virt_type



class ImageSpec(Type):
    _toSchema = {'arch': 'arch', 'kind': 'kind', 'series': 'series'}
    _toPy = {'arch': 'arch', 'kind': 'kind', 'series': 'series'}
    def __init__(self, arch=None, kind=None, series=None, **unknown_fields):
        '''
        arch : str
        kind : str
        series : str
        '''
        self.arch = arch
        self.kind = kind
        self.series = series



class InitiateMigrationArgs(Type):
    _toSchema = {'specs': 'specs'}
    _toPy = {'specs': 'specs'}
    def __init__(self, specs=None, **unknown_fields):
        '''
        specs : typing.Sequence<+T_co>[~MigrationSpec]<~MigrationSpec>
        '''
        self.specs = [MigrationSpec.from_json(o) for o in specs or []]



class InitiateMigrationResult(Type):
    _toSchema = {'error': 'error', 'migration_id': 'migration-id', 'model_tag': 'model-tag'}
    _toPy = {'error': 'error', 'migration-id': 'migration_id', 'model-tag': 'model_tag'}
    def __init__(self, error=None, migration_id=None, model_tag=None, **unknown_fields):
        '''
        error : Error
        migration_id : str
        model_tag : str
        '''
        self.error = Error.from_json(error) if error else None
        self.migration_id = migration_id
        self.model_tag = model_tag



class InitiateMigrationResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~InitiateMigrationResult]<~InitiateMigrationResult>
        '''
        self.results = [InitiateMigrationResult.from_json(o) for o in results or []]



class InstanceInfo(Type):
    _toSchema = {'characteristics': 'characteristics', 'instance_id': 'instance-id', 'network_config': 'network-config', 'nonce': 'nonce', 'tag': 'tag', 'volume_attachments': 'volume-attachments', 'volumes': 'volumes'}
    _toPy = {'characteristics': 'characteristics', 'instance-id': 'instance_id', 'network-config': 'network_config', 'nonce': 'nonce', 'tag': 'tag', 'volume-attachments': 'volume_attachments', 'volumes': 'volumes'}
    def __init__(self, characteristics=None, instance_id=None, network_config=None, nonce=None, tag=None, volume_attachments=None, volumes=None, **unknown_fields):
        '''
        characteristics : HardwareCharacteristics
        instance_id : str
        network_config : typing.Sequence<+T_co>[~NetworkConfig]<~NetworkConfig>
        nonce : str
        tag : str
        volume_attachments : typing.Mapping<~KT, +VT_co>[str, ~VolumeAttachmentInfo]<~VolumeAttachmentInfo>
        volumes : typing.Sequence<+T_co>[~Volume]<~Volume>
        '''
        self.characteristics = HardwareCharacteristics.from_json(characteristics) if characteristics else None
        self.instance_id = instance_id
        self.network_config = [NetworkConfig.from_json(o) for o in network_config or []]
        self.nonce = nonce
        self.tag = tag
        self.volume_attachments = volume_attachments
        self.volumes = [Volume.from_json(o) for o in volumes or []]



class InstanceType(Type):
    _toSchema = {'arches': 'arches', 'cost': 'cost', 'cpu_cores': 'cpu-cores', 'deprecated': 'deprecated', 'memory': 'memory', 'name': 'name', 'root_disk': 'root-disk', 'virt_type': 'virt-type'}
    _toPy = {'arches': 'arches', 'cost': 'cost', 'cpu-cores': 'cpu_cores', 'deprecated': 'deprecated', 'memory': 'memory', 'name': 'name', 'root-disk': 'root_disk', 'virt-type': 'virt_type'}
    def __init__(self, arches=None, cost=None, cpu_cores=None, deprecated=None, memory=None, name=None, root_disk=None, virt_type=None, **unknown_fields):
        '''
        arches : typing.Sequence<+T_co>[str]
        cost : int
        cpu_cores : int
        deprecated : bool
        memory : int
        name : str
        root_disk : int
        virt_type : str
        '''
        self.arches = arches
        self.cost = cost
        self.cpu_cores = cpu_cores
        self.deprecated = deprecated
        self.memory = memory
        self.name = name
        self.root_disk = root_disk
        self.virt_type = virt_type



class InstanceTypesResult(Type):
    _toSchema = {'cost_currency': 'cost-currency', 'cost_divisor': 'cost-divisor', 'cost_unit': 'cost-unit', 'error': 'error', 'instance_types': 'instance-types'}
    _toPy = {'cost-currency': 'cost_currency', 'cost-divisor': 'cost_divisor', 'cost-unit': 'cost_unit', 'error': 'error', 'instance-types': 'instance_types'}
    def __init__(self, cost_currency=None, cost_divisor=None, cost_unit=None, error=None, instance_types=None, **unknown_fields):
        '''
        cost_currency : str
        cost_divisor : int
        cost_unit : str
        error : Error
        instance_types : typing.Sequence<+T_co>[~InstanceType]<~InstanceType>
        '''
        self.cost_currency = cost_currency
        self.cost_divisor = cost_divisor
        self.cost_unit = cost_unit
        self.error = Error.from_json(error) if error else None
        self.instance_types = [InstanceType.from_json(o) for o in instance_types or []]



class InstanceTypesResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~InstanceTypesResult]<~InstanceTypesResult>
        '''
        self.results = [InstanceTypesResult.from_json(o) for o in results or []]



class InstancesInfo(Type):
    _toSchema = {'machines': 'machines'}
    _toPy = {'machines': 'machines'}
    def __init__(self, machines=None, **unknown_fields):
        '''
        machines : typing.Sequence<+T_co>[~InstanceInfo]<~InstanceInfo>
        '''
        self.machines = [InstanceInfo.from_json(o) for o in machines or []]



class IntResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : int
        '''
        self.error = Error.from_json(error) if error else None
        self.result = result



class IntResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~IntResult]<~IntResult>
        '''
        self.results = [IntResult.from_json(o) for o in results or []]



class InterfaceAddress(Type):
    _toSchema = {'cidr': 'cidr', 'value': 'value'}
    _toPy = {'cidr': 'cidr', 'value': 'value'}
    def __init__(self, cidr=None, value=None, **unknown_fields):
        '''
        cidr : str
        value : str
        '''
        self.cidr = cidr
        self.value = value



class IsMasterResult(Type):
    _toSchema = {'master': 'master'}
    _toPy = {'master': 'master'}
    def __init__(self, master=None, **unknown_fields):
        '''
        master : bool
        '''
        self.master = master



class IsMeteredResult(Type):
    _toSchema = {'metered': 'metered'}
    _toPy = {'metered': 'metered'}
    def __init__(self, metered=None, **unknown_fields):
        '''
        metered : bool
        '''
        self.metered = metered



class JobsResult(Type):
    _toSchema = {'error': 'error', 'jobs': 'jobs'}
    _toPy = {'error': 'error', 'jobs': 'jobs'}
    def __init__(self, error=None, jobs=None, **unknown_fields):
        '''
        error : Error
        jobs : typing.Sequence<+T_co>[str]
        '''
        self.error = Error.from_json(error) if error else None
        self.jobs = jobs



class JobsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~JobsResult]<~JobsResult>
        '''
        self.results = [JobsResult.from_json(o) for o in results or []]



class LifeResult(Type):
    _toSchema = {'error': 'error', 'life': 'life'}
    _toPy = {'error': 'error', 'life': 'life'}
    def __init__(self, error=None, life=None, **unknown_fields):
        '''
        error : Error
        life : str
        '''
        self.error = Error.from_json(error) if error else None
        self.life = life



class LifeResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~LifeResult]<~LifeResult>
        '''
        self.results = [LifeResult.from_json(o) for o in results or []]



class ListCloudImageMetadataResult(Type):
    _toSchema = {'result': 'result'}
    _toPy = {'result': 'result'}
    def __init__(self, result=None, **unknown_fields):
        '''
        result : typing.Sequence<+T_co>[~CloudImageMetadata]<~CloudImageMetadata>
        '''
        self.result = [CloudImageMetadata.from_json(o) for o in result or []]



class ListImageResult(Type):
    _toSchema = {'result': 'result'}
    _toPy = {'result': 'result'}
    def __init__(self, result=None, **unknown_fields):
        '''
        result : typing.Sequence<+T_co>[~ImageMetadata]<~ImageMetadata>
        '''
        self.result = [ImageMetadata.from_json(o) for o in result or []]



class ListResourcesArgs(Type):
    _toSchema = {'entities': 'entities'}
    _toPy = {'entities': 'entities'}
    def __init__(self, entities=None, **unknown_fields):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        '''
        self.entities = [Entity.from_json(o) for o in entities or []]



class ListSSHKeys(Type):
    _toSchema = {'entities': 'entities', 'mode': 'mode'}
    _toPy = {'entities': 'entities', 'mode': 'mode'}
    def __init__(self, entities=None, mode=None, **unknown_fields):
        '''
        entities : Entities
        mode : bool
        '''
        self.entities = Entities.from_json(entities) if entities else None
        self.mode = mode



class ListSpacesResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~Space]<~Space>
        '''
        self.results = [Space.from_json(o) for o in results or []]



class ListSubnetsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~Subnet]<~Subnet>
        '''
        self.results = [Subnet.from_json(o) for o in results or []]



class ListUnitResourcesArgs(Type):
    _toSchema = {'resource_names': 'resource-names'}
    _toPy = {'resource-names': 'resource_names'}
    def __init__(self, resource_names=None, **unknown_fields):
        '''
        resource_names : typing.Sequence<+T_co>[str]
        '''
        self.resource_names = resource_names



class LogForwardingGetLastSentParams(Type):
    _toSchema = {'ids': 'ids'}
    _toPy = {'ids': 'ids'}
    def __init__(self, ids=None, **unknown_fields):
        '''
        ids : typing.Sequence<+T_co>[~LogForwardingID]<~LogForwardingID>
        '''
        self.ids = [LogForwardingID.from_json(o) for o in ids or []]



class LogForwardingGetLastSentResult(Type):
    _toSchema = {'err': 'err', 'record_id': 'record-id', 'record_timestamp': 'record-timestamp'}
    _toPy = {'err': 'err', 'record-id': 'record_id', 'record-timestamp': 'record_timestamp'}
    def __init__(self, err=None, record_id=None, record_timestamp=None, **unknown_fields):
        '''
        err : Error
        record_id : int
        record_timestamp : int
        '''
        self.err = Error.from_json(err) if err else None
        self.record_id = record_id
        self.record_timestamp = record_timestamp



class LogForwardingGetLastSentResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~LogForwardingGetLastSentResult]<~LogForwardingGetLastSentResult>
        '''
        self.results = [LogForwardingGetLastSentResult.from_json(o) for o in results or []]



class LogForwardingID(Type):
    _toSchema = {'model': 'model', 'sink': 'sink'}
    _toPy = {'model': 'model', 'sink': 'sink'}
    def __init__(self, model=None, sink=None, **unknown_fields):
        '''
        model : str
        sink : str
        '''
        self.model = model
        self.sink = sink



class LogForwardingSetLastSentParam(Type):
    _toSchema = {'logforwardingid': 'LogForwardingID', 'record_id': 'record-id', 'record_timestamp': 'record-timestamp'}
    _toPy = {'LogForwardingID': 'logforwardingid', 'record-id': 'record_id', 'record-timestamp': 'record_timestamp'}
    def __init__(self, logforwardingid=None, record_id=None, record_timestamp=None, **unknown_fields):
        '''
        logforwardingid : LogForwardingID
        record_id : int
        record_timestamp : int
        '''
        self.logforwardingid = LogForwardingID.from_json(logforwardingid) if logforwardingid else None
        self.record_id = record_id
        self.record_timestamp = record_timestamp



class LogForwardingSetLastSentParams(Type):
    _toSchema = {'params': 'params'}
    _toPy = {'params': 'params'}
    def __init__(self, params=None, **unknown_fields):
        '''
        params : typing.Sequence<+T_co>[~LogForwardingSetLastSentParam]<~LogForwardingSetLastSentParam>
        '''
        self.params = [LogForwardingSetLastSentParam.from_json(o) for o in params or []]



class LookUpArg(Type):
    _toSchema = {'id_': 'id', 'name': 'name'}
    _toPy = {'id': 'id_', 'name': 'name'}
    def __init__(self, id_=None, name=None, **unknown_fields):
        '''
        id_ : str
        name : str
        '''
        self.id_ = id_
        self.name = name



class LookUpArgs(Type):
    _toSchema = {'args': 'args'}
    _toPy = {'args': 'args'}
    def __init__(self, args=None, **unknown_fields):
        '''
        args : typing.Sequence<+T_co>[~LookUpArg]<~LookUpArg>
        '''
        self.args = [LookUpArg.from_json(o) for o in args or []]



class LookUpPayloadArg(Type):
    _toSchema = {'id_': 'id', 'name': 'name'}
    _toPy = {'id': 'id_', 'name': 'name'}
    def __init__(self, id_=None, name=None, **unknown_fields):
        '''
        id_ : str
        name : str
        '''
        self.id_ = id_
        self.name = name



class LookUpPayloadArgs(Type):
    _toSchema = {'args': 'args'}
    _toPy = {'args': 'args'}
    def __init__(self, args=None, **unknown_fields):
        '''
        args : typing.Sequence<+T_co>[~LookUpPayloadArg]<~LookUpPayloadArg>
        '''
        self.args = [LookUpPayloadArg.from_json(o) for o in args or []]



class Macaroon(Type):
    _toSchema = {}
    _toPy = {}
    def __init__(self, **unknown_fields):
        '''

        '''
        pass



class MachineAddresses(Type):
    _toSchema = {'addresses': 'addresses', 'tag': 'tag'}
    _toPy = {'addresses': 'addresses', 'tag': 'tag'}
    def __init__(self, addresses=None, tag=None, **unknown_fields):
        '''
        addresses : typing.Sequence<+T_co>[~Address]<~Address>
        tag : str
        '''
        self.addresses = [Address.from_json(o) for o in addresses or []]
        self.tag = tag



class MachineAddressesResult(Type):
    _toSchema = {'addresses': 'addresses', 'error': 'error'}
    _toPy = {'addresses': 'addresses', 'error': 'error'}
    def __init__(self, addresses=None, error=None, **unknown_fields):
        '''
        addresses : typing.Sequence<+T_co>[~Address]<~Address>
        error : Error
        '''
        self.addresses = [Address.from_json(o) for o in addresses or []]
        self.error = Error.from_json(error) if error else None



class MachineAddressesResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~MachineAddressesResult]<~MachineAddressesResult>
        '''
        self.results = [MachineAddressesResult.from_json(o) for o in results or []]



class MachineBlockDevices(Type):
    _toSchema = {'block_devices': 'block-devices', 'machine': 'machine'}
    _toPy = {'block-devices': 'block_devices', 'machine': 'machine'}
    def __init__(self, block_devices=None, machine=None, **unknown_fields):
        '''
        block_devices : typing.Sequence<+T_co>[~BlockDevice]<~BlockDevice>
        machine : str
        '''
        self.block_devices = [BlockDevice.from_json(o) for o in block_devices or []]
        self.machine = machine



class MachineContainers(Type):
    _toSchema = {'container_types': 'container-types', 'machine_tag': 'machine-tag'}
    _toPy = {'container-types': 'container_types', 'machine-tag': 'machine_tag'}
    def __init__(self, container_types=None, machine_tag=None, **unknown_fields):
        '''
        container_types : typing.Sequence<+T_co>[str]
        machine_tag : str
        '''
        self.container_types = container_types
        self.machine_tag = machine_tag



class MachineContainersParams(Type):
    _toSchema = {'params': 'params'}
    _toPy = {'params': 'params'}
    def __init__(self, params=None, **unknown_fields):
        '''
        params : typing.Sequence<+T_co>[~MachineContainers]<~MachineContainers>
        '''
        self.params = [MachineContainers.from_json(o) for o in params or []]



class MachineHardware(Type):
    _toSchema = {'arch': 'arch', 'availability_zone': 'availability-zone', 'cores': 'cores', 'cpu_power': 'cpu-power', 'mem': 'mem', 'root_disk': 'root-disk', 'tags': 'tags'}
    _toPy = {'arch': 'arch', 'availability-zone': 'availability_zone', 'cores': 'cores', 'cpu-power': 'cpu_power', 'mem': 'mem', 'root-disk': 'root_disk', 'tags': 'tags'}
    def __init__(self, arch=None, availability_zone=None, cores=None, cpu_power=None, mem=None, root_disk=None, tags=None, **unknown_fields):
        '''
        arch : str
        availability_zone : str
        cores : int
        cpu_power : int
        mem : int
        root_disk : int
        tags : typing.Sequence<+T_co>[str]
        '''
        self.arch = arch
        self.availability_zone = availability_zone
        self.cores = cores
        self.cpu_power = cpu_power
        self.mem = mem
        self.root_disk = root_disk
        self.tags = tags



class MachineNetworkConfigResult(Type):
    _toSchema = {'error': 'error', 'info': 'info'}
    _toPy = {'error': 'error', 'info': 'info'}
    def __init__(self, error=None, info=None, **unknown_fields):
        '''
        error : Error
        info : typing.Sequence<+T_co>[~NetworkConfig]<~NetworkConfig>
        '''
        self.error = Error.from_json(error) if error else None
        self.info = [NetworkConfig.from_json(o) for o in info or []]



class MachineNetworkConfigResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~MachineNetworkConfigResult]<~MachineNetworkConfigResult>
        '''
        self.results = [MachineNetworkConfigResult.from_json(o) for o in results or []]



class MachinePortRange(Type):
    _toSchema = {'port_range': 'port-range', 'relation_tag': 'relation-tag', 'unit_tag': 'unit-tag'}
    _toPy = {'port-range': 'port_range', 'relation-tag': 'relation_tag', 'unit-tag': 'unit_tag'}
    def __init__(self, port_range=None, relation_tag=None, unit_tag=None, **unknown_fields):
        '''
        port_range : PortRange
        relation_tag : str
        unit_tag : str
        '''
        self.port_range = PortRange.from_json(port_range) if port_range else None
        self.relation_tag = relation_tag
        self.unit_tag = unit_tag



class MachinePorts(Type):
    _toSchema = {'machine_tag': 'machine-tag', 'subnet_tag': 'subnet-tag'}
    _toPy = {'machine-tag': 'machine_tag', 'subnet-tag': 'subnet_tag'}
    def __init__(self, machine_tag=None, subnet_tag=None, **unknown_fields):
        '''
        machine_tag : str
        subnet_tag : str
        '''
        self.machine_tag = machine_tag
        self.subnet_tag = subnet_tag



class MachinePortsParams(Type):
    _toSchema = {'params': 'params'}
    _toPy = {'params': 'params'}
    def __init__(self, params=None, **unknown_fields):
        '''
        params : typing.Sequence<+T_co>[~MachinePorts]<~MachinePorts>
        '''
        self.params = [MachinePorts.from_json(o) for o in params or []]



class MachinePortsResult(Type):
    _toSchema = {'error': 'error', 'ports': 'ports'}
    _toPy = {'error': 'error', 'ports': 'ports'}
    def __init__(self, error=None, ports=None, **unknown_fields):
        '''
        error : Error
        ports : typing.Sequence<+T_co>[~MachinePortRange]<~MachinePortRange>
        '''
        self.error = Error.from_json(error) if error else None
        self.ports = [MachinePortRange.from_json(o) for o in ports or []]



class MachinePortsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~MachinePortsResult]<~MachinePortsResult>
        '''
        self.results = [MachinePortsResult.from_json(o) for o in results or []]



class MachineStatus(Type):
    _toSchema = {'agent_status': 'agent-status', 'containers': 'containers', 'dns_name': 'dns-name', 'hardware': 'hardware', 'has_vote': 'has-vote', 'id_': 'id', 'instance_id': 'instance-id', 'instance_status': 'instance-status', 'ip_addresses': 'ip-addresses', 'jobs': 'jobs', 'series': 'series', 'wants_vote': 'wants-vote'}
    _toPy = {'agent-status': 'agent_status', 'containers': 'containers', 'dns-name': 'dns_name', 'hardware': 'hardware', 'has-vote': 'has_vote', 'id': 'id_', 'instance-id': 'instance_id', 'instance-status': 'instance_status', 'ip-addresses': 'ip_addresses', 'jobs': 'jobs', 'series': 'series', 'wants-vote': 'wants_vote'}
    def __init__(self, agent_status=None, containers=None, dns_name=None, hardware=None, has_vote=None, id_=None, instance_id=None, instance_status=None, ip_addresses=None, jobs=None, series=None, wants_vote=None, **unknown_fields):
        '''
        agent_status : DetailedStatus
        containers : typing.Mapping<~KT, +VT_co>[str, ~MachineStatus]<~MachineStatus>
        dns_name : str
        hardware : str
        has_vote : bool
        id_ : str
        instance_id : str
        instance_status : DetailedStatus
        ip_addresses : typing.Sequence<+T_co>[str]
        jobs : typing.Sequence<+T_co>[str]
        series : str
        wants_vote : bool
        '''
        self.agent_status = DetailedStatus.from_json(agent_status) if agent_status else None
        self.containers = containers
        self.dns_name = dns_name
        self.hardware = hardware
        self.has_vote = has_vote
        self.id_ = id_
        self.instance_id = instance_id
        self.instance_status = DetailedStatus.from_json(instance_status) if instance_status else None
        self.ip_addresses = ip_addresses
        self.jobs = jobs
        self.series = series
        self.wants_vote = wants_vote



class MachineStorageId(Type):
    _toSchema = {'attachment_tag': 'attachment-tag', 'machine_tag': 'machine-tag'}
    _toPy = {'attachment-tag': 'attachment_tag', 'machine-tag': 'machine_tag'}
    def __init__(self, attachment_tag=None, machine_tag=None, **unknown_fields):
        '''
        attachment_tag : str
        machine_tag : str
        '''
        self.attachment_tag = attachment_tag
        self.machine_tag = machine_tag



class MachineStorageIds(Type):
    _toSchema = {'ids': 'ids'}
    _toPy = {'ids': 'ids'}
    def __init__(self, ids=None, **unknown_fields):
        '''
        ids : typing.Sequence<+T_co>[~MachineStorageId]<~MachineStorageId>
        '''
        self.ids = [MachineStorageId.from_json(o) for o in ids or []]



class MachineStorageIdsWatchResult(Type):
    _toSchema = {'changes': 'changes', 'error': 'error', 'watcher_id': 'watcher-id'}
    _toPy = {'changes': 'changes', 'error': 'error', 'watcher-id': 'watcher_id'}
    def __init__(self, changes=None, error=None, watcher_id=None, **unknown_fields):
        '''
        changes : typing.Sequence<+T_co>[~MachineStorageId]<~MachineStorageId>
        error : Error
        watcher_id : str
        '''
        self.changes = [MachineStorageId.from_json(o) for o in changes or []]
        self.error = Error.from_json(error) if error else None
        self.watcher_id = watcher_id



class MachineStorageIdsWatchResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~MachineStorageIdsWatchResult]<~MachineStorageIdsWatchResult>
        '''
        self.results = [MachineStorageIdsWatchResult.from_json(o) for o in results or []]



class MapResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        self.error = Error.from_json(error) if error else None
        self.result = result



class MapResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~MapResult]<~MapResult>
        '''
        self.results = [MapResult.from_json(o) for o in results or []]



class MasterMigrationStatus(Type):
    _toSchema = {'migration_id': 'migration-id', 'phase': 'phase', 'phase_changed_time': 'phase-changed-time', 'spec': 'spec'}
    _toPy = {'migration-id': 'migration_id', 'phase': 'phase', 'phase-changed-time': 'phase_changed_time', 'spec': 'spec'}
    def __init__(self, migration_id=None, phase=None, phase_changed_time=None, spec=None, **unknown_fields):
        '''
        migration_id : str
        phase : str
        phase_changed_time : str
        spec : MigrationSpec
        '''
        self.migration_id = migration_id
        self.phase = phase
        self.phase_changed_time = phase_changed_time
        self.spec = MigrationSpec.from_json(spec) if spec else None



class Member(Type):
    _toSchema = {'address': 'Address', 'arbiter': 'Arbiter', 'buildindexes': 'BuildIndexes', 'hidden': 'Hidden', 'id_': 'Id', 'priority': 'Priority', 'slavedelay': 'SlaveDelay', 'tags': 'Tags', 'votes': 'Votes'}
    _toPy = {'Address': 'address', 'Arbiter': 'arbiter', 'BuildIndexes': 'buildindexes', 'Hidden': 'hidden', 'Id': 'id_', 'Priority': 'priority', 'SlaveDelay': 'slavedelay', 'Tags': 'tags', 'Votes': 'votes'}
    def __init__(self, address=None, arbiter=None, buildindexes=None, hidden=None, id_=None, priority=None, slavedelay=None, tags=None, votes=None, **unknown_fields):
        '''
        address : str
        arbiter : bool
        buildindexes : bool
        hidden : bool
        id_ : int
        priority : float
        slavedelay : int
        tags : typing.Mapping<~KT, +VT_co>[str, str]
        votes : int
        '''
        self.address = address
        self.arbiter = arbiter
        self.buildindexes = buildindexes
        self.hidden = hidden
        self.id_ = id_
        self.priority = priority
        self.slavedelay = slavedelay
        self.tags = tags
        self.votes = votes



class MergeLeadershipSettingsBulkParams(Type):
    _toSchema = {'params': 'params'}
    _toPy = {'params': 'params'}
    def __init__(self, params=None, **unknown_fields):
        '''
        params : typing.Sequence<+T_co>[~MergeLeadershipSettingsParam]<~MergeLeadershipSettingsParam>
        '''
        self.params = [MergeLeadershipSettingsParam.from_json(o) for o in params or []]



class MergeLeadershipSettingsParam(Type):
    _toSchema = {'application_tag': 'application-tag', 'settings': 'settings'}
    _toPy = {'application-tag': 'application_tag', 'settings': 'settings'}
    def __init__(self, application_tag=None, settings=None, **unknown_fields):
        '''
        application_tag : str
        settings : typing.Mapping<~KT, +VT_co>[str, str]
        '''
        self.application_tag = application_tag
        self.settings = settings



class MetadataImageIds(Type):
    _toSchema = {'image_ids': 'image-ids'}
    _toPy = {'image-ids': 'image_ids'}
    def __init__(self, image_ids=None, **unknown_fields):
        '''
        image_ids : typing.Sequence<+T_co>[str]
        '''
        self.image_ids = image_ids



class MetadataSaveParams(Type):
    _toSchema = {'metadata': 'metadata'}
    _toPy = {'metadata': 'metadata'}
    def __init__(self, metadata=None, **unknown_fields):
        '''
        metadata : typing.Sequence<+T_co>[~CloudImageMetadataList]<~CloudImageMetadataList>
        '''
        self.metadata = [CloudImageMetadataList.from_json(o) for o in metadata or []]



class MeterStatus(Type):
    _toSchema = {'color': 'color', 'message': 'message'}
    _toPy = {'color': 'color', 'message': 'message'}
    def __init__(self, color=None, message=None, **unknown_fields):
        '''
        color : str
        message : str
        '''
        self.color = color
        self.message = message



class MeterStatusParam(Type):
    _toSchema = {'code': 'code', 'info': 'info', 'tag': 'tag'}
    _toPy = {'code': 'code', 'info': 'info', 'tag': 'tag'}
    def __init__(self, code=None, info=None, tag=None, **unknown_fields):
        '''
        code : str
        info : str
        tag : str
        '''
        self.code = code
        self.info = info
        self.tag = tag



class MeterStatusParams(Type):
    _toSchema = {'statues': 'statues'}
    _toPy = {'statues': 'statues'}
    def __init__(self, statues=None, **unknown_fields):
        '''
        statues : typing.Sequence<+T_co>[~MeterStatusParam]<~MeterStatusParam>
        '''
        self.statues = [MeterStatusParam.from_json(o) for o in statues or []]



class MeterStatusResult(Type):
    _toSchema = {'code': 'code', 'error': 'error', 'info': 'info'}
    _toPy = {'code': 'code', 'error': 'error', 'info': 'info'}
    def __init__(self, code=None, error=None, info=None, **unknown_fields):
        '''
        code : str
        error : Error
        info : str
        '''
        self.code = code
        self.error = Error.from_json(error) if error else None
        self.info = info



class MeterStatusResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~MeterStatusResult]<~MeterStatusResult>
        '''
        self.results = [MeterStatusResult.from_json(o) for o in results or []]



class Metric(Type):
    _toSchema = {'key': 'key', 'time': 'time', 'value': 'value'}
    _toPy = {'key': 'key', 'time': 'time', 'value': 'value'}
    def __init__(self, key=None, time=None, value=None, **unknown_fields):
        '''
        key : str
        time : str
        value : str
        '''
        self.key = key
        self.time = time
        self.value = value



class MetricBatch(Type):
    _toSchema = {'charm_url': 'charm-url', 'created': 'created', 'metrics': 'metrics', 'uuid': 'uuid'}
    _toPy = {'charm-url': 'charm_url', 'created': 'created', 'metrics': 'metrics', 'uuid': 'uuid'}
    def __init__(self, charm_url=None, created=None, metrics=None, uuid=None, **unknown_fields):
        '''
        charm_url : str
        created : str
        metrics : typing.Sequence<+T_co>[~Metric]<~Metric>
        uuid : str
        '''
        self.charm_url = charm_url
        self.created = created
        self.metrics = [Metric.from_json(o) for o in metrics or []]
        self.uuid = uuid



class MetricBatchParam(Type):
    _toSchema = {'batch': 'batch', 'tag': 'tag'}
    _toPy = {'batch': 'batch', 'tag': 'tag'}
    def __init__(self, batch=None, tag=None, **unknown_fields):
        '''
        batch : MetricBatch
        tag : str
        '''
        self.batch = MetricBatch.from_json(batch) if batch else None
        self.tag = tag



class MetricBatchParams(Type):
    _toSchema = {'batches': 'batches'}
    _toPy = {'batches': 'batches'}
    def __init__(self, batches=None, **unknown_fields):
        '''
        batches : typing.Sequence<+T_co>[~MetricBatchParam]<~MetricBatchParam>
        '''
        self.batches = [MetricBatchParam.from_json(o) for o in batches or []]



class MetricResult(Type):
    _toSchema = {'key': 'key', 'time': 'time', 'unit': 'unit', 'value': 'value'}
    _toPy = {'key': 'key', 'time': 'time', 'unit': 'unit', 'value': 'value'}
    def __init__(self, key=None, time=None, unit=None, value=None, **unknown_fields):
        '''
        key : str
        time : str
        unit : str
        value : str
        '''
        self.key = key
        self.time = time
        self.unit = unit
        self.value = value



class MetricResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~EntityMetrics]<~EntityMetrics>
        '''
        self.results = [EntityMetrics.from_json(o) for o in results or []]



class MigrationModelInfo(Type):
    _toSchema = {'agent_version': 'agent-version', 'name': 'name', 'owner_tag': 'owner-tag', 'uuid': 'uuid'}
    _toPy = {'agent-version': 'agent_version', 'name': 'name', 'owner-tag': 'owner_tag', 'uuid': 'uuid'}
    def __init__(self, agent_version=None, name=None, owner_tag=None, uuid=None, **unknown_fields):
        '''
        agent_version : Number
        name : str
        owner_tag : str
        uuid : str
        '''
        self.agent_version = Number.from_json(agent_version) if agent_version else None
        self.name = name
        self.owner_tag = owner_tag
        self.uuid = uuid



class MigrationSpec(Type):
    _toSchema = {'external_control': 'external-control', 'model_tag': 'model-tag', 'skip_initial_prechecks': 'skip-initial-prechecks', 'target_info': 'target-info'}
    _toPy = {'external-control': 'external_control', 'model-tag': 'model_tag', 'skip-initial-prechecks': 'skip_initial_prechecks', 'target-info': 'target_info'}
    def __init__(self, external_control=None, model_tag=None, skip_initial_prechecks=None, target_info=None, **unknown_fields):
        '''
        external_control : bool
        model_tag : str
        skip_initial_prechecks : bool
        target_info : MigrationTargetInfo
        '''
        self.external_control = external_control
        self.model_tag = model_tag
        self.skip_initial_prechecks = skip_initial_prechecks
        self.target_info = MigrationTargetInfo.from_json(target_info) if target_info else None



class MigrationStatus(Type):
    _toSchema = {'attempt': 'attempt', 'external_control': 'external-control', 'migration_id': 'migration-id', 'phase': 'phase', 'source_api_addrs': 'source-api-addrs', 'source_ca_cert': 'source-ca-cert', 'target_api_addrs': 'target-api-addrs', 'target_ca_cert': 'target-ca-cert'}
    _toPy = {'attempt': 'attempt', 'external-control': 'external_control', 'migration-id': 'migration_id', 'phase': 'phase', 'source-api-addrs': 'source_api_addrs', 'source-ca-cert': 'source_ca_cert', 'target-api-addrs': 'target_api_addrs', 'target-ca-cert': 'target_ca_cert'}
    def __init__(self, attempt=None, external_control=None, migration_id=None, phase=None, source_api_addrs=None, source_ca_cert=None, target_api_addrs=None, target_ca_cert=None, **unknown_fields):
        '''
        attempt : int
        external_control : bool
        migration_id : str
        phase : str
        source_api_addrs : typing.Sequence<+T_co>[str]
        source_ca_cert : str
        target_api_addrs : typing.Sequence<+T_co>[str]
        target_ca_cert : str
        '''
        self.attempt = attempt
        self.external_control = external_control
        self.migration_id = migration_id
        self.phase = phase
        self.source_api_addrs = source_api_addrs
        self.source_ca_cert = source_ca_cert
        self.target_api_addrs = target_api_addrs
        self.target_ca_cert = target_ca_cert



class MigrationTargetInfo(Type):
    _toSchema = {'addrs': 'addrs', 'auth_tag': 'auth-tag', 'ca_cert': 'ca-cert', 'controller_tag': 'controller-tag', 'macaroons': 'macaroons', 'password': 'password'}
    _toPy = {'addrs': 'addrs', 'auth-tag': 'auth_tag', 'ca-cert': 'ca_cert', 'controller-tag': 'controller_tag', 'macaroons': 'macaroons', 'password': 'password'}
    def __init__(self, addrs=None, auth_tag=None, ca_cert=None, controller_tag=None, macaroons=None, password=None, **unknown_fields):
        '''
        addrs : typing.Sequence<+T_co>[str]
        auth_tag : str
        ca_cert : str
        controller_tag : str
        macaroons : str
        password : str
        '''
        self.addrs = addrs
        self.auth_tag = auth_tag
        self.ca_cert = ca_cert
        self.controller_tag = controller_tag
        self.macaroons = macaroons
        self.password = password



class MinionReport(Type):
    _toSchema = {'migration_id': 'migration-id', 'phase': 'phase', 'success': 'success'}
    _toPy = {'migration-id': 'migration_id', 'phase': 'phase', 'success': 'success'}
    def __init__(self, migration_id=None, phase=None, success=None, **unknown_fields):
        '''
        migration_id : str
        phase : str
        success : bool
        '''
        self.migration_id = migration_id
        self.phase = phase
        self.success = success



class MinionReports(Type):
    _toSchema = {'failed': 'failed', 'migration_id': 'migration-id', 'phase': 'phase', 'success_count': 'success-count', 'unknown_count': 'unknown-count', 'unknown_sample': 'unknown-sample'}
    _toPy = {'failed': 'failed', 'migration-id': 'migration_id', 'phase': 'phase', 'success-count': 'success_count', 'unknown-count': 'unknown_count', 'unknown-sample': 'unknown_sample'}
    def __init__(self, failed=None, migration_id=None, phase=None, success_count=None, unknown_count=None, unknown_sample=None, **unknown_fields):
        '''
        failed : typing.Sequence<+T_co>[str]
        migration_id : str
        phase : str
        success_count : int
        unknown_count : int
        unknown_sample : typing.Sequence<+T_co>[str]
        '''
        self.failed = failed
        self.migration_id = migration_id
        self.phase = phase
        self.success_count = success_count
        self.unknown_count = unknown_count
        self.unknown_sample = unknown_sample



class Model(Type):
    _toSchema = {'name': 'name', 'owner_tag': 'owner-tag', 'uuid': 'uuid'}
    _toPy = {'name': 'name', 'owner-tag': 'owner_tag', 'uuid': 'uuid'}
    def __init__(self, name=None, owner_tag=None, uuid=None, **unknown_fields):
        '''
        name : str
        owner_tag : str
        uuid : str
        '''
        self.name = name
        self.owner_tag = owner_tag
        self.uuid = uuid



class ModelArgs(Type):
    _toSchema = {'model_tag': 'model-tag'}
    _toPy = {'model-tag': 'model_tag'}
    def __init__(self, model_tag=None, **unknown_fields):
        '''
        model_tag : str
        '''
        self.model_tag = model_tag



class ModelBlockInfo(Type):
    _toSchema = {'blocks': 'blocks', 'model_uuid': 'model-uuid', 'name': 'name', 'owner_tag': 'owner-tag'}
    _toPy = {'blocks': 'blocks', 'model-uuid': 'model_uuid', 'name': 'name', 'owner-tag': 'owner_tag'}
    def __init__(self, blocks=None, model_uuid=None, name=None, owner_tag=None, **unknown_fields):
        '''
        blocks : typing.Sequence<+T_co>[str]
        model_uuid : str
        name : str
        owner_tag : str
        '''
        self.blocks = blocks
        self.model_uuid = model_uuid
        self.name = name
        self.owner_tag = owner_tag



class ModelBlockInfoList(Type):
    _toSchema = {'models': 'models'}
    _toPy = {'models': 'models'}
    def __init__(self, models=None, **unknown_fields):
        '''
        models : typing.Sequence<+T_co>[~ModelBlockInfo]<~ModelBlockInfo>
        '''
        self.models = [ModelBlockInfo.from_json(o) for o in models or []]



class ModelConfigResult(Type):
    _toSchema = {'config': 'config'}
    _toPy = {'config': 'config'}
    def __init__(self, config=None, **unknown_fields):
        '''
        config : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        self.config = config



class ModelConfigResults(Type):
    _toSchema = {'config': 'config'}
    _toPy = {'config': 'config'}
    def __init__(self, config=None, **unknown_fields):
        '''
        config : typing.Mapping<~KT, +VT_co>[str, ~ConfigValue]<~ConfigValue>
        '''
        self.config = config



class ModelCreateArgs(Type):
    _toSchema = {'cloud_tag': 'cloud-tag', 'config': 'config', 'credential': 'credential', 'name': 'name', 'owner_tag': 'owner-tag', 'region': 'region'}
    _toPy = {'cloud-tag': 'cloud_tag', 'config': 'config', 'credential': 'credential', 'name': 'name', 'owner-tag': 'owner_tag', 'region': 'region'}
    def __init__(self, cloud_tag=None, config=None, credential=None, name=None, owner_tag=None, region=None, **unknown_fields):
        '''
        cloud_tag : str
        config : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        credential : str
        name : str
        owner_tag : str
        region : str
        '''
        self.cloud_tag = cloud_tag
        self.config = config
        self.credential = credential
        self.name = name
        self.owner_tag = owner_tag
        self.region = region



class ModelDefaultValues(Type):
    _toSchema = {'cloud_region': 'cloud-region', 'cloud_tag': 'cloud-tag', 'config': 'config'}
    _toPy = {'cloud-region': 'cloud_region', 'cloud-tag': 'cloud_tag', 'config': 'config'}
    def __init__(self, cloud_region=None, cloud_tag=None, config=None, **unknown_fields):
        '''
        cloud_region : str
        cloud_tag : str
        config : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        self.cloud_region = cloud_region
        self.cloud_tag = cloud_tag
        self.config = config



class ModelDefaults(Type):
    _toSchema = {'controller': 'controller', 'default': 'default', 'regions': 'regions'}
    _toPy = {'controller': 'controller', 'default': 'default', 'regions': 'regions'}
    def __init__(self, controller=None, default=None, regions=None, **unknown_fields):
        '''
        controller : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        default : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        regions : typing.Sequence<+T_co>[~RegionDefaults]<~RegionDefaults>
        '''
        self.controller = controller
        self.default = default
        self.regions = [RegionDefaults.from_json(o) for o in regions or []]



class ModelDefaultsResult(Type):
    _toSchema = {'config': 'config'}
    _toPy = {'config': 'config'}
    def __init__(self, config=None, **unknown_fields):
        '''
        config : typing.Mapping<~KT, +VT_co>[str, ~ModelDefaults]<~ModelDefaults>
        '''
        self.config = config



class ModelInfo(Type):
    _toSchema = {'agent_version': 'agent-version', 'cloud_credential_tag': 'cloud-credential-tag', 'cloud_region': 'cloud-region', 'cloud_tag': 'cloud-tag', 'controller_uuid': 'controller-uuid', 'default_series': 'default-series', 'life': 'life', 'machines': 'machines', 'migration': 'migration', 'name': 'name', 'owner_tag': 'owner-tag', 'provider_type': 'provider-type', 'sla': 'sla', 'status': 'status', 'users': 'users', 'uuid': 'uuid'}
    _toPy = {'agent-version': 'agent_version', 'cloud-credential-tag': 'cloud_credential_tag', 'cloud-region': 'cloud_region', 'cloud-tag': 'cloud_tag', 'controller-uuid': 'controller_uuid', 'default-series': 'default_series', 'life': 'life', 'machines': 'machines', 'migration': 'migration', 'name': 'name', 'owner-tag': 'owner_tag', 'provider-type': 'provider_type', 'sla': 'sla', 'status': 'status', 'users': 'users', 'uuid': 'uuid'}
    def __init__(self, agent_version=None, cloud_credential_tag=None, cloud_region=None, cloud_tag=None, controller_uuid=None, default_series=None, life=None, machines=None, migration=None, name=None, owner_tag=None, provider_type=None, sla=None, status=None, users=None, uuid=None, **unknown_fields):
        '''
        agent_version : Number
        cloud_credential_tag : str
        cloud_region : str
        cloud_tag : str
        controller_uuid : str
        default_series : str
        life : str
        machines : typing.Sequence<+T_co>[~ModelMachineInfo]<~ModelMachineInfo>
        migration : ModelMigrationStatus
        name : str
        owner_tag : str
        provider_type : str
        sla : ModelSLAInfo
        status : EntityStatus
        users : typing.Sequence<+T_co>[~ModelUserInfo]<~ModelUserInfo>
        uuid : str
        '''
        self.agent_version = Number.from_json(agent_version) if agent_version else None
        self.cloud_credential_tag = cloud_credential_tag
        self.cloud_region = cloud_region
        self.cloud_tag = cloud_tag
        self.controller_uuid = controller_uuid
        self.default_series = default_series
        self.life = life
        self.machines = [ModelMachineInfo.from_json(o) for o in machines or []]
        self.migration = ModelMigrationStatus.from_json(migration) if migration else None
        self.name = name
        self.owner_tag = owner_tag
        self.provider_type = provider_type
        self.sla = ModelSLAInfo.from_json(sla) if sla else None
        self.status = EntityStatus.from_json(status) if status else None
        self.users = [ModelUserInfo.from_json(o) for o in users or []]
        self.uuid = uuid



class ModelInfoResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : ModelInfo
        '''
        self.error = Error.from_json(error) if error else None
        self.result = ModelInfo.from_json(result) if result else None



class ModelInfoResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~ModelInfoResult]<~ModelInfoResult>
        '''
        self.results = [ModelInfoResult.from_json(o) for o in results or []]



class ModelInstanceTypesConstraint(Type):
    _toSchema = {'value': 'value'}
    _toPy = {'value': 'value'}
    def __init__(self, value=None, **unknown_fields):
        '''
        value : Value
        '''
        self.value = Value.from_json(value) if value else None



class ModelInstanceTypesConstraints(Type):
    _toSchema = {'constraints': 'constraints'}
    _toPy = {'constraints': 'constraints'}
    def __init__(self, constraints=None, **unknown_fields):
        '''
        constraints : typing.Sequence<+T_co>[~ModelInstanceTypesConstraint]<~ModelInstanceTypesConstraint>
        '''
        self.constraints = [ModelInstanceTypesConstraint.from_json(o) for o in constraints or []]



class ModelMachineInfo(Type):
    _toSchema = {'hardware': 'hardware', 'has_vote': 'has-vote', 'id_': 'id', 'instance_id': 'instance-id', 'status': 'status', 'wants_vote': 'wants-vote'}
    _toPy = {'hardware': 'hardware', 'has-vote': 'has_vote', 'id': 'id_', 'instance-id': 'instance_id', 'status': 'status', 'wants-vote': 'wants_vote'}
    def __init__(self, hardware=None, has_vote=None, id_=None, instance_id=None, status=None, wants_vote=None, **unknown_fields):
        '''
        hardware : MachineHardware
        has_vote : bool
        id_ : str
        instance_id : str
        status : str
        wants_vote : bool
        '''
        self.hardware = MachineHardware.from_json(hardware) if hardware else None
        self.has_vote = has_vote
        self.id_ = id_
        self.instance_id = instance_id
        self.status = status
        self.wants_vote = wants_vote



class ModelMigrationStatus(Type):
    _toSchema = {'end': 'end', 'start': 'start', 'status': 'status'}
    _toPy = {'end': 'end', 'start': 'start', 'status': 'status'}
    def __init__(self, end=None, start=None, status=None, **unknown_fields):
        '''
        end : str
        start : str
        status : str
        '''
        self.end = end
        self.start = start
        self.status = status



class ModelResult(Type):
    _toSchema = {'error': 'error', 'name': 'name', 'uuid': 'uuid'}
    _toPy = {'error': 'error', 'name': 'name', 'uuid': 'uuid'}
    def __init__(self, error=None, name=None, uuid=None, **unknown_fields):
        '''
        error : Error
        name : str
        uuid : str
        '''
        self.error = Error.from_json(error) if error else None
        self.name = name
        self.uuid = uuid



class ModelSLA(Type):
    _toSchema = {'creds': 'creds', 'level': 'level'}
    _toPy = {'creds': 'creds', 'level': 'level'}
    def __init__(self, creds=None, level=None, **unknown_fields):
        '''
        creds : typing.Sequence<+T_co>[int]
        level : str
        '''
        self.creds = creds
        self.level = level



class ModelSLAInfo(Type):
    _toSchema = {'level': 'level', 'owner': 'owner'}
    _toPy = {'level': 'level', 'owner': 'owner'}
    def __init__(self, level=None, owner=None, **unknown_fields):
        '''
        level : str
        owner : str
        '''
        self.level = level
        self.owner = owner



class ModelSet(Type):
    _toSchema = {'config': 'config'}
    _toPy = {'config': 'config'}
    def __init__(self, config=None, **unknown_fields):
        '''
        config : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        self.config = config



class ModelStatus(Type):
    _toSchema = {'application_count': 'application-count', 'hosted_machine_count': 'hosted-machine-count', 'life': 'life', 'machines': 'machines', 'model_tag': 'model-tag', 'owner_tag': 'owner-tag'}
    _toPy = {'application-count': 'application_count', 'hosted-machine-count': 'hosted_machine_count', 'life': 'life', 'machines': 'machines', 'model-tag': 'model_tag', 'owner-tag': 'owner_tag'}
    def __init__(self, application_count=None, hosted_machine_count=None, life=None, machines=None, model_tag=None, owner_tag=None, **unknown_fields):
        '''
        application_count : int
        hosted_machine_count : int
        life : str
        machines : typing.Sequence<+T_co>[~ModelMachineInfo]<~ModelMachineInfo>
        model_tag : str
        owner_tag : str
        '''
        self.application_count = application_count
        self.hosted_machine_count = hosted_machine_count
        self.life = life
        self.machines = [ModelMachineInfo.from_json(o) for o in machines or []]
        self.model_tag = model_tag
        self.owner_tag = owner_tag



class ModelStatusInfo(Type):
    _toSchema = {'available_version': 'available-version', 'cloud_tag': 'cloud-tag', 'meter_status': 'meter-status', 'model_status': 'model-status', 'name': 'name', 'region': 'region', 'sla': 'sla', 'version': 'version'}
    _toPy = {'available-version': 'available_version', 'cloud-tag': 'cloud_tag', 'meter-status': 'meter_status', 'model-status': 'model_status', 'name': 'name', 'region': 'region', 'sla': 'sla', 'version': 'version'}
    def __init__(self, available_version=None, cloud_tag=None, meter_status=None, model_status=None, name=None, region=None, sla=None, version=None, **unknown_fields):
        '''
        available_version : str
        cloud_tag : str
        meter_status : MeterStatus
        model_status : DetailedStatus
        name : str
        region : str
        sla : str
        version : str
        '''
        self.available_version = available_version
        self.cloud_tag = cloud_tag
        self.meter_status = MeterStatus.from_json(meter_status) if meter_status else None
        self.model_status = DetailedStatus.from_json(model_status) if model_status else None
        self.name = name
        self.region = region
        self.sla = sla
        self.version = version



class ModelStatusResults(Type):
    _toSchema = {'models': 'models'}
    _toPy = {'models': 'models'}
    def __init__(self, models=None, **unknown_fields):
        '''
        models : typing.Sequence<+T_co>[~ModelStatus]<~ModelStatus>
        '''
        self.models = [ModelStatus.from_json(o) for o in models or []]



class ModelTag(Type):
    _toSchema = {}
    _toPy = {}
    def __init__(self, **unknown_fields):
        '''

        '''
        pass



class ModelUnset(Type):
    _toSchema = {'keys': 'keys'}
    _toPy = {'keys': 'keys'}
    def __init__(self, keys=None, **unknown_fields):
        '''
        keys : typing.Sequence<+T_co>[str]
        '''
        self.keys = keys



class ModelUnsetKeys(Type):
    _toSchema = {'cloud_region': 'cloud-region', 'cloud_tag': 'cloud-tag', 'keys': 'keys'}
    _toPy = {'cloud-region': 'cloud_region', 'cloud-tag': 'cloud_tag', 'keys': 'keys'}
    def __init__(self, cloud_region=None, cloud_tag=None, keys=None, **unknown_fields):
        '''
        cloud_region : str
        cloud_tag : str
        keys : typing.Sequence<+T_co>[str]
        '''
        self.cloud_region = cloud_region
        self.cloud_tag = cloud_tag
        self.keys = keys



class ModelUserInfo(Type):
    _toSchema = {'access': 'access', 'display_name': 'display-name', 'last_connection': 'last-connection', 'user': 'user'}
    _toPy = {'access': 'access', 'display-name': 'display_name', 'last-connection': 'last_connection', 'user': 'user'}
    def __init__(self, access=None, display_name=None, last_connection=None, user=None, **unknown_fields):
        '''
        access : str
        display_name : str
        last_connection : str
        user : str
        '''
        self.access = access
        self.display_name = display_name
        self.last_connection = last_connection
        self.user = user



class ModelUserInfoResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : ModelUserInfo
        '''
        self.error = Error.from_json(error) if error else None
        self.result = ModelUserInfo.from_json(result) if result else None



class ModelUserInfoResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~ModelUserInfoResult]<~ModelUserInfoResult>
        '''
        self.results = [ModelUserInfoResult.from_json(o) for o in results or []]



class ModifyControllerAccess(Type):
    _toSchema = {'access': 'access', 'action': 'action', 'user_tag': 'user-tag'}
    _toPy = {'access': 'access', 'action': 'action', 'user-tag': 'user_tag'}
    def __init__(self, access=None, action=None, user_tag=None, **unknown_fields):
        '''
        access : str
        action : str
        user_tag : str
        '''
        self.access = access
        self.action = action
        self.user_tag = user_tag



class ModifyControllerAccessRequest(Type):
    _toSchema = {'changes': 'changes'}
    _toPy = {'changes': 'changes'}
    def __init__(self, changes=None, **unknown_fields):
        '''
        changes : typing.Sequence<+T_co>[~ModifyControllerAccess]<~ModifyControllerAccess>
        '''
        self.changes = [ModifyControllerAccess.from_json(o) for o in changes or []]



class ModifyModelAccess(Type):
    _toSchema = {'access': 'access', 'action': 'action', 'model_tag': 'model-tag', 'user_tag': 'user-tag'}
    _toPy = {'access': 'access', 'action': 'action', 'model-tag': 'model_tag', 'user-tag': 'user_tag'}
    def __init__(self, access=None, action=None, model_tag=None, user_tag=None, **unknown_fields):
        '''
        access : str
        action : str
        model_tag : str
        user_tag : str
        '''
        self.access = access
        self.action = action
        self.model_tag = model_tag
        self.user_tag = user_tag



class ModifyModelAccessRequest(Type):
    _toSchema = {'changes': 'changes'}
    _toPy = {'changes': 'changes'}
    def __init__(self, changes=None, **unknown_fields):
        '''
        changes : typing.Sequence<+T_co>[~ModifyModelAccess]<~ModifyModelAccess>
        '''
        self.changes = [ModifyModelAccess.from_json(o) for o in changes or []]



class ModifyUserSSHKeys(Type):
    _toSchema = {'ssh_keys': 'ssh-keys', 'user': 'user'}
    _toPy = {'ssh-keys': 'ssh_keys', 'user': 'user'}
    def __init__(self, ssh_keys=None, user=None, **unknown_fields):
        '''
        ssh_keys : typing.Sequence<+T_co>[str]
        user : str
        '''
        self.ssh_keys = ssh_keys
        self.user = user



class MongoUpgradeResults(Type):
    _toSchema = {'ha_members': 'ha-members', 'master': 'master', 'rs_members': 'rs-members'}
    _toPy = {'ha-members': 'ha_members', 'master': 'master', 'rs-members': 'rs_members'}
    def __init__(self, ha_members=None, master=None, rs_members=None, **unknown_fields):
        '''
        ha_members : typing.Sequence<+T_co>[~HAMember]<~HAMember>
        master : HAMember
        rs_members : typing.Sequence<+T_co>[~Member]<~Member>
        '''
        self.ha_members = [HAMember.from_json(o) for o in ha_members or []]
        self.master = HAMember.from_json(master) if master else None
        self.rs_members = [Member.from_json(o) for o in rs_members or []]



class MongoVersion(Type):
    _toSchema = {'engine': 'engine', 'major': 'major', 'minor': 'minor', 'patch': 'patch'}
    _toPy = {'engine': 'engine', 'major': 'major', 'minor': 'minor', 'patch': 'patch'}
    def __init__(self, engine=None, major=None, minor=None, patch=None, **unknown_fields):
        '''
        engine : str
        major : int
        minor : int
        patch : str
        '''
        self.engine = engine
        self.major = major
        self.minor = minor
        self.patch = patch



class NetworkConfig(Type):
    _toSchema = {'address': 'address', 'cidr': 'cidr', 'config_type': 'config-type', 'device_index': 'device-index', 'disabled': 'disabled', 'dns_search_domains': 'dns-search-domains', 'dns_servers': 'dns-servers', 'gateway_address': 'gateway-address', 'interface_name': 'interface-name', 'interface_type': 'interface-type', 'mac_address': 'mac-address', 'mtu': 'mtu', 'no_auto_start': 'no-auto-start', 'parent_interface_name': 'parent-interface-name', 'provider_address_id': 'provider-address-id', 'provider_id': 'provider-id', 'provider_space_id': 'provider-space-id', 'provider_subnet_id': 'provider-subnet-id', 'provider_vlan_id': 'provider-vlan-id', 'vlan_tag': 'vlan-tag'}
    _toPy = {'address': 'address', 'cidr': 'cidr', 'config-type': 'config_type', 'device-index': 'device_index', 'disabled': 'disabled', 'dns-search-domains': 'dns_search_domains', 'dns-servers': 'dns_servers', 'gateway-address': 'gateway_address', 'interface-name': 'interface_name', 'interface-type': 'interface_type', 'mac-address': 'mac_address', 'mtu': 'mtu', 'no-auto-start': 'no_auto_start', 'parent-interface-name': 'parent_interface_name', 'provider-address-id': 'provider_address_id', 'provider-id': 'provider_id', 'provider-space-id': 'provider_space_id', 'provider-subnet-id': 'provider_subnet_id', 'provider-vlan-id': 'provider_vlan_id', 'vlan-tag': 'vlan_tag'}
    def __init__(self, address=None, cidr=None, config_type=None, device_index=None, disabled=None, dns_search_domains=None, dns_servers=None, gateway_address=None, interface_name=None, interface_type=None, mac_address=None, mtu=None, no_auto_start=None, parent_interface_name=None, provider_address_id=None, provider_id=None, provider_space_id=None, provider_subnet_id=None, provider_vlan_id=None, vlan_tag=None, **unknown_fields):
        '''
        address : str
        cidr : str
        config_type : str
        device_index : int
        disabled : bool
        dns_search_domains : typing.Sequence<+T_co>[str]
        dns_servers : typing.Sequence<+T_co>[str]
        gateway_address : str
        interface_name : str
        interface_type : str
        mac_address : str
        mtu : int
        no_auto_start : bool
        parent_interface_name : str
        provider_address_id : str
        provider_id : str
        provider_space_id : str
        provider_subnet_id : str
        provider_vlan_id : str
        vlan_tag : int
        '''
        self.address = address
        self.cidr = cidr
        self.config_type = config_type
        self.device_index = device_index
        self.disabled = disabled
        self.dns_search_domains = dns_search_domains
        self.dns_servers = dns_servers
        self.gateway_address = gateway_address
        self.interface_name = interface_name
        self.interface_type = interface_type
        self.mac_address = mac_address
        self.mtu = mtu
        self.no_auto_start = no_auto_start
        self.parent_interface_name = parent_interface_name
        self.provider_address_id = provider_address_id
        self.provider_id = provider_id
        self.provider_space_id = provider_space_id
        self.provider_subnet_id = provider_subnet_id
        self.provider_vlan_id = provider_vlan_id
        self.vlan_tag = vlan_tag



class NetworkInfo(Type):
    _toSchema = {'addresses': 'addresses', 'interface_name': 'interface-name', 'mac_address': 'mac-address'}
    _toPy = {'addresses': 'addresses', 'interface-name': 'interface_name', 'mac-address': 'mac_address'}
    def __init__(self, addresses=None, interface_name=None, mac_address=None, **unknown_fields):
        '''
        addresses : typing.Sequence<+T_co>[~InterfaceAddress]<~InterfaceAddress>
        interface_name : str
        mac_address : str
        '''
        self.addresses = [InterfaceAddress.from_json(o) for o in addresses or []]
        self.interface_name = interface_name
        self.mac_address = mac_address



class NetworkInfoParams(Type):
    _toSchema = {'bindings': 'bindings', 'unit': 'unit'}
    _toPy = {'bindings': 'bindings', 'unit': 'unit'}
    def __init__(self, bindings=None, unit=None, **unknown_fields):
        '''
        bindings : typing.Sequence<+T_co>[str]
        unit : str
        '''
        self.bindings = bindings
        self.unit = unit



class NetworkInfoResult(Type):
    _toSchema = {'error': 'error', 'network_info': 'network-info'}
    _toPy = {'error': 'error', 'network-info': 'network_info'}
    def __init__(self, error=None, network_info=None, **unknown_fields):
        '''
        error : Error
        network_info : typing.Sequence<+T_co>[~NetworkInfo]<~NetworkInfo>
        '''
        self.error = Error.from_json(error) if error else None
        self.network_info = [NetworkInfo.from_json(o) for o in network_info or []]



class NetworkInfoResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Mapping<~KT, +VT_co>[str, ~NetworkInfoResult]<~NetworkInfoResult>
        '''
        self.results = results



class NetworkInterface(Type):
    _toSchema = {'dns_nameservers': 'dns-nameservers', 'gateway': 'gateway', 'ip_addresses': 'ip-addresses', 'is_up': 'is-up', 'mac_address': 'mac-address', 'space': 'space'}
    _toPy = {'dns-nameservers': 'dns_nameservers', 'gateway': 'gateway', 'ip-addresses': 'ip_addresses', 'is-up': 'is_up', 'mac-address': 'mac_address', 'space': 'space'}
    def __init__(self, dns_nameservers=None, gateway=None, ip_addresses=None, is_up=None, mac_address=None, space=None, **unknown_fields):
        '''
        dns_nameservers : typing.Sequence<+T_co>[str]
        gateway : str
        ip_addresses : typing.Sequence<+T_co>[str]
        is_up : bool
        mac_address : str
        space : str
        '''
        self.dns_nameservers = dns_nameservers
        self.gateway = gateway
        self.ip_addresses = ip_addresses
        self.is_up = is_up
        self.mac_address = mac_address
        self.space = space



class NetworkRoute(Type):
    _toSchema = {'destination_cidr': 'destination-cidr', 'gateway_ip': 'gateway-ip', 'metric': 'metric'}
    _toPy = {'destination-cidr': 'destination_cidr', 'gateway-ip': 'gateway_ip', 'metric': 'metric'}
    def __init__(self, destination_cidr=None, gateway_ip=None, metric=None, **unknown_fields):
        '''
        destination_cidr : str
        gateway_ip : str
        metric : int
        '''
        self.destination_cidr = destination_cidr
        self.gateway_ip = gateway_ip
        self.metric = metric



class NotifyWatchResult(Type):
    _toSchema = {'error': 'error', 'notifywatcherid': 'NotifyWatcherId'}
    _toPy = {'NotifyWatcherId': 'notifywatcherid', 'error': 'error'}
    def __init__(self, notifywatcherid=None, error=None, **unknown_fields):
        '''
        notifywatcherid : str
        error : Error
        '''
        self.notifywatcherid = notifywatcherid
        self.error = Error.from_json(error) if error else None



class NotifyWatchResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~NotifyWatchResult]<~NotifyWatchResult>
        '''
        self.results = [NotifyWatchResult.from_json(o) for o in results or []]



class Number(Type):
    _toSchema = {'build': 'Build', 'major': 'Major', 'minor': 'Minor', 'patch': 'Patch', 'tag': 'Tag'}
    _toPy = {'Build': 'build', 'Major': 'major', 'Minor': 'minor', 'Patch': 'patch', 'Tag': 'tag'}
    def __init__(self, build=None, major=None, minor=None, patch=None, tag=None, **unknown_fields):
        '''
        build : int
        major : int
        minor : int
        patch : int
        tag : str
        '''
        self.build = build
        self.major = major
        self.minor = minor
        self.patch = patch
        self.tag = tag



class Payload(Type):
    _toSchema = {'class_': 'class', 'id_': 'id', 'labels': 'labels', 'machine': 'machine', 'status': 'status', 'type_': 'type', 'unit': 'unit'}
    _toPy = {'class': 'class_', 'id': 'id_', 'labels': 'labels', 'machine': 'machine', 'status': 'status', 'type': 'type_', 'unit': 'unit'}
    def __init__(self, class_=None, id_=None, labels=None, machine=None, status=None, type_=None, unit=None, **unknown_fields):
        '''
        class_ : str
        id_ : str
        labels : typing.Sequence<+T_co>[str]
        machine : str
        status : str
        type_ : str
        unit : str
        '''
        self.class_ = class_
        self.id_ = id_
        self.labels = labels
        self.machine = machine
        self.status = status
        self.type_ = type_
        self.unit = unit



class PayloadListArgs(Type):
    _toSchema = {'patterns': 'patterns'}
    _toPy = {'patterns': 'patterns'}
    def __init__(self, patterns=None, **unknown_fields):
        '''
        patterns : typing.Sequence<+T_co>[str]
        '''
        self.patterns = patterns



class PayloadListResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~Payload]<~Payload>
        '''
        self.results = [Payload.from_json(o) for o in results or []]



class PayloadResult(Type):
    _toSchema = {'entity': 'Entity', 'error': 'error', 'not_found': 'not-found', 'payload': 'payload'}
    _toPy = {'Entity': 'entity', 'error': 'error', 'not-found': 'not_found', 'payload': 'payload'}
    def __init__(self, entity=None, error=None, not_found=None, payload=None, **unknown_fields):
        '''
        entity : Entity
        error : Error
        not_found : bool
        payload : Payload
        '''
        self.entity = Entity.from_json(entity) if entity else None
        self.error = Error.from_json(error) if error else None
        self.not_found = not_found
        self.payload = Payload.from_json(payload) if payload else None



class PayloadResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~PayloadResult]<~PayloadResult>
        '''
        self.results = [PayloadResult.from_json(o) for o in results or []]



class PhaseResult(Type):
    _toSchema = {'error': 'error', 'phase': 'phase'}
    _toPy = {'error': 'error', 'phase': 'phase'}
    def __init__(self, error=None, phase=None, **unknown_fields):
        '''
        error : Error
        phase : str
        '''
        self.error = Error.from_json(error) if error else None
        self.phase = phase



class PhaseResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~PhaseResult]<~PhaseResult>
        '''
        self.results = [PhaseResult.from_json(o) for o in results or []]



class Placement(Type):
    _toSchema = {'directive': 'directive', 'scope': 'scope'}
    _toPy = {'directive': 'directive', 'scope': 'scope'}
    def __init__(self, directive=None, scope=None, **unknown_fields):
        '''
        directive : str
        scope : str
        '''
        self.directive = directive
        self.scope = scope



class PortRange(Type):
    _toSchema = {'from_port': 'from-port', 'protocol': 'protocol', 'to_port': 'to-port'}
    _toPy = {'from-port': 'from_port', 'protocol': 'protocol', 'to-port': 'to_port'}
    def __init__(self, from_port=None, protocol=None, to_port=None, **unknown_fields):
        '''
        from_port : int
        protocol : str
        to_port : int
        '''
        self.from_port = from_port
        self.protocol = protocol
        self.to_port = to_port



class PrivateAddress(Type):
    _toSchema = {'target': 'target'}
    _toPy = {'target': 'target'}
    def __init__(self, target=None, **unknown_fields):
        '''
        target : str
        '''
        self.target = target



class PrivateAddressResults(Type):
    _toSchema = {'private_address': 'private-address'}
    _toPy = {'private-address': 'private_address'}
    def __init__(self, private_address=None, **unknown_fields):
        '''
        private_address : str
        '''
        self.private_address = private_address



class ProviderInterfaceInfo(Type):
    _toSchema = {'interface_name': 'interface-name', 'mac_address': 'mac-address', 'provider_id': 'provider-id'}
    _toPy = {'interface-name': 'interface_name', 'mac-address': 'mac_address', 'provider-id': 'provider_id'}
    def __init__(self, interface_name=None, mac_address=None, provider_id=None, **unknown_fields):
        '''
        interface_name : str
        mac_address : str
        provider_id : str
        '''
        self.interface_name = interface_name
        self.mac_address = mac_address
        self.provider_id = provider_id



class ProviderInterfaceInfoResult(Type):
    _toSchema = {'error': 'error', 'interfaces': 'interfaces', 'machine_tag': 'machine-tag'}
    _toPy = {'error': 'error', 'interfaces': 'interfaces', 'machine-tag': 'machine_tag'}
    def __init__(self, error=None, interfaces=None, machine_tag=None, **unknown_fields):
        '''
        error : Error
        interfaces : typing.Sequence<+T_co>[~ProviderInterfaceInfo]<~ProviderInterfaceInfo>
        machine_tag : str
        '''
        self.error = Error.from_json(error) if error else None
        self.interfaces = [ProviderInterfaceInfo.from_json(o) for o in interfaces or []]
        self.machine_tag = machine_tag



class ProviderInterfaceInfoResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~ProviderInterfaceInfoResult]<~ProviderInterfaceInfoResult>
        '''
        self.results = [ProviderInterfaceInfoResult.from_json(o) for o in results or []]



class ProviderSpace(Type):
    _toSchema = {'error': 'error', 'name': 'name', 'provider_id': 'provider-id', 'subnets': 'subnets'}
    _toPy = {'error': 'error', 'name': 'name', 'provider-id': 'provider_id', 'subnets': 'subnets'}
    def __init__(self, error=None, name=None, provider_id=None, subnets=None, **unknown_fields):
        '''
        error : Error
        name : str
        provider_id : str
        subnets : typing.Sequence<+T_co>[~Subnet]<~Subnet>
        '''
        self.error = Error.from_json(error) if error else None
        self.name = name
        self.provider_id = provider_id
        self.subnets = [Subnet.from_json(o) for o in subnets or []]



class ProvisioningInfo(Type):
    _toSchema = {'constraints': 'constraints', 'controller_config': 'controller-config', 'endpoint_bindings': 'endpoint-bindings', 'image_metadata': 'image-metadata', 'jobs': 'jobs', 'placement': 'placement', 'series': 'series', 'subnets_to_zones': 'subnets-to-zones', 'tags': 'tags', 'volumes': 'volumes'}
    _toPy = {'constraints': 'constraints', 'controller-config': 'controller_config', 'endpoint-bindings': 'endpoint_bindings', 'image-metadata': 'image_metadata', 'jobs': 'jobs', 'placement': 'placement', 'series': 'series', 'subnets-to-zones': 'subnets_to_zones', 'tags': 'tags', 'volumes': 'volumes'}
    def __init__(self, constraints=None, controller_config=None, endpoint_bindings=None, image_metadata=None, jobs=None, placement=None, series=None, subnets_to_zones=None, tags=None, volumes=None, **unknown_fields):
        '''
        constraints : Value
        controller_config : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        endpoint_bindings : typing.Mapping<~KT, +VT_co>[str, str]
        image_metadata : typing.Sequence<+T_co>[~CloudImageMetadata]<~CloudImageMetadata>
        jobs : typing.Sequence<+T_co>[str]
        placement : str
        series : str
        subnets_to_zones : typing.Sequence<+T_co>[str]
        tags : typing.Mapping<~KT, +VT_co>[str, str]
        volumes : typing.Sequence<+T_co>[~VolumeParams]<~VolumeParams>
        '''
        self.constraints = Value.from_json(constraints) if constraints else None
        self.controller_config = controller_config
        self.endpoint_bindings = endpoint_bindings
        self.image_metadata = [CloudImageMetadata.from_json(o) for o in image_metadata or []]
        self.jobs = jobs
        self.placement = placement
        self.series = series
        self.subnets_to_zones = subnets_to_zones
        self.tags = tags
        self.volumes = [VolumeParams.from_json(o) for o in volumes or []]



class ProvisioningInfoResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : ProvisioningInfo
        '''
        self.error = Error.from_json(error) if error else None
        self.result = ProvisioningInfo.from_json(result) if result else None



class ProvisioningInfoResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~ProvisioningInfoResult]<~ProvisioningInfoResult>
        '''
        self.results = [ProvisioningInfoResult.from_json(o) for o in results or []]



class ProvisioningScriptParams(Type):
    _toSchema = {'data_dir': 'data-dir', 'disable_package_commands': 'disable-package-commands', 'machine_id': 'machine-id', 'nonce': 'nonce'}
    _toPy = {'data-dir': 'data_dir', 'disable-package-commands': 'disable_package_commands', 'machine-id': 'machine_id', 'nonce': 'nonce'}
    def __init__(self, data_dir=None, disable_package_commands=None, machine_id=None, nonce=None, **unknown_fields):
        '''
        data_dir : str
        disable_package_commands : bool
        machine_id : str
        nonce : str
        '''
        self.data_dir = data_dir
        self.disable_package_commands = disable_package_commands
        self.machine_id = machine_id
        self.nonce = nonce



class ProvisioningScriptResult(Type):
    _toSchema = {'script': 'script'}
    _toPy = {'script': 'script'}
    def __init__(self, script=None, **unknown_fields):
        '''
        script : str
        '''
        self.script = script



class ProxyConfig(Type):
    _toSchema = {'ftp': 'ftp', 'http': 'http', 'https': 'https', 'no_proxy': 'no-proxy'}
    _toPy = {'ftp': 'ftp', 'http': 'http', 'https': 'https', 'no-proxy': 'no_proxy'}
    def __init__(self, ftp=None, http=None, https=None, no_proxy=None, **unknown_fields):
        '''
        ftp : str
        http : str
        https : str
        no_proxy : str
        '''
        self.ftp = ftp
        self.http = http
        self.https = https
        self.no_proxy = no_proxy



class ProxyConfigResult(Type):
    _toSchema = {'apt_proxy_settings': 'apt-proxy-settings', 'error': 'error', 'proxy_settings': 'proxy-settings'}
    _toPy = {'apt-proxy-settings': 'apt_proxy_settings', 'error': 'error', 'proxy-settings': 'proxy_settings'}
    def __init__(self, apt_proxy_settings=None, error=None, proxy_settings=None, **unknown_fields):
        '''
        apt_proxy_settings : ProxyConfig
        error : Error
        proxy_settings : ProxyConfig
        '''
        self.apt_proxy_settings = ProxyConfig.from_json(apt_proxy_settings) if apt_proxy_settings else None
        self.error = Error.from_json(error) if error else None
        self.proxy_settings = ProxyConfig.from_json(proxy_settings) if proxy_settings else None



class ProxyConfigResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~ProxyConfigResult]<~ProxyConfigResult>
        '''
        self.results = [ProxyConfigResult.from_json(o) for o in results or []]



class PublicAddress(Type):
    _toSchema = {'target': 'target'}
    _toPy = {'target': 'target'}
    def __init__(self, target=None, **unknown_fields):
        '''
        target : str
        '''
        self.target = target



class PublicAddressResults(Type):
    _toSchema = {'public_address': 'public-address'}
    _toPy = {'public-address': 'public_address'}
    def __init__(self, public_address=None, **unknown_fields):
        '''
        public_address : str
        '''
        self.public_address = public_address



class RebootActionResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : str
        '''
        self.error = Error.from_json(error) if error else None
        self.result = result



class RebootActionResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~RebootActionResult]<~RebootActionResult>
        '''
        self.results = [RebootActionResult.from_json(o) for o in results or []]



class RegionDefaults(Type):
    _toSchema = {'region_name': 'region-name', 'value': 'value'}
    _toPy = {'region-name': 'region_name', 'value': 'value'}
    def __init__(self, region_name=None, value=None, **unknown_fields):
        '''
        region_name : str
        value : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        self.region_name = region_name
        self.value = value



class RelationChange(Type):
    _toSchema = {'changedunits': 'changedunits', 'departedunits': 'departedunits', 'id_': 'id', 'life': 'life'}
    _toPy = {'changedunits': 'changedunits', 'departedunits': 'departedunits', 'id': 'id_', 'life': 'life'}
    def __init__(self, changedunits=None, departedunits=None, id_=None, life=None, **unknown_fields):
        '''
        changedunits : typing.Mapping<~KT, +VT_co>[str, ~RelationUnitChange]<~RelationUnitChange>
        departedunits : typing.Sequence<+T_co>[str]
        id_ : int
        life : str
        '''
        self.changedunits = changedunits
        self.departedunits = departedunits
        self.id_ = id_
        self.life = life



class RelationIds(Type):
    _toSchema = {'relation_ids': 'relation-ids'}
    _toPy = {'relation-ids': 'relation_ids'}
    def __init__(self, relation_ids=None, **unknown_fields):
        '''
        relation_ids : typing.Sequence<+T_co>[int]
        '''
        self.relation_ids = relation_ids



class RelationResult(Type):
    _toSchema = {'endpoint': 'endpoint', 'error': 'error', 'id_': 'id', 'key': 'key', 'life': 'life'}
    _toPy = {'endpoint': 'endpoint', 'error': 'error', 'id': 'id_', 'key': 'key', 'life': 'life'}
    def __init__(self, endpoint=None, error=None, id_=None, key=None, life=None, **unknown_fields):
        '''
        endpoint : Endpoint
        error : Error
        id_ : int
        key : str
        life : str
        '''
        self.endpoint = Endpoint.from_json(endpoint) if endpoint else None
        self.error = Error.from_json(error) if error else None
        self.id_ = id_
        self.key = key
        self.life = life



class RelationResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~RelationResult]<~RelationResult>
        '''
        self.results = [RelationResult.from_json(o) for o in results or []]



class RelationStatus(Type):
    _toSchema = {'endpoints': 'endpoints', 'id_': 'id', 'interface': 'interface', 'key': 'key', 'scope': 'scope'}
    _toPy = {'endpoints': 'endpoints', 'id': 'id_', 'interface': 'interface', 'key': 'key', 'scope': 'scope'}
    def __init__(self, endpoints=None, id_=None, interface=None, key=None, scope=None, **unknown_fields):
        '''
        endpoints : typing.Sequence<+T_co>[~EndpointStatus]<~EndpointStatus>
        id_ : int
        interface : str
        key : str
        scope : str
        '''
        self.endpoints = [EndpointStatus.from_json(o) for o in endpoints or []]
        self.id_ = id_
        self.interface = interface
        self.key = key
        self.scope = scope



class RelationUnit(Type):
    _toSchema = {'relation': 'relation', 'unit': 'unit'}
    _toPy = {'relation': 'relation', 'unit': 'unit'}
    def __init__(self, relation=None, unit=None, **unknown_fields):
        '''
        relation : str
        unit : str
        '''
        self.relation = relation
        self.unit = unit



class RelationUnitChange(Type):
    _toSchema = {'settings': 'settings'}
    _toPy = {'settings': 'settings'}
    def __init__(self, settings=None, **unknown_fields):
        '''
        settings : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        '''
        self.settings = settings



class RelationUnitPair(Type):
    _toSchema = {'local_unit': 'local-unit', 'relation': 'relation', 'remote_unit': 'remote-unit'}
    _toPy = {'local-unit': 'local_unit', 'relation': 'relation', 'remote-unit': 'remote_unit'}
    def __init__(self, local_unit=None, relation=None, remote_unit=None, **unknown_fields):
        '''
        local_unit : str
        relation : str
        remote_unit : str
        '''
        self.local_unit = local_unit
        self.relation = relation
        self.remote_unit = remote_unit



class RelationUnitPairs(Type):
    _toSchema = {'relation_unit_pairs': 'relation-unit-pairs'}
    _toPy = {'relation-unit-pairs': 'relation_unit_pairs'}
    def __init__(self, relation_unit_pairs=None, **unknown_fields):
        '''
        relation_unit_pairs : typing.Sequence<+T_co>[~RelationUnitPair]<~RelationUnitPair>
        '''
        self.relation_unit_pairs = [RelationUnitPair.from_json(o) for o in relation_unit_pairs or []]



class RelationUnitSettings(Type):
    _toSchema = {'relation': 'relation', 'settings': 'settings', 'unit': 'unit'}
    _toPy = {'relation': 'relation', 'settings': 'settings', 'unit': 'unit'}
    def __init__(self, relation=None, settings=None, unit=None, **unknown_fields):
        '''
        relation : str
        settings : typing.Mapping<~KT, +VT_co>[str, str]
        unit : str
        '''
        self.relation = relation
        self.settings = settings
        self.unit = unit



class RelationUnits(Type):
    _toSchema = {'relation_units': 'relation-units'}
    _toPy = {'relation-units': 'relation_units'}
    def __init__(self, relation_units=None, **unknown_fields):
        '''
        relation_units : typing.Sequence<+T_co>[~RelationUnit]<~RelationUnit>
        '''
        self.relation_units = [RelationUnit.from_json(o) for o in relation_units or []]



class RelationUnitsChange(Type):
    _toSchema = {'changed': 'changed', 'departed': 'departed'}
    _toPy = {'changed': 'changed', 'departed': 'departed'}
    def __init__(self, changed=None, departed=None, **unknown_fields):
        '''
        changed : typing.Mapping<~KT, +VT_co>[str, ~UnitSettings]<~UnitSettings>
        departed : typing.Sequence<+T_co>[str]
        '''
        self.changed = changed
        self.departed = departed



class RelationUnitsSettings(Type):
    _toSchema = {'relation_units': 'relation-units'}
    _toPy = {'relation-units': 'relation_units'}
    def __init__(self, relation_units=None, **unknown_fields):
        '''
        relation_units : typing.Sequence<+T_co>[~RelationUnitSettings]<~RelationUnitSettings>
        '''
        self.relation_units = [RelationUnitSettings.from_json(o) for o in relation_units or []]



class RelationUnitsWatchResult(Type):
    _toSchema = {'changes': 'changes', 'error': 'error', 'watcher_id': 'watcher-id'}
    _toPy = {'changes': 'changes', 'error': 'error', 'watcher-id': 'watcher_id'}
    def __init__(self, changes=None, error=None, watcher_id=None, **unknown_fields):
        '''
        changes : RelationUnitsChange
        error : Error
        watcher_id : str
        '''
        self.changes = RelationUnitsChange.from_json(changes) if changes else None
        self.error = Error.from_json(error) if error else None
        self.watcher_id = watcher_id



class RelationUnitsWatchResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~RelationUnitsWatchResult]<~RelationUnitsWatchResult>
        '''
        self.results = [RelationUnitsWatchResult.from_json(o) for o in results or []]



class RemoteApplicationChange(Type):
    _toSchema = {'application_tag': 'application-tag', 'life': 'life', 'relations': 'relations'}
    _toPy = {'application-tag': 'application_tag', 'life': 'life', 'relations': 'relations'}
    def __init__(self, application_tag=None, life=None, relations=None, **unknown_fields):
        '''
        application_tag : str
        life : str
        relations : RemoteRelationsChange
        '''
        self.application_tag = application_tag
        self.life = life
        self.relations = RemoteRelationsChange.from_json(relations) if relations else None



class RemoteApplicationInfo(Type):
    _toSchema = {'application_url': 'application-url', 'description': 'description', 'endpoints': 'endpoints', 'icon_url_path': 'icon-url-path', 'model_tag': 'model-tag', 'name': 'name', 'source_model_label': 'source-model-label'}
    _toPy = {'application-url': 'application_url', 'description': 'description', 'endpoints': 'endpoints', 'icon-url-path': 'icon_url_path', 'model-tag': 'model_tag', 'name': 'name', 'source-model-label': 'source_model_label'}
    def __init__(self, application_url=None, description=None, endpoints=None, icon_url_path=None, model_tag=None, name=None, source_model_label=None, **unknown_fields):
        '''
        application_url : str
        description : str
        endpoints : typing.Sequence<+T_co>[~RemoteEndpoint]<~RemoteEndpoint>
        icon_url_path : str
        model_tag : str
        name : str
        source_model_label : str
        '''
        self.application_url = application_url
        self.description = description
        self.endpoints = [RemoteEndpoint.from_json(o) for o in endpoints or []]
        self.icon_url_path = icon_url_path
        self.model_tag = model_tag
        self.name = name
        self.source_model_label = source_model_label



class RemoteApplicationInfoResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : RemoteApplicationInfo
        '''
        self.error = Error.from_json(error) if error else None
        self.result = RemoteApplicationInfo.from_json(result) if result else None



class RemoteApplicationInfoResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~RemoteApplicationInfoResult]<~RemoteApplicationInfoResult>
        '''
        self.results = [RemoteApplicationInfoResult.from_json(o) for o in results or []]



class RemoteApplicationStatus(Type):
    _toSchema = {'application_name': 'application-name', 'application_url': 'application-url', 'endpoints': 'endpoints', 'err': 'err', 'life': 'life', 'relations': 'relations', 'status': 'status'}
    _toPy = {'application-name': 'application_name', 'application-url': 'application_url', 'endpoints': 'endpoints', 'err': 'err', 'life': 'life', 'relations': 'relations', 'status': 'status'}
    def __init__(self, application_name=None, application_url=None, endpoints=None, err=None, life=None, relations=None, status=None, **unknown_fields):
        '''
        application_name : str
        application_url : str
        endpoints : typing.Sequence<+T_co>[~RemoteEndpoint]<~RemoteEndpoint>
        err : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        life : str
        relations : typing.Sequence<+T_co>[str]
        status : DetailedStatus
        '''
        self.application_name = application_name
        self.application_url = application_url
        self.endpoints = [RemoteEndpoint.from_json(o) for o in endpoints or []]
        self.err = err
        self.life = life
        self.relations = relations
        self.status = DetailedStatus.from_json(status) if status else None



class RemoteApplicationWatchResult(Type):
    _toSchema = {'change': 'change', 'error': 'error', 'id_': 'id'}
    _toPy = {'change': 'change', 'error': 'error', 'id': 'id_'}
    def __init__(self, change=None, error=None, id_=None, **unknown_fields):
        '''
        change : RemoteApplicationChange
        error : Error
        id_ : str
        '''
        self.change = RemoteApplicationChange.from_json(change) if change else None
        self.error = Error.from_json(error) if error else None
        self.id_ = id_



class RemoteEndpoint(Type):
    _toSchema = {'interface': 'interface', 'limit': 'limit', 'name': 'name', 'role': 'role', 'scope': 'scope'}
    _toPy = {'interface': 'interface', 'limit': 'limit', 'name': 'name', 'role': 'role', 'scope': 'scope'}
    def __init__(self, interface=None, limit=None, name=None, role=None, scope=None, **unknown_fields):
        '''
        interface : str
        limit : int
        name : str
        role : str
        scope : str
        '''
        self.interface = interface
        self.limit = limit
        self.name = name
        self.role = role
        self.scope = scope



class RemoteEntityId(Type):
    _toSchema = {'model_uuid': 'model-uuid', 'token': 'token'}
    _toPy = {'model-uuid': 'model_uuid', 'token': 'token'}
    def __init__(self, model_uuid=None, token=None, **unknown_fields):
        '''
        model_uuid : str
        token : str
        '''
        self.model_uuid = model_uuid
        self.token = token



class RemoteRelationChange(Type):
    _toSchema = {'changed_units': 'changed-units', 'departed_units': 'departed-units', 'id_': 'id', 'life': 'life'}
    _toPy = {'changed-units': 'changed_units', 'departed-units': 'departed_units', 'id': 'id_', 'life': 'life'}
    def __init__(self, changed_units=None, departed_units=None, id_=None, life=None, **unknown_fields):
        '''
        changed_units : typing.Mapping<~KT, +VT_co>[str, ~RemoteRelationUnitChange]<~RemoteRelationUnitChange>
        departed_units : typing.Sequence<+T_co>[str]
        id_ : int
        life : str
        '''
        self.changed_units = changed_units
        self.departed_units = departed_units
        self.id_ = id_
        self.life = life



class RemoteRelationUnitChange(Type):
    _toSchema = {'settings': 'settings', 'unit_id': 'unit-id'}
    _toPy = {'settings': 'settings', 'unit-id': 'unit_id'}
    def __init__(self, settings=None, unit_id=None, **unknown_fields):
        '''
        settings : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        unit_id : RemoteEntityId
        '''
        self.settings = settings
        self.unit_id = RemoteEntityId.from_json(unit_id) if unit_id else None



class RemoteRelationsChange(Type):
    _toSchema = {'changed': 'changed', 'initial': 'initial', 'removed': 'removed'}
    _toPy = {'changed': 'changed', 'initial': 'initial', 'removed': 'removed'}
    def __init__(self, changed=None, initial=None, removed=None, **unknown_fields):
        '''
        changed : typing.Sequence<+T_co>[~RemoteRelationChange]<~RemoteRelationChange>
        initial : bool
        removed : typing.Sequence<+T_co>[int]
        '''
        self.changed = [RemoteRelationChange.from_json(o) for o in changed or []]
        self.initial = initial
        self.removed = removed



class RemoteRelationsWatchResult(Type):
    _toSchema = {'change': 'change', 'error': 'error', 'remoterelationswatcherid': 'RemoteRelationsWatcherId'}
    _toPy = {'RemoteRelationsWatcherId': 'remoterelationswatcherid', 'change': 'change', 'error': 'error'}
    def __init__(self, remoterelationswatcherid=None, change=None, error=None, **unknown_fields):
        '''
        remoterelationswatcherid : str
        change : RemoteRelationsChange
        error : Error
        '''
        self.remoterelationswatcherid = remoterelationswatcherid
        self.change = RemoteRelationsChange.from_json(change) if change else None
        self.error = Error.from_json(error) if error else None



class RemoteSpace(Type):
    _toSchema = {'cloud_type': 'cloud-type', 'name': 'name', 'provider_attributes': 'provider-attributes', 'provider_id': 'provider-id', 'subnets': 'subnets'}
    _toPy = {'cloud-type': 'cloud_type', 'name': 'name', 'provider-attributes': 'provider_attributes', 'provider-id': 'provider_id', 'subnets': 'subnets'}
    def __init__(self, cloud_type=None, name=None, provider_attributes=None, provider_id=None, subnets=None, **unknown_fields):
        '''
        cloud_type : str
        name : str
        provider_attributes : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        provider_id : str
        subnets : typing.Sequence<+T_co>[~Subnet]<~Subnet>
        '''
        self.cloud_type = cloud_type
        self.name = name
        self.provider_attributes = provider_attributes
        self.provider_id = provider_id
        self.subnets = [Subnet.from_json(o) for o in subnets or []]



class RemoveBlocksArgs(Type):
    _toSchema = {'all_': 'all'}
    _toPy = {'all': 'all_'}
    def __init__(self, all_=None, **unknown_fields):
        '''
        all_ : bool
        '''
        self.all_ = all_



class ResolveCharmResult(Type):
    _toSchema = {'error': 'error', 'url': 'url'}
    _toPy = {'error': 'error', 'url': 'url'}
    def __init__(self, error=None, url=None, **unknown_fields):
        '''
        error : str
        url : str
        '''
        self.error = error
        self.url = url



class ResolveCharmResults(Type):
    _toSchema = {'urls': 'urls'}
    _toPy = {'urls': 'urls'}
    def __init__(self, urls=None, **unknown_fields):
        '''
        urls : typing.Sequence<+T_co>[~ResolveCharmResult]<~ResolveCharmResult>
        '''
        self.urls = [ResolveCharmResult.from_json(o) for o in urls or []]



class ResolveCharms(Type):
    _toSchema = {'references': 'references'}
    _toPy = {'references': 'references'}
    def __init__(self, references=None, **unknown_fields):
        '''
        references : typing.Sequence<+T_co>[str]
        '''
        self.references = references



class Resolved(Type):
    _toSchema = {'retry': 'retry', 'unit_name': 'unit-name'}
    _toPy = {'retry': 'retry', 'unit-name': 'unit_name'}
    def __init__(self, retry=None, unit_name=None, **unknown_fields):
        '''
        retry : bool
        unit_name : str
        '''
        self.retry = retry
        self.unit_name = unit_name



class ResolvedModeResult(Type):
    _toSchema = {'error': 'error', 'mode': 'mode'}
    _toPy = {'error': 'error', 'mode': 'mode'}
    def __init__(self, error=None, mode=None, **unknown_fields):
        '''
        error : Error
        mode : str
        '''
        self.error = Error.from_json(error) if error else None
        self.mode = mode



class ResolvedModeResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~ResolvedModeResult]<~ResolvedModeResult>
        '''
        self.results = [ResolvedModeResult.from_json(o) for o in results or []]



class Resource(Type):
    _toSchema = {'application': 'application', 'charmresource': 'CharmResource', 'id_': 'id', 'pending_id': 'pending-id', 'timestamp': 'timestamp', 'username': 'username'}
    _toPy = {'CharmResource': 'charmresource', 'application': 'application', 'id': 'id_', 'pending-id': 'pending_id', 'timestamp': 'timestamp', 'username': 'username'}
    def __init__(self, charmresource=None, application=None, id_=None, pending_id=None, timestamp=None, username=None, **unknown_fields):
        '''
        charmresource : CharmResource
        application : str
        id_ : str
        pending_id : str
        timestamp : str
        username : str
        '''
        self.charmresource = CharmResource.from_json(charmresource) if charmresource else None
        self.application = application
        self.id_ = id_
        self.pending_id = pending_id
        self.timestamp = timestamp
        self.username = username



class ResourceResult(Type):
    _toSchema = {'errorresult': 'ErrorResult', 'resource': 'resource'}
    _toPy = {'ErrorResult': 'errorresult', 'resource': 'resource'}
    def __init__(self, errorresult=None, resource=None, **unknown_fields):
        '''
        errorresult : ErrorResult
        resource : Resource
        '''
        self.errorresult = ErrorResult.from_json(errorresult) if errorresult else None
        self.resource = Resource.from_json(resource) if resource else None



class ResourcesResult(Type):
    _toSchema = {'charm_store_resources': 'charm-store-resources', 'errorresult': 'ErrorResult', 'resources': 'resources', 'unit_resources': 'unit-resources'}
    _toPy = {'ErrorResult': 'errorresult', 'charm-store-resources': 'charm_store_resources', 'resources': 'resources', 'unit-resources': 'unit_resources'}
    def __init__(self, errorresult=None, charm_store_resources=None, resources=None, unit_resources=None, **unknown_fields):
        '''
        errorresult : ErrorResult
        charm_store_resources : typing.Sequence<+T_co>[~CharmResource]<~CharmResource>
        resources : typing.Sequence<+T_co>[~Resource]<~Resource>
        unit_resources : typing.Sequence<+T_co>[~UnitResources]<~UnitResources>
        '''
        self.errorresult = ErrorResult.from_json(errorresult) if errorresult else None
        self.charm_store_resources = [CharmResource.from_json(o) for o in charm_store_resources or []]
        self.resources = [Resource.from_json(o) for o in resources or []]
        self.unit_resources = [UnitResources.from_json(o) for o in unit_resources or []]



class ResourcesResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~ResourcesResult]<~ResourcesResult>
        '''
        self.results = [ResourcesResult.from_json(o) for o in results or []]



class RestoreArgs(Type):
    _toSchema = {'backup_id': 'backup-id'}
    _toPy = {'backup-id': 'backup_id'}
    def __init__(self, backup_id=None, **unknown_fields):
        '''
        backup_id : str
        '''
        self.backup_id = backup_id



class ResumeReplicationParams(Type):
    _toSchema = {'members': 'members'}
    _toPy = {'members': 'members'}
    def __init__(self, members=None, **unknown_fields):
        '''
        members : typing.Sequence<+T_co>[~Member]<~Member>
        '''
        self.members = [Member.from_json(o) for o in members or []]



class RetryStrategy(Type):
    _toSchema = {'jitter_retry_time': 'jitter-retry-time', 'max_retry_time': 'max-retry-time', 'min_retry_time': 'min-retry-time', 'retry_time_factor': 'retry-time-factor', 'should_retry': 'should-retry'}
    _toPy = {'jitter-retry-time': 'jitter_retry_time', 'max-retry-time': 'max_retry_time', 'min-retry-time': 'min_retry_time', 'retry-time-factor': 'retry_time_factor', 'should-retry': 'should_retry'}
    def __init__(self, jitter_retry_time=None, max_retry_time=None, min_retry_time=None, retry_time_factor=None, should_retry=None, **unknown_fields):
        '''
        jitter_retry_time : bool
        max_retry_time : int
        min_retry_time : int
        retry_time_factor : int
        should_retry : bool
        '''
        self.jitter_retry_time = jitter_retry_time
        self.max_retry_time = max_retry_time
        self.min_retry_time = min_retry_time
        self.retry_time_factor = retry_time_factor
        self.should_retry = should_retry



class RetryStrategyResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : RetryStrategy
        '''
        self.error = Error.from_json(error) if error else None
        self.result = RetryStrategy.from_json(result) if result else None



class RetryStrategyResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~RetryStrategyResult]<~RetryStrategyResult>
        '''
        self.results = [RetryStrategyResult.from_json(o) for o in results or []]



class RunParams(Type):
    _toSchema = {'applications': 'applications', 'commands': 'commands', 'machines': 'machines', 'timeout': 'timeout', 'units': 'units'}
    _toPy = {'applications': 'applications', 'commands': 'commands', 'machines': 'machines', 'timeout': 'timeout', 'units': 'units'}
    def __init__(self, applications=None, commands=None, machines=None, timeout=None, units=None, **unknown_fields):
        '''
        applications : typing.Sequence<+T_co>[str]
        commands : str
        machines : typing.Sequence<+T_co>[str]
        timeout : int
        units : typing.Sequence<+T_co>[str]
        '''
        self.applications = applications
        self.commands = commands
        self.machines = machines
        self.timeout = timeout
        self.units = units



class SSHAddressResult(Type):
    _toSchema = {'address': 'address', 'error': 'error'}
    _toPy = {'address': 'address', 'error': 'error'}
    def __init__(self, address=None, error=None, **unknown_fields):
        '''
        address : str
        error : Error
        '''
        self.address = address
        self.error = Error.from_json(error) if error else None



class SSHAddressResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~SSHAddressResult]<~SSHAddressResult>
        '''
        self.results = [SSHAddressResult.from_json(o) for o in results or []]



class SSHAddressesResult(Type):
    _toSchema = {'addresses': 'addresses', 'error': 'error'}
    _toPy = {'addresses': 'addresses', 'error': 'error'}
    def __init__(self, addresses=None, error=None, **unknown_fields):
        '''
        addresses : typing.Sequence<+T_co>[str]
        error : Error
        '''
        self.addresses = addresses
        self.error = Error.from_json(error) if error else None



class SSHAddressesResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~SSHAddressesResult]<~SSHAddressesResult>
        '''
        self.results = [SSHAddressesResult.from_json(o) for o in results or []]



class SSHHostKeySet(Type):
    _toSchema = {'entity_keys': 'entity-keys'}
    _toPy = {'entity-keys': 'entity_keys'}
    def __init__(self, entity_keys=None, **unknown_fields):
        '''
        entity_keys : typing.Sequence<+T_co>[~SSHHostKeys]<~SSHHostKeys>
        '''
        self.entity_keys = [SSHHostKeys.from_json(o) for o in entity_keys or []]



class SSHHostKeys(Type):
    _toSchema = {'public_keys': 'public-keys', 'tag': 'tag'}
    _toPy = {'public-keys': 'public_keys', 'tag': 'tag'}
    def __init__(self, public_keys=None, tag=None, **unknown_fields):
        '''
        public_keys : typing.Sequence<+T_co>[str]
        tag : str
        '''
        self.public_keys = public_keys
        self.tag = tag



class SSHProxyResult(Type):
    _toSchema = {'use_proxy': 'use-proxy'}
    _toPy = {'use-proxy': 'use_proxy'}
    def __init__(self, use_proxy=None, **unknown_fields):
        '''
        use_proxy : bool
        '''
        self.use_proxy = use_proxy



class SSHPublicKeysResult(Type):
    _toSchema = {'error': 'error', 'public_keys': 'public-keys'}
    _toPy = {'error': 'error', 'public-keys': 'public_keys'}
    def __init__(self, error=None, public_keys=None, **unknown_fields):
        '''
        error : Error
        public_keys : typing.Sequence<+T_co>[str]
        '''
        self.error = Error.from_json(error) if error else None
        self.public_keys = public_keys



class SSHPublicKeysResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~SSHPublicKeysResult]<~SSHPublicKeysResult>
        '''
        self.results = [SSHPublicKeysResult.from_json(o) for o in results or []]



class SerializedModel(Type):
    _toSchema = {'bytes_': 'bytes', 'charms': 'charms', 'tools': 'tools'}
    _toPy = {'bytes': 'bytes_', 'charms': 'charms', 'tools': 'tools'}
    def __init__(self, bytes_=None, charms=None, tools=None, **unknown_fields):
        '''
        bytes_ : typing.Sequence<+T_co>[int]
        charms : typing.Sequence<+T_co>[str]
        tools : typing.Sequence<+T_co>[~SerializedModelTools]<~SerializedModelTools>
        '''
        self.bytes_ = bytes_
        self.charms = charms
        self.tools = [SerializedModelTools.from_json(o) for o in tools or []]



class SerializedModelResource(Type):
    _toSchema = {'application': 'application', 'application_revision': 'application-revision', 'charmstore_revision': 'charmstore-revision', 'name': 'name', 'unit_revisions': 'unit-revisions'}
    _toPy = {'application': 'application', 'application-revision': 'application_revision', 'charmstore-revision': 'charmstore_revision', 'name': 'name', 'unit-revisions': 'unit_revisions'}
    def __init__(self, application=None, application_revision=None, charmstore_revision=None, name=None, unit_revisions=None, **unknown_fields):
        '''
        application : str
        application_revision : SerializedModelResourceRevision
        charmstore_revision : SerializedModelResourceRevision
        name : str
        unit_revisions : typing.Mapping<~KT, +VT_co>[str, ~SerializedModelResourceRevision]<~SerializedModelResourceRevision>
        '''
        self.application = application
        self.application_revision = SerializedModelResourceRevision.from_json(application_revision) if application_revision else None
        self.charmstore_revision = SerializedModelResourceRevision.from_json(charmstore_revision) if charmstore_revision else None
        self.name = name
        self.unit_revisions = unit_revisions



class SerializedModelResourceRevision(Type):
    _toSchema = {'description': 'description', 'fingerprint': 'fingerprint', 'origin': 'origin', 'path': 'path', 'revision': 'revision', 'size': 'size', 'timestamp': 'timestamp', 'type_': 'type', 'username': 'username'}
    _toPy = {'description': 'description', 'fingerprint': 'fingerprint', 'origin': 'origin', 'path': 'path', 'revision': 'revision', 'size': 'size', 'timestamp': 'timestamp', 'type': 'type_', 'username': 'username'}
    def __init__(self, description=None, fingerprint=None, origin=None, path=None, revision=None, size=None, timestamp=None, type_=None, username=None, **unknown_fields):
        '''
        description : str
        fingerprint : str
        origin : str
        path : str
        revision : int
        size : int
        timestamp : str
        type_ : str
        username : str
        '''
        self.description = description
        self.fingerprint = fingerprint
        self.origin = origin
        self.path = path
        self.revision = revision
        self.size = size
        self.timestamp = timestamp
        self.type_ = type_
        self.username = username



class SerializedModelTools(Type):
    _toSchema = {'uri': 'uri', 'version': 'version'}
    _toPy = {'uri': 'uri', 'version': 'version'}
    def __init__(self, uri=None, version=None, **unknown_fields):
        '''
        uri : str
        version : str
        '''
        self.uri = uri
        self.version = version



class SetConstraints(Type):
    _toSchema = {'application': 'application', 'constraints': 'constraints'}
    _toPy = {'application': 'application', 'constraints': 'constraints'}
    def __init__(self, application=None, constraints=None, **unknown_fields):
        '''
        application : str
        constraints : Value
        '''
        self.application = application
        self.constraints = Value.from_json(constraints) if constraints else None



class SetMachineBlockDevices(Type):
    _toSchema = {'machine_block_devices': 'machine-block-devices'}
    _toPy = {'machine-block-devices': 'machine_block_devices'}
    def __init__(self, machine_block_devices=None, **unknown_fields):
        '''
        machine_block_devices : typing.Sequence<+T_co>[~MachineBlockDevices]<~MachineBlockDevices>
        '''
        self.machine_block_devices = [MachineBlockDevices.from_json(o) for o in machine_block_devices or []]



class SetMachineNetworkConfig(Type):
    _toSchema = {'config': 'config', 'tag': 'tag'}
    _toPy = {'config': 'config', 'tag': 'tag'}
    def __init__(self, config=None, tag=None, **unknown_fields):
        '''
        config : typing.Sequence<+T_co>[~NetworkConfig]<~NetworkConfig>
        tag : str
        '''
        self.config = [NetworkConfig.from_json(o) for o in config or []]
        self.tag = tag



class SetMachinesAddresses(Type):
    _toSchema = {'machine_addresses': 'machine-addresses'}
    _toPy = {'machine-addresses': 'machine_addresses'}
    def __init__(self, machine_addresses=None, **unknown_fields):
        '''
        machine_addresses : typing.Sequence<+T_co>[~MachineAddresses]<~MachineAddresses>
        '''
        self.machine_addresses = [MachineAddresses.from_json(o) for o in machine_addresses or []]



class SetMigrationPhaseArgs(Type):
    _toSchema = {'phase': 'phase'}
    _toPy = {'phase': 'phase'}
    def __init__(self, phase=None, **unknown_fields):
        '''
        phase : str
        '''
        self.phase = phase



class SetMigrationStatusMessageArgs(Type):
    _toSchema = {'message': 'message'}
    _toPy = {'message': 'message'}
    def __init__(self, message=None, **unknown_fields):
        '''
        message : str
        '''
        self.message = message



class SetModelAgentVersion(Type):
    _toSchema = {'version': 'version'}
    _toPy = {'version': 'version'}
    def __init__(self, version=None, **unknown_fields):
        '''
        version : Number
        '''
        self.version = Number.from_json(version) if version else None



class SetModelDefaults(Type):
    _toSchema = {'config': 'config'}
    _toPy = {'config': 'config'}
    def __init__(self, config=None, **unknown_fields):
        '''
        config : typing.Sequence<+T_co>[~ModelDefaultValues]<~ModelDefaultValues>
        '''
        self.config = [ModelDefaultValues.from_json(o) for o in config or []]



class SetPayloadStatusArg(Type):
    _toSchema = {'entity': 'Entity', 'status': 'status'}
    _toPy = {'Entity': 'entity', 'status': 'status'}
    def __init__(self, entity=None, status=None, **unknown_fields):
        '''
        entity : Entity
        status : str
        '''
        self.entity = Entity.from_json(entity) if entity else None
        self.status = status



class SetPayloadStatusArgs(Type):
    _toSchema = {'args': 'args'}
    _toPy = {'args': 'args'}
    def __init__(self, args=None, **unknown_fields):
        '''
        args : typing.Sequence<+T_co>[~SetPayloadStatusArg]<~SetPayloadStatusArg>
        '''
        self.args = [SetPayloadStatusArg.from_json(o) for o in args or []]



class SetStatus(Type):
    _toSchema = {'entities': 'entities'}
    _toPy = {'entities': 'entities'}
    def __init__(self, entities=None, **unknown_fields):
        '''
        entities : typing.Sequence<+T_co>[~EntityStatusArgs]<~EntityStatusArgs>
        '''
        self.entities = [EntityStatusArgs.from_json(o) for o in entities or []]



class SetStatusArg(Type):
    _toSchema = {'entity': 'Entity', 'status': 'status'}
    _toPy = {'Entity': 'entity', 'status': 'status'}
    def __init__(self, entity=None, status=None, **unknown_fields):
        '''
        entity : Entity
        status : str
        '''
        self.entity = Entity.from_json(entity) if entity else None
        self.status = status



class SetStatusArgs(Type):
    _toSchema = {'args': 'args'}
    _toPy = {'args': 'args'}
    def __init__(self, args=None, **unknown_fields):
        '''
        args : typing.Sequence<+T_co>[~SetStatusArg]<~SetStatusArg>
        '''
        self.args = [SetStatusArg.from_json(o) for o in args or []]



class Settings(Type):
    _toSchema = {'ftp': 'Ftp', 'http': 'Http', 'https': 'Https', 'noproxy': 'NoProxy'}
    _toPy = {'Ftp': 'ftp', 'Http': 'http', 'Https': 'https', 'NoProxy': 'noproxy'}
    def __init__(self, ftp=None, http=None, https=None, noproxy=None, **unknown_fields):
        '''
        ftp : str
        http : str
        https : str
        noproxy : str
        '''
        self.ftp = ftp
        self.http = http
        self.https = https
        self.noproxy = noproxy



class SettingsResult(Type):
    _toSchema = {'error': 'error', 'settings': 'settings'}
    _toPy = {'error': 'error', 'settings': 'settings'}
    def __init__(self, error=None, settings=None, **unknown_fields):
        '''
        error : Error
        settings : typing.Mapping<~KT, +VT_co>[str, str]
        '''
        self.error = Error.from_json(error) if error else None
        self.settings = settings



class SettingsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~SettingsResult]<~SettingsResult>
        '''
        self.results = [SettingsResult.from_json(o) for o in results or []]



class SingularClaim(Type):
    _toSchema = {'controller_tag': 'controller-tag', 'duration': 'duration', 'model_tag': 'model-tag'}
    _toPy = {'controller-tag': 'controller_tag', 'duration': 'duration', 'model-tag': 'model_tag'}
    def __init__(self, controller_tag=None, duration=None, model_tag=None, **unknown_fields):
        '''
        controller_tag : str
        duration : int
        model_tag : str
        '''
        self.controller_tag = controller_tag
        self.duration = duration
        self.model_tag = model_tag



class SingularClaims(Type):
    _toSchema = {'claims': 'claims'}
    _toPy = {'claims': 'claims'}
    def __init__(self, claims=None, **unknown_fields):
        '''
        claims : typing.Sequence<+T_co>[~SingularClaim]<~SingularClaim>
        '''
        self.claims = [SingularClaim.from_json(o) for o in claims or []]



class Space(Type):
    _toSchema = {'error': 'error', 'name': 'name', 'subnets': 'subnets'}
    _toPy = {'error': 'error', 'name': 'name', 'subnets': 'subnets'}
    def __init__(self, error=None, name=None, subnets=None, **unknown_fields):
        '''
        error : Error
        name : str
        subnets : typing.Sequence<+T_co>[~Subnet]<~Subnet>
        '''
        self.error = Error.from_json(error) if error else None
        self.name = name
        self.subnets = [Subnet.from_json(o) for o in subnets or []]



class SpaceResult(Type):
    _toSchema = {'error': 'error', 'tag': 'tag'}
    _toPy = {'error': 'error', 'tag': 'tag'}
    def __init__(self, error=None, tag=None, **unknown_fields):
        '''
        error : Error
        tag : str
        '''
        self.error = Error.from_json(error) if error else None
        self.tag = tag



class SpaceResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~SpaceResult]<~SpaceResult>
        '''
        self.results = [SpaceResult.from_json(o) for o in results or []]



class StateServingInfo(Type):
    _toSchema = {'api_port': 'api-port', 'ca_private_key': 'ca-private-key', 'cert': 'cert', 'private_key': 'private-key', 'shared_secret': 'shared-secret', 'state_port': 'state-port', 'system_identity': 'system-identity'}
    _toPy = {'api-port': 'api_port', 'ca-private-key': 'ca_private_key', 'cert': 'cert', 'private-key': 'private_key', 'shared-secret': 'shared_secret', 'state-port': 'state_port', 'system-identity': 'system_identity'}
    def __init__(self, api_port=None, ca_private_key=None, cert=None, private_key=None, shared_secret=None, state_port=None, system_identity=None, **unknown_fields):
        '''
        api_port : int
        ca_private_key : str
        cert : str
        private_key : str
        shared_secret : str
        state_port : int
        system_identity : str
        '''
        self.api_port = api_port
        self.ca_private_key = ca_private_key
        self.cert = cert
        self.private_key = private_key
        self.shared_secret = shared_secret
        self.state_port = state_port
        self.system_identity = system_identity



class StatusHistoryFilter(Type):
    _toSchema = {'date': 'date', 'delta': 'delta', 'size': 'size'}
    _toPy = {'date': 'date', 'delta': 'delta', 'size': 'size'}
    def __init__(self, date=None, delta=None, size=None, **unknown_fields):
        '''
        date : str
        delta : int
        size : int
        '''
        self.date = date
        self.delta = delta
        self.size = size



class StatusHistoryPruneArgs(Type):
    _toSchema = {'max_history_mb': 'max-history-mb', 'max_history_time': 'max-history-time'}
    _toPy = {'max-history-mb': 'max_history_mb', 'max-history-time': 'max_history_time'}
    def __init__(self, max_history_mb=None, max_history_time=None, **unknown_fields):
        '''
        max_history_mb : int
        max_history_time : int
        '''
        self.max_history_mb = max_history_mb
        self.max_history_time = max_history_time



class StatusHistoryRequest(Type):
    _toSchema = {'filter_': 'filter', 'historykind': 'historyKind', 'size': 'size', 'tag': 'tag'}
    _toPy = {'filter': 'filter_', 'historyKind': 'historykind', 'size': 'size', 'tag': 'tag'}
    def __init__(self, filter_=None, historykind=None, size=None, tag=None, **unknown_fields):
        '''
        filter_ : StatusHistoryFilter
        historykind : str
        size : int
        tag : str
        '''
        self.filter_ = StatusHistoryFilter.from_json(filter_) if filter_ else None
        self.historykind = historykind
        self.size = size
        self.tag = tag



class StatusHistoryRequests(Type):
    _toSchema = {'requests': 'requests'}
    _toPy = {'requests': 'requests'}
    def __init__(self, requests=None, **unknown_fields):
        '''
        requests : typing.Sequence<+T_co>[~StatusHistoryRequest]<~StatusHistoryRequest>
        '''
        self.requests = [StatusHistoryRequest.from_json(o) for o in requests or []]



class StatusHistoryResult(Type):
    _toSchema = {'error': 'error', 'history': 'history'}
    _toPy = {'error': 'error', 'history': 'history'}
    def __init__(self, error=None, history=None, **unknown_fields):
        '''
        error : Error
        history : History
        '''
        self.error = Error.from_json(error) if error else None
        self.history = History.from_json(history) if history else None



class StatusHistoryResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~StatusHistoryResult]<~StatusHistoryResult>
        '''
        self.results = [StatusHistoryResult.from_json(o) for o in results or []]



class StatusParams(Type):
    _toSchema = {'patterns': 'patterns'}
    _toPy = {'patterns': 'patterns'}
    def __init__(self, patterns=None, **unknown_fields):
        '''
        patterns : typing.Sequence<+T_co>[str]
        '''
        self.patterns = patterns



class StatusResult(Type):
    _toSchema = {'data': 'data', 'error': 'error', 'id_': 'id', 'info': 'info', 'life': 'life', 'since': 'since', 'status': 'status'}
    _toPy = {'data': 'data', 'error': 'error', 'id': 'id_', 'info': 'info', 'life': 'life', 'since': 'since', 'status': 'status'}
    def __init__(self, data=None, error=None, id_=None, info=None, life=None, since=None, status=None, **unknown_fields):
        '''
        data : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        error : Error
        id_ : str
        info : str
        life : str
        since : str
        status : str
        '''
        self.data = data
        self.error = Error.from_json(error) if error else None
        self.id_ = id_
        self.info = info
        self.life = life
        self.since = since
        self.status = status



class StatusResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~StatusResult]<~StatusResult>
        '''
        self.results = [StatusResult.from_json(o) for o in results or []]



class StorageAddParams(Type):
    _toSchema = {'name': 'name', 'storage': 'storage', 'unit': 'unit'}
    _toPy = {'name': 'name', 'storage': 'storage', 'unit': 'unit'}
    def __init__(self, name=None, storage=None, unit=None, **unknown_fields):
        '''
        name : str
        storage : StorageConstraints
        unit : str
        '''
        self.name = name
        self.storage = StorageConstraints.from_json(storage) if storage else None
        self.unit = unit



class StorageAttachment(Type):
    _toSchema = {'kind': 'kind', 'life': 'life', 'location': 'location', 'owner_tag': 'owner-tag', 'storage_tag': 'storage-tag', 'unit_tag': 'unit-tag'}
    _toPy = {'kind': 'kind', 'life': 'life', 'location': 'location', 'owner-tag': 'owner_tag', 'storage-tag': 'storage_tag', 'unit-tag': 'unit_tag'}
    def __init__(self, kind=None, life=None, location=None, owner_tag=None, storage_tag=None, unit_tag=None, **unknown_fields):
        '''
        kind : int
        life : str
        location : str
        owner_tag : str
        storage_tag : str
        unit_tag : str
        '''
        self.kind = kind
        self.life = life
        self.location = location
        self.owner_tag = owner_tag
        self.storage_tag = storage_tag
        self.unit_tag = unit_tag



class StorageAttachmentDetails(Type):
    _toSchema = {'location': 'location', 'machine_tag': 'machine-tag', 'storage_tag': 'storage-tag', 'unit_tag': 'unit-tag'}
    _toPy = {'location': 'location', 'machine-tag': 'machine_tag', 'storage-tag': 'storage_tag', 'unit-tag': 'unit_tag'}
    def __init__(self, location=None, machine_tag=None, storage_tag=None, unit_tag=None, **unknown_fields):
        '''
        location : str
        machine_tag : str
        storage_tag : str
        unit_tag : str
        '''
        self.location = location
        self.machine_tag = machine_tag
        self.storage_tag = storage_tag
        self.unit_tag = unit_tag



class StorageAttachmentId(Type):
    _toSchema = {'storage_tag': 'storage-tag', 'unit_tag': 'unit-tag'}
    _toPy = {'storage-tag': 'storage_tag', 'unit-tag': 'unit_tag'}
    def __init__(self, storage_tag=None, unit_tag=None, **unknown_fields):
        '''
        storage_tag : str
        unit_tag : str
        '''
        self.storage_tag = storage_tag
        self.unit_tag = unit_tag



class StorageAttachmentIds(Type):
    _toSchema = {'ids': 'ids'}
    _toPy = {'ids': 'ids'}
    def __init__(self, ids=None, **unknown_fields):
        '''
        ids : typing.Sequence<+T_co>[~StorageAttachmentId]<~StorageAttachmentId>
        '''
        self.ids = [StorageAttachmentId.from_json(o) for o in ids or []]



class StorageAttachmentIdsResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : StorageAttachmentIds
        '''
        self.error = Error.from_json(error) if error else None
        self.result = StorageAttachmentIds.from_json(result) if result else None



class StorageAttachmentIdsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~StorageAttachmentIdsResult]<~StorageAttachmentIdsResult>
        '''
        self.results = [StorageAttachmentIdsResult.from_json(o) for o in results or []]



class StorageAttachmentResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : StorageAttachment
        '''
        self.error = Error.from_json(error) if error else None
        self.result = StorageAttachment.from_json(result) if result else None



class StorageAttachmentResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~StorageAttachmentResult]<~StorageAttachmentResult>
        '''
        self.results = [StorageAttachmentResult.from_json(o) for o in results or []]



class StorageConstraints(Type):
    _toSchema = {'count': 'count', 'pool': 'pool', 'size': 'size'}
    _toPy = {'count': 'count', 'pool': 'pool', 'size': 'size'}
    def __init__(self, count=None, pool=None, size=None, **unknown_fields):
        '''
        count : int
        pool : str
        size : int
        '''
        self.count = count
        self.pool = pool
        self.size = size



class StorageDetails(Type):
    _toSchema = {'attachments': 'attachments', 'kind': 'kind', 'owner_tag': 'owner-tag', 'persistent': 'persistent', 'status': 'status', 'storage_tag': 'storage-tag'}
    _toPy = {'attachments': 'attachments', 'kind': 'kind', 'owner-tag': 'owner_tag', 'persistent': 'persistent', 'status': 'status', 'storage-tag': 'storage_tag'}
    def __init__(self, attachments=None, kind=None, owner_tag=None, persistent=None, status=None, storage_tag=None, **unknown_fields):
        '''
        attachments : typing.Mapping<~KT, +VT_co>[str, ~StorageAttachmentDetails]<~StorageAttachmentDetails>
        kind : int
        owner_tag : str
        persistent : bool
        status : EntityStatus
        storage_tag : str
        '''
        self.attachments = attachments
        self.kind = kind
        self.owner_tag = owner_tag
        self.persistent = persistent
        self.status = EntityStatus.from_json(status) if status else None
        self.storage_tag = storage_tag



class StorageDetailsListResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : typing.Sequence<+T_co>[~StorageDetails]<~StorageDetails>
        '''
        self.error = Error.from_json(error) if error else None
        self.result = [StorageDetails.from_json(o) for o in result or []]



class StorageDetailsListResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~StorageDetailsListResult]<~StorageDetailsListResult>
        '''
        self.results = [StorageDetailsListResult.from_json(o) for o in results or []]



class StorageDetailsResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : StorageDetails
        '''
        self.error = Error.from_json(error) if error else None
        self.result = StorageDetails.from_json(result) if result else None



class StorageDetailsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~StorageDetailsResult]<~StorageDetailsResult>
        '''
        self.results = [StorageDetailsResult.from_json(o) for o in results or []]



class StorageFilter(Type):
    _toSchema = {}
    _toPy = {}
    def __init__(self, **unknown_fields):
        '''

        '''
        pass



class StorageFilters(Type):
    _toSchema = {'filters': 'filters'}
    _toPy = {'filters': 'filters'}
    def __init__(self, filters=None, **unknown_fields):
        '''
        filters : typing.Sequence<+T_co>[~StorageFilter]<~StorageFilter>
        '''
        self.filters = [StorageFilter.from_json(o) for o in filters or []]



class StoragePool(Type):
    _toSchema = {'attrs': 'attrs', 'name': 'name', 'provider': 'provider'}
    _toPy = {'attrs': 'attrs', 'name': 'name', 'provider': 'provider'}
    def __init__(self, attrs=None, name=None, provider=None, **unknown_fields):
        '''
        attrs : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        name : str
        provider : str
        '''
        self.attrs = attrs
        self.name = name
        self.provider = provider



class StoragePoolFilter(Type):
    _toSchema = {'names': 'names', 'providers': 'providers'}
    _toPy = {'names': 'names', 'providers': 'providers'}
    def __init__(self, names=None, providers=None, **unknown_fields):
        '''
        names : typing.Sequence<+T_co>[str]
        providers : typing.Sequence<+T_co>[str]
        '''
        self.names = names
        self.providers = providers



class StoragePoolFilters(Type):
    _toSchema = {'filters': 'filters'}
    _toPy = {'filters': 'filters'}
    def __init__(self, filters=None, **unknown_fields):
        '''
        filters : typing.Sequence<+T_co>[~StoragePoolFilter]<~StoragePoolFilter>
        '''
        self.filters = [StoragePoolFilter.from_json(o) for o in filters or []]



class StoragePoolsResult(Type):
    _toSchema = {'error': 'error', 'storage_pools': 'storage-pools'}
    _toPy = {'error': 'error', 'storage-pools': 'storage_pools'}
    def __init__(self, error=None, storage_pools=None, **unknown_fields):
        '''
        error : Error
        storage_pools : typing.Sequence<+T_co>[~StoragePool]<~StoragePool>
        '''
        self.error = Error.from_json(error) if error else None
        self.storage_pools = [StoragePool.from_json(o) for o in storage_pools or []]



class StoragePoolsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~StoragePoolsResult]<~StoragePoolsResult>
        '''
        self.results = [StoragePoolsResult.from_json(o) for o in results or []]



class StoragesAddParams(Type):
    _toSchema = {'storages': 'storages'}
    _toPy = {'storages': 'storages'}
    def __init__(self, storages=None, **unknown_fields):
        '''
        storages : typing.Sequence<+T_co>[~StorageAddParams]<~StorageAddParams>
        '''
        self.storages = [StorageAddParams.from_json(o) for o in storages or []]



class StringBoolResult(Type):
    _toSchema = {'error': 'error', 'ok': 'ok', 'result': 'result'}
    _toPy = {'error': 'error', 'ok': 'ok', 'result': 'result'}
    def __init__(self, error=None, ok=None, result=None, **unknown_fields):
        '''
        error : Error
        ok : bool
        result : str
        '''
        self.error = Error.from_json(error) if error else None
        self.ok = ok
        self.result = result



class StringBoolResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~StringBoolResult]<~StringBoolResult>
        '''
        self.results = [StringBoolResult.from_json(o) for o in results or []]



class StringResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : str
        '''
        self.error = Error.from_json(error) if error else None
        self.result = result



class StringResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~StringResult]<~StringResult>
        '''
        self.results = [StringResult.from_json(o) for o in results or []]



class StringsResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : typing.Sequence<+T_co>[str]
        '''
        self.error = Error.from_json(error) if error else None
        self.result = result



class StringsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~StringsResult]<~StringsResult>
        '''
        self.results = [StringsResult.from_json(o) for o in results or []]



class StringsWatchResult(Type):
    _toSchema = {'changes': 'changes', 'error': 'error', 'watcher_id': 'watcher-id'}
    _toPy = {'changes': 'changes', 'error': 'error', 'watcher-id': 'watcher_id'}
    def __init__(self, changes=None, error=None, watcher_id=None, **unknown_fields):
        '''
        changes : typing.Sequence<+T_co>[str]
        error : Error
        watcher_id : str
        '''
        self.changes = changes
        self.error = Error.from_json(error) if error else None
        self.watcher_id = watcher_id



class StringsWatchResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~StringsWatchResult]<~StringsWatchResult>
        '''
        self.results = [StringsWatchResult.from_json(o) for o in results or []]



class Subnet(Type):
    _toSchema = {'cidr': 'cidr', 'life': 'life', 'provider_id': 'provider-id', 'space_tag': 'space-tag', 'status': 'status', 'vlan_tag': 'vlan-tag', 'zones': 'zones'}
    _toPy = {'cidr': 'cidr', 'life': 'life', 'provider-id': 'provider_id', 'space-tag': 'space_tag', 'status': 'status', 'vlan-tag': 'vlan_tag', 'zones': 'zones'}
    def __init__(self, cidr=None, life=None, provider_id=None, space_tag=None, status=None, vlan_tag=None, zones=None, **unknown_fields):
        '''
        cidr : str
        life : str
        provider_id : str
        space_tag : str
        status : str
        vlan_tag : int
        zones : typing.Sequence<+T_co>[str]
        '''
        self.cidr = cidr
        self.life = life
        self.provider_id = provider_id
        self.space_tag = space_tag
        self.status = status
        self.vlan_tag = vlan_tag
        self.zones = zones



class SubnetsFilters(Type):
    _toSchema = {'space_tag': 'space-tag', 'zone': 'zone'}
    _toPy = {'space-tag': 'space_tag', 'zone': 'zone'}
    def __init__(self, space_tag=None, zone=None, **unknown_fields):
        '''
        space_tag : str
        zone : str
        '''
        self.space_tag = space_tag
        self.zone = zone



class Tools(Type):
    _toSchema = {'sha256': 'sha256', 'size': 'size', 'url': 'url', 'version': 'version'}
    _toPy = {'sha256': 'sha256', 'size': 'size', 'url': 'url', 'version': 'version'}
    def __init__(self, sha256=None, size=None, url=None, version=None, **unknown_fields):
        '''
        sha256 : str
        size : int
        url : str
        version : Binary
        '''
        self.sha256 = sha256
        self.size = size
        self.url = url
        self.version = Binary.from_json(version) if version else None



class ToolsResult(Type):
    _toSchema = {'disable_ssl_hostname_verification': 'disable-ssl-hostname-verification', 'error': 'error', 'tools': 'tools'}
    _toPy = {'disable-ssl-hostname-verification': 'disable_ssl_hostname_verification', 'error': 'error', 'tools': 'tools'}
    def __init__(self, disable_ssl_hostname_verification=None, error=None, tools=None, **unknown_fields):
        '''
        disable_ssl_hostname_verification : bool
        error : Error
        tools : typing.Sequence<+T_co>[~Tools]<~Tools>
        '''
        self.disable_ssl_hostname_verification = disable_ssl_hostname_verification
        self.error = Error.from_json(error) if error else None
        self.tools = [Tools.from_json(o) for o in tools or []]



class ToolsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~ToolsResult]<~ToolsResult>
        '''
        self.results = [ToolsResult.from_json(o) for o in results or []]



class TrackArgs(Type):
    _toSchema = {'payloads': 'payloads'}
    _toPy = {'payloads': 'payloads'}
    def __init__(self, payloads=None, **unknown_fields):
        '''
        payloads : typing.Sequence<+T_co>[~Payload]<~Payload>
        '''
        self.payloads = [Payload.from_json(o) for o in payloads or []]



class TrackPayloadArgs(Type):
    _toSchema = {'payloads': 'payloads'}
    _toPy = {'payloads': 'payloads'}
    def __init__(self, payloads=None, **unknown_fields):
        '''
        payloads : typing.Sequence<+T_co>[~Payload]<~Payload>
        '''
        self.payloads = [Payload.from_json(o) for o in payloads or []]



class UndertakerModelInfo(Type):
    _toSchema = {'global_name': 'global-name', 'is_system': 'is-system', 'life': 'life', 'name': 'name', 'uuid': 'uuid'}
    _toPy = {'global-name': 'global_name', 'is-system': 'is_system', 'life': 'life', 'name': 'name', 'uuid': 'uuid'}
    def __init__(self, global_name=None, is_system=None, life=None, name=None, uuid=None, **unknown_fields):
        '''
        global_name : str
        is_system : bool
        life : str
        name : str
        uuid : str
        '''
        self.global_name = global_name
        self.is_system = is_system
        self.life = life
        self.name = name
        self.uuid = uuid



class UndertakerModelInfoResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : UndertakerModelInfo
        '''
        self.error = Error.from_json(error) if error else None
        self.result = UndertakerModelInfo.from_json(result) if result else None



class UnitNetworkConfig(Type):
    _toSchema = {'binding_name': 'binding-name', 'unit_tag': 'unit-tag'}
    _toPy = {'binding-name': 'binding_name', 'unit-tag': 'unit_tag'}
    def __init__(self, binding_name=None, unit_tag=None, **unknown_fields):
        '''
        binding_name : str
        unit_tag : str
        '''
        self.binding_name = binding_name
        self.unit_tag = unit_tag



class UnitNetworkConfigResult(Type):
    _toSchema = {'error': 'error', 'info': 'info'}
    _toPy = {'error': 'error', 'info': 'info'}
    def __init__(self, error=None, info=None, **unknown_fields):
        '''
        error : Error
        info : typing.Sequence<+T_co>[~NetworkConfig]<~NetworkConfig>
        '''
        self.error = Error.from_json(error) if error else None
        self.info = [NetworkConfig.from_json(o) for o in info or []]



class UnitNetworkConfigResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~UnitNetworkConfigResult]<~UnitNetworkConfigResult>
        '''
        self.results = [UnitNetworkConfigResult.from_json(o) for o in results or []]



class UnitResourceResult(Type):
    _toSchema = {'errorresult': 'ErrorResult', 'resource': 'resource'}
    _toPy = {'ErrorResult': 'errorresult', 'resource': 'resource'}
    def __init__(self, errorresult=None, resource=None, **unknown_fields):
        '''
        errorresult : ErrorResult
        resource : Resource
        '''
        self.errorresult = ErrorResult.from_json(errorresult) if errorresult else None
        self.resource = Resource.from_json(resource) if resource else None



class UnitResources(Type):
    _toSchema = {'download_progress': 'download-progress', 'entity': 'Entity', 'resources': 'resources'}
    _toPy = {'Entity': 'entity', 'download-progress': 'download_progress', 'resources': 'resources'}
    def __init__(self, entity=None, download_progress=None, resources=None, **unknown_fields):
        '''
        entity : Entity
        download_progress : typing.Mapping<~KT, +VT_co>[str, int]
        resources : typing.Sequence<+T_co>[~Resource]<~Resource>
        '''
        self.entity = Entity.from_json(entity) if entity else None
        self.download_progress = download_progress
        self.resources = [Resource.from_json(o) for o in resources or []]



class UnitResourcesResult(Type):
    _toSchema = {'errorresult': 'ErrorResult', 'resources': 'resources'}
    _toPy = {'ErrorResult': 'errorresult', 'resources': 'resources'}
    def __init__(self, errorresult=None, resources=None, **unknown_fields):
        '''
        errorresult : ErrorResult
        resources : typing.Sequence<+T_co>[~UnitResourceResult]<~UnitResourceResult>
        '''
        self.errorresult = ErrorResult.from_json(errorresult) if errorresult else None
        self.resources = [UnitResourceResult.from_json(o) for o in resources or []]



class UnitSettings(Type):
    _toSchema = {'version': 'version'}
    _toPy = {'version': 'version'}
    def __init__(self, version=None, **unknown_fields):
        '''
        version : int
        '''
        self.version = version



class UnitStatus(Type):
    _toSchema = {'agent_status': 'agent-status', 'charm': 'charm', 'leader': 'leader', 'machine': 'machine', 'opened_ports': 'opened-ports', 'public_address': 'public-address', 'subordinates': 'subordinates', 'workload_status': 'workload-status', 'workload_version': 'workload-version'}
    _toPy = {'agent-status': 'agent_status', 'charm': 'charm', 'leader': 'leader', 'machine': 'machine', 'opened-ports': 'opened_ports', 'public-address': 'public_address', 'subordinates': 'subordinates', 'workload-status': 'workload_status', 'workload-version': 'workload_version'}
    def __init__(self, agent_status=None, charm=None, leader=None, machine=None, opened_ports=None, public_address=None, subordinates=None, workload_status=None, workload_version=None, **unknown_fields):
        '''
        agent_status : DetailedStatus
        charm : str
        leader : bool
        machine : str
        opened_ports : typing.Sequence<+T_co>[str]
        public_address : str
        subordinates : typing.Mapping<~KT, +VT_co>[str, ~UnitStatus]<~UnitStatus>
        workload_status : DetailedStatus
        workload_version : str
        '''
        self.agent_status = DetailedStatus.from_json(agent_status) if agent_status else None
        self.charm = charm
        self.leader = leader
        self.machine = machine
        self.opened_ports = opened_ports
        self.public_address = public_address
        self.subordinates = subordinates
        self.workload_status = DetailedStatus.from_json(workload_status) if workload_status else None
        self.workload_version = workload_version



class UnitsNetworkConfig(Type):
    _toSchema = {'args': 'args'}
    _toPy = {'args': 'args'}
    def __init__(self, args=None, **unknown_fields):
        '''
        args : typing.Sequence<+T_co>[~UnitNetworkConfig]<~UnitNetworkConfig>
        '''
        self.args = [UnitNetworkConfig.from_json(o) for o in args or []]



class UnsetModelDefaults(Type):
    _toSchema = {'keys': 'keys'}
    _toPy = {'keys': 'keys'}
    def __init__(self, keys=None, **unknown_fields):
        '''
        keys : typing.Sequence<+T_co>[~ModelUnsetKeys]<~ModelUnsetKeys>
        '''
        self.keys = [ModelUnsetKeys.from_json(o) for o in keys or []]



class UpdateBehavior(Type):
    _toSchema = {'enable_os_refresh_update': 'enable-os-refresh-update', 'enable_os_upgrade': 'enable-os-upgrade'}
    _toPy = {'enable-os-refresh-update': 'enable_os_refresh_update', 'enable-os-upgrade': 'enable_os_upgrade'}
    def __init__(self, enable_os_refresh_update=None, enable_os_upgrade=None, **unknown_fields):
        '''
        enable_os_refresh_update : bool
        enable_os_upgrade : bool
        '''
        self.enable_os_refresh_update = enable_os_refresh_update
        self.enable_os_upgrade = enable_os_upgrade



class UpdateCloudCredential(Type):
    _toSchema = {'credential': 'credential', 'tag': 'tag'}
    _toPy = {'credential': 'credential', 'tag': 'tag'}
    def __init__(self, credential=None, tag=None, **unknown_fields):
        '''
        credential : CloudCredential
        tag : str
        '''
        self.credential = CloudCredential.from_json(credential) if credential else None
        self.tag = tag



class UpdateCloudCredentials(Type):
    _toSchema = {'credentials': 'credentials'}
    _toPy = {'credentials': 'credentials'}
    def __init__(self, credentials=None, **unknown_fields):
        '''
        credentials : typing.Sequence<+T_co>[~UpdateCloudCredential]<~UpdateCloudCredential>
        '''
        self.credentials = [UpdateCloudCredential.from_json(o) for o in credentials or []]



class UpgradeMongoParams(Type):
    _toSchema = {'target': 'target'}
    _toPy = {'target': 'target'}
    def __init__(self, target=None, **unknown_fields):
        '''
        target : MongoVersion
        '''
        self.target = MongoVersion.from_json(target) if target else None



class UserAccess(Type):
    _toSchema = {'access': 'access', 'user_tag': 'user-tag'}
    _toPy = {'access': 'access', 'user-tag': 'user_tag'}
    def __init__(self, access=None, user_tag=None, **unknown_fields):
        '''
        access : str
        user_tag : str
        '''
        self.access = access
        self.user_tag = user_tag



class UserAccessResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : UserAccess
        '''
        self.error = Error.from_json(error) if error else None
        self.result = UserAccess.from_json(result) if result else None



class UserAccessResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~UserAccessResult]<~UserAccessResult>
        '''
        self.results = [UserAccessResult.from_json(o) for o in results or []]



class UserCloud(Type):
    _toSchema = {'cloud_tag': 'cloud-tag', 'user_tag': 'user-tag'}
    _toPy = {'cloud-tag': 'cloud_tag', 'user-tag': 'user_tag'}
    def __init__(self, cloud_tag=None, user_tag=None, **unknown_fields):
        '''
        cloud_tag : str
        user_tag : str
        '''
        self.cloud_tag = cloud_tag
        self.user_tag = user_tag



class UserClouds(Type):
    _toSchema = {'user_clouds': 'user-clouds'}
    _toPy = {'user-clouds': 'user_clouds'}
    def __init__(self, user_clouds=None, **unknown_fields):
        '''
        user_clouds : typing.Sequence<+T_co>[~UserCloud]<~UserCloud>
        '''
        self.user_clouds = [UserCloud.from_json(o) for o in user_clouds or []]



class UserInfo(Type):
    _toSchema = {'access': 'access', 'created_by': 'created-by', 'date_created': 'date-created', 'disabled': 'disabled', 'display_name': 'display-name', 'last_connection': 'last-connection', 'username': 'username'}
    _toPy = {'access': 'access', 'created-by': 'created_by', 'date-created': 'date_created', 'disabled': 'disabled', 'display-name': 'display_name', 'last-connection': 'last_connection', 'username': 'username'}
    def __init__(self, access=None, created_by=None, date_created=None, disabled=None, display_name=None, last_connection=None, username=None, **unknown_fields):
        '''
        access : str
        created_by : str
        date_created : str
        disabled : bool
        display_name : str
        last_connection : str
        username : str
        '''
        self.access = access
        self.created_by = created_by
        self.date_created = date_created
        self.disabled = disabled
        self.display_name = display_name
        self.last_connection = last_connection
        self.username = username



class UserInfoRequest(Type):
    _toSchema = {'entities': 'entities', 'include_disabled': 'include-disabled'}
    _toPy = {'entities': 'entities', 'include-disabled': 'include_disabled'}
    def __init__(self, entities=None, include_disabled=None, **unknown_fields):
        '''
        entities : typing.Sequence<+T_co>[~Entity]<~Entity>
        include_disabled : bool
        '''
        self.entities = [Entity.from_json(o) for o in entities or []]
        self.include_disabled = include_disabled



class UserInfoResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : UserInfo
        '''
        self.error = Error.from_json(error) if error else None
        self.result = UserInfo.from_json(result) if result else None



class UserInfoResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~UserInfoResult]<~UserInfoResult>
        '''
        self.results = [UserInfoResult.from_json(o) for o in results or []]



class UserModel(Type):
    _toSchema = {'last_connection': 'last-connection', 'model': 'model'}
    _toPy = {'last-connection': 'last_connection', 'model': 'model'}
    def __init__(self, last_connection=None, model=None, **unknown_fields):
        '''
        last_connection : str
        model : Model
        '''
        self.last_connection = last_connection
        self.model = Model.from_json(model) if model else None



class UserModelList(Type):
    _toSchema = {'user_models': 'user-models'}
    _toPy = {'user-models': 'user_models'}
    def __init__(self, user_models=None, **unknown_fields):
        '''
        user_models : typing.Sequence<+T_co>[~UserModel]<~UserModel>
        '''
        self.user_models = [UserModel.from_json(o) for o in user_models or []]



class Value(Type):
    _toSchema = {'arch': 'arch', 'container': 'container', 'cores': 'cores', 'cpu_power': 'cpu-power', 'instance_type': 'instance-type', 'mem': 'mem', 'root_disk': 'root-disk', 'spaces': 'spaces', 'tags': 'tags', 'virt_type': 'virt-type'}
    _toPy = {'arch': 'arch', 'container': 'container', 'cores': 'cores', 'cpu-power': 'cpu_power', 'instance-type': 'instance_type', 'mem': 'mem', 'root-disk': 'root_disk', 'spaces': 'spaces', 'tags': 'tags', 'virt-type': 'virt_type'}
    def __init__(self, arch=None, container=None, cores=None, cpu_power=None, instance_type=None, mem=None, root_disk=None, spaces=None, tags=None, virt_type=None, **unknown_fields):
        '''
        arch : str
        container : str
        cores : int
        cpu_power : int
        instance_type : str
        mem : int
        root_disk : int
        spaces : typing.Sequence<+T_co>[str]
        tags : typing.Sequence<+T_co>[str]
        virt_type : str
        '''
        self.arch = arch
        self.container = container
        self.cores = cores
        self.cpu_power = cpu_power
        self.instance_type = instance_type
        self.mem = mem
        self.root_disk = root_disk
        self.spaces = spaces
        self.tags = tags
        self.virt_type = virt_type



class Version(Type):
    _toSchema = {'version': 'version'}
    _toPy = {'version': 'version'}
    def __init__(self, version=None, **unknown_fields):
        '''
        version : Binary
        '''
        self.version = Binary.from_json(version) if version else None



class VersionResult(Type):
    _toSchema = {'error': 'error', 'version': 'version'}
    _toPy = {'error': 'error', 'version': 'version'}
    def __init__(self, error=None, version=None, **unknown_fields):
        '''
        error : Error
        version : Number
        '''
        self.error = Error.from_json(error) if error else None
        self.version = Number.from_json(version) if version else None



class VersionResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~VersionResult]<~VersionResult>
        '''
        self.results = [VersionResult.from_json(o) for o in results or []]



class Volume(Type):
    _toSchema = {'info': 'info', 'volume_tag': 'volume-tag'}
    _toPy = {'info': 'info', 'volume-tag': 'volume_tag'}
    def __init__(self, info=None, volume_tag=None, **unknown_fields):
        '''
        info : VolumeInfo
        volume_tag : str
        '''
        self.info = VolumeInfo.from_json(info) if info else None
        self.volume_tag = volume_tag



class VolumeAttachment(Type):
    _toSchema = {'info': 'info', 'machine_tag': 'machine-tag', 'volume_tag': 'volume-tag'}
    _toPy = {'info': 'info', 'machine-tag': 'machine_tag', 'volume-tag': 'volume_tag'}
    def __init__(self, info=None, machine_tag=None, volume_tag=None, **unknown_fields):
        '''
        info : VolumeAttachmentInfo
        machine_tag : str
        volume_tag : str
        '''
        self.info = VolumeAttachmentInfo.from_json(info) if info else None
        self.machine_tag = machine_tag
        self.volume_tag = volume_tag



class VolumeAttachmentDetails(Type):
    _toSchema = {'life': 'life', 'volumeattachmentinfo': 'VolumeAttachmentInfo'}
    _toPy = {'VolumeAttachmentInfo': 'volumeattachmentinfo', 'life': 'life'}
    def __init__(self, volumeattachmentinfo=None, life=None, **unknown_fields):
        '''
        volumeattachmentinfo : VolumeAttachmentInfo
        life : str
        '''
        self.volumeattachmentinfo = VolumeAttachmentInfo.from_json(volumeattachmentinfo) if volumeattachmentinfo else None
        self.life = life



class VolumeAttachmentInfo(Type):
    _toSchema = {'bus_address': 'bus-address', 'device_link': 'device-link', 'device_name': 'device-name', 'read_only': 'read-only'}
    _toPy = {'bus-address': 'bus_address', 'device-link': 'device_link', 'device-name': 'device_name', 'read-only': 'read_only'}
    def __init__(self, bus_address=None, device_link=None, device_name=None, read_only=None, **unknown_fields):
        '''
        bus_address : str
        device_link : str
        device_name : str
        read_only : bool
        '''
        self.bus_address = bus_address
        self.device_link = device_link
        self.device_name = device_name
        self.read_only = read_only



class VolumeAttachmentParams(Type):
    _toSchema = {'instance_id': 'instance-id', 'machine_tag': 'machine-tag', 'provider': 'provider', 'read_only': 'read-only', 'volume_id': 'volume-id', 'volume_tag': 'volume-tag'}
    _toPy = {'instance-id': 'instance_id', 'machine-tag': 'machine_tag', 'provider': 'provider', 'read-only': 'read_only', 'volume-id': 'volume_id', 'volume-tag': 'volume_tag'}
    def __init__(self, instance_id=None, machine_tag=None, provider=None, read_only=None, volume_id=None, volume_tag=None, **unknown_fields):
        '''
        instance_id : str
        machine_tag : str
        provider : str
        read_only : bool
        volume_id : str
        volume_tag : str
        '''
        self.instance_id = instance_id
        self.machine_tag = machine_tag
        self.provider = provider
        self.read_only = read_only
        self.volume_id = volume_id
        self.volume_tag = volume_tag



class VolumeAttachmentParamsResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : VolumeAttachmentParams
        '''
        self.error = Error.from_json(error) if error else None
        self.result = VolumeAttachmentParams.from_json(result) if result else None



class VolumeAttachmentParamsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~VolumeAttachmentParamsResult]<~VolumeAttachmentParamsResult>
        '''
        self.results = [VolumeAttachmentParamsResult.from_json(o) for o in results or []]



class VolumeAttachmentResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : VolumeAttachment
        '''
        self.error = Error.from_json(error) if error else None
        self.result = VolumeAttachment.from_json(result) if result else None



class VolumeAttachmentResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~VolumeAttachmentResult]<~VolumeAttachmentResult>
        '''
        self.results = [VolumeAttachmentResult.from_json(o) for o in results or []]



class VolumeAttachments(Type):
    _toSchema = {'volume_attachments': 'volume-attachments'}
    _toPy = {'volume-attachments': 'volume_attachments'}
    def __init__(self, volume_attachments=None, **unknown_fields):
        '''
        volume_attachments : typing.Sequence<+T_co>[~VolumeAttachment]<~VolumeAttachment>
        '''
        self.volume_attachments = [VolumeAttachment.from_json(o) for o in volume_attachments or []]



class VolumeDetails(Type):
    _toSchema = {'info': 'info', 'machine_attachments': 'machine-attachments', 'status': 'status', 'storage': 'storage', 'volume_tag': 'volume-tag'}
    _toPy = {'info': 'info', 'machine-attachments': 'machine_attachments', 'status': 'status', 'storage': 'storage', 'volume-tag': 'volume_tag'}
    def __init__(self, info=None, machine_attachments=None, status=None, storage=None, volume_tag=None, **unknown_fields):
        '''
        info : VolumeInfo
        machine_attachments : typing.Mapping<~KT, +VT_co>[str, ~VolumeAttachmentInfo]<~VolumeAttachmentInfo>
        status : EntityStatus
        storage : StorageDetails
        volume_tag : str
        '''
        self.info = VolumeInfo.from_json(info) if info else None
        self.machine_attachments = machine_attachments
        self.status = EntityStatus.from_json(status) if status else None
        self.storage = StorageDetails.from_json(storage) if storage else None
        self.volume_tag = volume_tag



class VolumeDetailsListResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : typing.Sequence<+T_co>[~VolumeDetails]<~VolumeDetails>
        '''
        self.error = Error.from_json(error) if error else None
        self.result = [VolumeDetails.from_json(o) for o in result or []]



class VolumeDetailsListResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~VolumeDetailsListResult]<~VolumeDetailsListResult>
        '''
        self.results = [VolumeDetailsListResult.from_json(o) for o in results or []]



class VolumeFilter(Type):
    _toSchema = {'machines': 'machines'}
    _toPy = {'machines': 'machines'}
    def __init__(self, machines=None, **unknown_fields):
        '''
        machines : typing.Sequence<+T_co>[str]
        '''
        self.machines = machines



class VolumeFilters(Type):
    _toSchema = {'filters': 'filters'}
    _toPy = {'filters': 'filters'}
    def __init__(self, filters=None, **unknown_fields):
        '''
        filters : typing.Sequence<+T_co>[~VolumeFilter]<~VolumeFilter>
        '''
        self.filters = [VolumeFilter.from_json(o) for o in filters or []]



class VolumeInfo(Type):
    _toSchema = {'hardware_id': 'hardware-id', 'persistent': 'persistent', 'size': 'size', 'volume_id': 'volume-id'}
    _toPy = {'hardware-id': 'hardware_id', 'persistent': 'persistent', 'size': 'size', 'volume-id': 'volume_id'}
    def __init__(self, hardware_id=None, persistent=None, size=None, volume_id=None, **unknown_fields):
        '''
        hardware_id : str
        persistent : bool
        size : int
        volume_id : str
        '''
        self.hardware_id = hardware_id
        self.persistent = persistent
        self.size = size
        self.volume_id = volume_id



class VolumeParams(Type):
    _toSchema = {'attachment': 'attachment', 'attributes': 'attributes', 'provider': 'provider', 'size': 'size', 'tags': 'tags', 'volume_tag': 'volume-tag'}
    _toPy = {'attachment': 'attachment', 'attributes': 'attributes', 'provider': 'provider', 'size': 'size', 'tags': 'tags', 'volume-tag': 'volume_tag'}
    def __init__(self, attachment=None, attributes=None, provider=None, size=None, tags=None, volume_tag=None, **unknown_fields):
        '''
        attachment : VolumeAttachmentParams
        attributes : typing.Mapping<~KT, +VT_co>[str, typing.Any]
        provider : str
        size : int
        tags : typing.Mapping<~KT, +VT_co>[str, str]
        volume_tag : str
        '''
        self.attachment = VolumeAttachmentParams.from_json(attachment) if attachment else None
        self.attributes = attributes
        self.provider = provider
        self.size = size
        self.tags = tags
        self.volume_tag = volume_tag



class VolumeParamsResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : VolumeParams
        '''
        self.error = Error.from_json(error) if error else None
        self.result = VolumeParams.from_json(result) if result else None



class VolumeParamsResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~VolumeParamsResult]<~VolumeParamsResult>
        '''
        self.results = [VolumeParamsResult.from_json(o) for o in results or []]



class VolumeResult(Type):
    _toSchema = {'error': 'error', 'result': 'result'}
    _toPy = {'error': 'error', 'result': 'result'}
    def __init__(self, error=None, result=None, **unknown_fields):
        '''
        error : Error
        result : Volume
        '''
        self.error = Error.from_json(error) if error else None
        self.result = Volume.from_json(result) if result else None



class VolumeResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~VolumeResult]<~VolumeResult>
        '''
        self.results = [VolumeResult.from_json(o) for o in results or []]



class Volumes(Type):
    _toSchema = {'volumes': 'volumes'}
    _toPy = {'volumes': 'volumes'}
    def __init__(self, volumes=None, **unknown_fields):
        '''
        volumes : typing.Sequence<+T_co>[~Volume]<~Volume>
        '''
        self.volumes = [Volume.from_json(o) for o in volumes or []]



class WatchContainer(Type):
    _toSchema = {'container_type': 'container-type', 'machine_tag': 'machine-tag'}
    _toPy = {'container-type': 'container_type', 'machine-tag': 'machine_tag'}
    def __init__(self, container_type=None, machine_tag=None, **unknown_fields):
        '''
        container_type : str
        machine_tag : str
        '''
        self.container_type = container_type
        self.machine_tag = machine_tag



class WatchContainers(Type):
    _toSchema = {'params': 'params'}
    _toPy = {'params': 'params'}
    def __init__(self, params=None, **unknown_fields):
        '''
        params : typing.Sequence<+T_co>[~WatchContainer]<~WatchContainer>
        '''
        self.params = [WatchContainer.from_json(o) for o in params or []]



class ZoneResult(Type):
    _toSchema = {'available': 'available', 'error': 'error', 'name': 'name'}
    _toPy = {'available': 'available', 'error': 'error', 'name': 'name'}
    def __init__(self, available=None, error=None, name=None, **unknown_fields):
        '''
        available : bool
        error : Error
        name : str
        '''
        self.available = available
        self.error = Error.from_json(error) if error else None
        self.name = name



class ZoneResults(Type):
    _toSchema = {'results': 'results'}
    _toPy = {'results': 'results'}
    def __init__(self, results=None, **unknown_fields):
        '''
        results : typing.Sequence<+T_co>[~ZoneResult]<~ZoneResult>
        '''
        self.results = [ZoneResult.from_json(o) for o in results or []]
